<html>

<head>
<title>APOCALYX Engine - Programmer's Manual - LUA Interface</title>
</head>

<body bgcolor="#CCCCCC">

<font face="verdana,arial" size="-1"><center>
<h1>APOCALYX Engine</h1>
<h2>Programmer's Manual</h2>
<h3>LUA Interface</h3>
<h5>Copyright © 2002-2008 <a href="mailto:tetractys@users.sourceforge.net">Leonardo
Boselli</a></h5>
</center>
<p>&nbsp;
<hr>
<p>This paper is provided as is without warranties of any kind.
<ul>
  <p>&nbsp;
  <li><b>LUA</b> interface
    <p>&nbsp;
    <ul>
      <li><b><a href="#the_lua_language">Part I</a></b> is mainly an excerpt
        taken from the &quot;<i>Reference Manual of the Programming language LUA
        (5.1)</i>&quot;, copyright © 1994-2006 by Lua.org, PUC-Rio, that is
        included in the official documentation of the language. To get the
        complete manual visit the site <a href="http://www.lua.org">http://www.lua.org</a>.
      <li><b><a href="#the_LUA_API">Part II</a></b> describes the core API
        accessible to the LUA language and it is again an excerpt from the LUA
        Reference Manual.
      <li><b><a href="#the_APOCALYX_API">Part III</a></b> describes the API to
        access the features of the APOCALYX 3D Engine and extend the
        capabilities of the LUA language.
    </ul>
</ul>
<center>
<p>&nbsp;
<hr>
<a name="index">
<h2>Index</h2>
</a>
<hr>
</center>
<ul>
  <p>&nbsp;
  <li><a href="#the_lua_language">Part I - The Lua Language</a><br>
    <ul>
      <li><a href="#1">1 - Introduction</a>
      <li><a href="#2">2 - The Language</a>
        <ul>
          <li><a href="#2.1">2.1 - Lexical Conventions</a>
          <li><a href="#2.2">2.2 - Values and Types</a>
            <ul>
              <li><a href="#2.2.1">2.2.1 - Coercion</a>
            </ul>
          <li><a href="#2.3">2.3 - Variables</a>
          <li><a href="#2.4">2.4 - Statements</a>
            <ul>
              <li><a href="#2.4.1">2.4.1 - Chunks</a>
              <li><a href="#2.4.2">2.4.2 - Blocks</a>
              <li><a href="#2.4.3">2.4.3 - Assignment</a>
              <li><a href="#2.4.4">2.4.4 - Control Structures</a>
              <li><a href="#2.4.5">2.4.5 - For Statement</a>
              <li><a href="#2.4.6">2.4.6 - Function Calls as Statements</a>
              <li><a href="#2.4.7">2.4.7 - Local Declarations</a>
            </ul>
          <li><a href="#2.5">2.5 - Expressions</a>
            <ul>
              <li><a href="#2.5.1">2.5.1 - Arithmetic Operators</a>
              <li><a href="#2.5.2">2.5.2 - Relational Operators</a>
              <li><a href="#2.5.3">2.5.3 - Logical Operators</a>
              <li><a href="#2.5.4">2.5.4 - Concatenation</a>
              <li><a href="#2.5.5">2.5.5 - The Length Operator</a>
              <li><a href="#2.5.6">2.5.6 - Precedence</a>
              <li><a href="#2.5.7">2.5.7 - Table Constructors</a>
              <li><a href="#2.5.8">2.5.8 - Function Calls</a>
              <li><a href="#2.5.9">2.5.9 - Function Definitions</a>
            </ul>
          <li><a href="#2.6">2.6 - Visibility Rules</a>
          <li><a href="#2.7">2.7 - Error Handling</a>
          <li><a href="#2.8">2.8 - Metatables</a>
          <li><a href="#2.9">2.9 - Environments</a>
          <li><a href="#2.10">2.10 - Garbage Collection</a>
            <ul>
              <li><a href="#2.10.1">2.10.1 - Garbage-Collection Metamethods</a>
              <li><a href="#2.10.2">2.10.2 - Weak Tables</a>
            </ul>
          <li><a href="#2.11">2.11 - Coroutines</a>
        </ul>
      <li><a href="#7">7 - Incompatibilities with the Previous Version</a>
        <ul>
          <li><a href="#7.1">7.1 - Changes in the Language</a>
          <li><a href="#7.2">7.2 - Changes in the Libraries</a>
          <li><a href="#7.3">7.3 - Changes in the API</a>
        </ul>
      <li><a href="#8">8 - The Complete Syntax of Lua</a>
    </ul>
    <p>&nbsp;
  <li><a href="#the_LUA_API">Part II - The LUA API</a>
    <p>&nbsp;
    <ul>
      <li><a href="#5">5 - Standard Libraries</a>
        <ul>
          <li><a href="#5.1">5.1 - Basic Functions</a>
          <li><a href="#5.2">5.2 - Coroutine Manipulation</a>
          <li><a href="#5.3">5.3 - Modules</a>
          <li><a href="#5.4">5.4 - String Manipulation</a>
            <ul>
              <li><a href="#5.4.1">5.4.1 - Patterns</a>
            </ul>
          <li><a href="#5.5">5.5 - Table Manipulation</a>
          <li><a href="#5.6">5.6 - Mathematical Functions</a>
          <li><a href="#5.7">5.7 - Input and Output Facilities</a>
          <li><a href="#5.8">5.8 - Operating System Facilities</a>
          <li><a href="#5.9">5.9 - The Debug Library</a>
        </ul>
      <li>Additional Libraries
        <ul>
          <li><a href="APOCALYX-manual-tolua.htm">The <B>toLua</B> Library</a>
          <li><a href="APOCALYX-manual-luasocket.htm">The <B>LuaSocket</B> Library</a>
          <li><a href="APOCALYX-manual-luasql.htm">The <B>LuaSQL</B> Library</a>
          <li><a href="APOCALYX-manual-luasqlite.htm">The <B>Lua-SQLite</B> Library</a>
          <li><a href="APOCALYX-manual-luagd.htm">The <B>Lua-GD</B> Library</a>
          <li><a href="APOCALYX-manual-luagl.htm">The <B>luaGL</B> Library</a>
          <LI><A HREF="APOCALYX-manual-iup/index.html">The <B>IUP</B> Library</A>
          <LI>The <B>Mike's Arbitrary Precision Math</B> (MAPM) Library
<!--
          <LI><A HREF="APOCALYX-manual-cd/index.html">The <B>CD</B> Library</A>
          <LI><A HREF="APOCALYX-manual-im/index.html">The <B>IM</B> Library</A>
-->
<!-- 
          <li><a href="APOCALYX-manual-wxlua.htm">The <B>wxLua</B> Library</a>
 -->
        </ul>
    </ul>
    <br>
  <li><a href="#the_APOCALYX_API">Part III - The APOCALYX API</a>
    <p><a href="#void">3.0 Void</a><br>
    <a href="#window">3.1 Win</a><br>
&nbsp;&nbsp;&nbsp;<a href="#scene">3.1.1 Scene</a><br>
&nbsp;&nbsp;&nbsp;<a href="#world">3.1.2 World</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#tweakbar">3.1.2.0 TweakBar</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#overlay">3.1.2.1 Overlay</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#overlayObject">3.6.3 OverlayObject</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#overlayFader">3.6.3.0 OverlayFader</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#overlayTexts">3.6.3.1 OverlayTexts</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#overlayText">3.6.3.1.1 OverlayText</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#overlayTrueTypeTexts">3.6.3.1.2 OverlayTrueTypeTexts</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#overlayUnicodeTexts">3.6.3.1.2.1 OverlayUnicodeTexts</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#overlayUnicodeText">3.6.3.1.2.2 OverlayUnicodeText</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#font">3.6.3.1.3 Font</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#overlaySprite">3.6.3.2 OverlaySprite</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#overlayGui">3.6.3.2.0 OverlayGui</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#overlayWorldView">3.6.3.2.1 OverlayWorldView</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#overlayViewport">3.6.3.2.2 OverlayViewport</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#overlayPoints">3.6.3.3 OverlayPoints</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#overlayLines">3.6.3.3.1 OverlayLines</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#overlayPolys">3.6.3.3.2 OverlayPolys</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#gui">3.1.2.2 Gui</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiWindow">3.1.2.2.1 GuiWindow</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiBasicButton">3.1.2.2.1.1 GuiBasicButton</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiButton">3.1.2.2.1.1.1 GuiButton</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiCheckBox">3.1.2.2.1.1.2 GuiCheckBox</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiCheckBoxGroup">3.1.2.2.1.1.2.1 GuiCheckBoxGroup</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiMultiTextButton">3.1.2.2.1.1.3 GuiMultiTextButton</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiComboBox">3.1.2.2.1.2 GuiComboBox</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiEditField">3.1.2.2.1.3 GuiEditField</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiFrameWindow">3.1.2.2.1.4 GuiFrameWindow</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiCustomWindow">3.1.2.2.1.5 GuiCustomWindow</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiListWindow">3.1.2.2.1.6 GuiListWindow</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiListBox">3.1.2.2.1.6.1 GuiListBox</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiListControl">3.1.2.2.1.6.2 GuiListControl</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiPanel">3.1.2.2.1.7 GuiPanel</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiLayouter">3.1.2.2.1.7.1 GuiLayouter</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiBoxLayouter">3.1.2.2.1.7.1.1 GuiBoxLayouter</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiComplexGridLayouter">3.1.2.2.1.7.1.2 GuiComplexGridLayouter</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiFlowLayouter">3.1.2.2.1.7.1.3 GuiFlowLayouter</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiGridLayouter">3.1.2.2.1.7.1.4 GuiGridLayouter</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiProgressBar">3.1.2.2.1.8 GuiProgressBar</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiSlideable">3.1.2.2.1.9 GuiSlideable</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiScrollBar">3.1.2.2.1.9.1 GuiScrollBar</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiSlider">3.1.2.2.1.9.2 GuiSlider</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiSpinBox">3.1.2.2.1.9.3 GuiSpinBox</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiStaticText">3.1.2.2.1.10 GuiStaticText</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiImage">3.1.2.2.2 GuiImage</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiTimer">3.1.2.2.3 GuiTimer</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiSlotHolder">3.1.2.2.4 GuiSlotHolder</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiListener">3.1.2.2.5 GuiListener</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiKeyListener">3.1.2.2.5.1 GuiKeyListener</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiMouseListener">3.1.2.2.5.2 GuiMouseListener</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#guiTextRenderer">3.1.2.2.6 GuiTextRenderer</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#underlay">3.1.2.3 Underlay</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#underlayObject">3.6.4 UnderlayObject</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#viewportTexture">3.6.4.0 ViewportTexture</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#aviTexture">3.6.4.1 AviTexture</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#graphicTexture">3.6.4.2 GraphicTexture</a><br>
&nbsp;&nbsp;&nbsp;<a href="#filesystem">3.1.3 FileSystem</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#textfile">3.1.3.1 TextFile</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#meshfile">3.1.3.2 MeshFile</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#samplefile">3.1.3.3
    SampleFile</a><br>
&nbsp;&nbsp;&nbsp;<a href="#joystick">3.1.4 Joystick</a><br>
&nbsp;&nbsp;&nbsp;<a href="#audiocd">3.1.5 AudioCd</a><br>
    <a href="#background">3.2 Background</a><br>
&nbsp;&nbsp;&nbsp;<a href="#halfsky">3.2.0 HalfSky</a><br>
&nbsp;&nbsp;&nbsp;<a href="#skydome">3.2.1 SkyDome</a><br>
&nbsp;&nbsp;&nbsp;<a href="#stellarium">3.2.2 Stellarium</a><br>
&nbsp;&nbsp;&nbsp;<a href="#cloudlayer">3.2.3 CloudLayer</a><br>
    <a href="#terrain">3.3 Terrain</a><br>
&nbsp;&nbsp;&nbsp;<a href="#tiledterrain">3.3.1 TiledTerrain</a><br>
&nbsp;&nbsp;&nbsp;<a href="#patches">3.3.2 Patches</a><br>
&nbsp;&nbsp;&nbsp;<a href="#scenery">3.3.3 Scenery</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#furniture">3.3.3.0 Furniture</a><br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#teams">3.3.3.0.1
    Teams</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#teammate">3.3.3.0.1.1
    TeamMate</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#weapondata">3.3.3.0.1.2
    WeaponData<br>
    </a>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#powerups">3.3.3.0.2
    Powerups</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<a href="#ammodata">3.3.3.0.2.1
    PowerupData<br>
    </a>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#ammo">3.3.3.0.3
    Ammo</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#ammodata">3.3.3.0.3.1
    AmmoData</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#bsp">3.3.3.1 Bsp<br>
    </a><a href="#image">3.4 Image</a><br>
&nbsp;&nbsp;&nbsp;<a href="#texture">3.4.1 Texture</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#bumpedtexture">3.4.1.1
    BumpedTexture</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#animatedtexture">3.4.1.2
    AnimatedTexture</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#texture3d">3.4.1.3 Texture3D</a><br>
&nbsp;&nbsp;&nbsp;<a href="#texsynth">3.4.2 TexSynth</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#teximage">3.4.2.1 TexImage</a><br>
&nbsp;&nbsp;&nbsp;<a href="#noisemodule">3.4.3 NoiseModule</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#noiseperlin">3.4.3.1 NoisePerlin, NoiseBillow, NoiseRidgedMulti</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#noiseclamp">3.4.3.2 NoiseClamp</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#noiseconst">3.4.3.3 NoiseConst</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#noisecurve">3.4.3.4 NoiseCurve</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#noisespheres">3.4.3.5 NoiseSpheres, NoiseCylinders</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#noiseexponent">3.4.3.6 NoiseExponent</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#noiserotatepoint">3.4.3.7 NoiseRotatePoint</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#noisescalebias">3.4.3.8 NoiseScaleBias</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#noisescalepoint">3.4.3.9 NoiseScalePoint</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#noiseselect">3.4.3.10 NoiseSelect</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#noiseterrace">3.4.3.11 NoiseTerrace</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#noisetranslatepoint">3.4.3.12 NoiseTranslatePoint</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#noiseturbulence">3.4.3.13 NoiseTurbulence</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#noisevoronoi">3.4.3.13 NoiseVoronoi</a><br>
&nbsp;&nbsp;&nbsp;<a href="#noisemapbuilder">3.4.4 NoiseMapBuilder</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#noisenormalmaprenderer">3.4.4.1 NoiseNormalMapRenderer</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#noisecolormaprenderer">3.4.4.2 NoiseColorMapRenderer</a><br>
&nbsp;&nbsp;&nbsp;<a href="#noisemap">3.4.5 NoiseMap</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#noiseimage">3.4.5.1 NoiseImage</a><br>
&nbsp;&nbsp;&nbsp;<a href="#noiseline">3.4.6 NoiseLine</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#noiseplane">3.4.6.1 NoisePlane</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#noisesphere">3.4.6.2 NoiseSphere</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#noisecylinder">3.4.6.3 NoiseCylinder</a><br>
    <a href="#material">3.5 Material</a><br>
&nbsp;&nbsp;&nbsp;<a href="#bumpedmaterial">3.5.1 BumpedMaterial</a><br>
&nbsp;&nbsp;&nbsp;<a href="#program">3.5.2 Program</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#vertexprogram">3.5.2.1
    VertexProgram</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#fragmentprogram">3.5.2.2
    FragmentProgram</a><br>
&nbsp;&nbsp;&nbsp;<a href="#programmaterial">3.5.2.3 ProgramMaterial</a><br>
&nbsp;&nbsp;&nbsp;<a href="#shader">3.5.3 Shader</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#fragmentshader">3.5.3.1
    FragmentShader</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#vertexshader">3.5.3.2 VertexShader</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#shaderprogram">3.5.3.3
    ShaderProgram</a><br>
&nbsp;&nbsp;&nbsp;<a href="#shadermaterial">3.5.4 ShaderMaterial</a><br>
    <a href="#reference">3.6 Reference</a><br>
&nbsp;&nbsp;&nbsp;<a href="#transform">3.6.0 Transform</a><br>
&nbsp;&nbsp;&nbsp;<a href="#camera">3.6.1 Camera</a><br>
&nbsp;&nbsp;&nbsp;<a href="#object">3.6.2 Object</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=#scriptobject>3.6.2.0 ScriptObject</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#objects">3.6.2.1 Objects</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#lod">3.6.2.1.1
    Lod</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#light">3.6.2.2 Light</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#moon">3.6.2.2.1
    Moon</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#sun">3.6.2.2.1.1
    Sun</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#firelight">3.6.2.2.2
    FireLight</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#mesh">3.6.2.3 Mesh</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#collider">3.6.2.3.0
    Collider</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#shape">3.6.2.3.1
    Shape</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#shadershape">3.6.2.3.1.1
    ShaderShape</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#bumpedmesh">3.6.2.3.2
    BumpedMesh</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#heightfield">3.6.2.4
    HeightField</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#sprite">3.6.2.5 Sprite</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#sprites">3.6.2.5.0
    Sprites</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#animatedsprite">3.6.2.5.1
    AnimatedSprite</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#axisaligned">3.6.2.5.2
    AxisAligned</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#billboard">3.6.2.5.3
    Billboard</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#fadingbillboard">3.6.2.5.3.0
    FadingBillboard</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#animatedbillboard">3.6.2.5.3.1
    AnimatedBillboard</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=#animatedfadingbillboard>3.6.2.5.3.1.1 AnimatedFadingBillboard</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#trees">3.6.2.5.3.2
    Trees</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#emitter">3.6.2.6 Emitter</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#animatedemitter">3.6.2.6.1
    AnimatedEmitter</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#text">3.6.2.7 Text</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#font3d">3.6.2.7.1
    Font3D</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#model">3.6.2.8 MD3Model <i>aka</i> Model</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#bot">3.6.2.8.1 Bot</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#basicmodel">3.6.2.8.2 MD2Model <i>aka</i> BasicModel</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#advancedmodel">3.6.2.8.3 Cal3DModel <i>aka</i> AdvancedModel</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#ms3dmodel">3.6.2.8.4 MS3DModel</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#mdlmodel">3.6.2.8.5 MDLModel</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#shadow">3.6.2.9 Shadow</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#shadowed">3.6.2.9.1
    Shadowed</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#flat">3.6.2.10 Flat</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#points">3.6.2.11 Points</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#lines">3.6.2.11.1 Lines</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#polys">3.6.2.11.2 Polys</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#quadric">3.6.2.11.3 Quadric</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="APOCALYX-manual-lua.htm#truetypetext">3.6.2.12 TrueTypeText</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="APOCALYX-manual-lua.htm#truetypefont">3.6.2.12.1 TrueTypeFont</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="APOCALYX-manual-lua.htm#truetypepolygonal">3.6.2.12.1.1 TrueTypePolygonal</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="APOCALYX-manual-lua.htm#truetypesolid">3.6.2.12.1.2 TrueTypeSolid</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="APOCALYX-manual-lua.htm#unicodetext">3.6.2.12.2 UnicodeText</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="APOCALYX-manual-lua.htm#unicodefont">3.6.2.12.2.1 UnicodeFont</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#particlegroup">3.6.2.13 ParticleGroup</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#particlesystem">3.6.2.13.1 ParticleSystem</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#particledomain">3.6.2.13.2 ParticleDomain</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#spark">3.6.2.14 Spark</a><br>
    <a href="#sample">3.7 Sample</a><br>
&nbsp;&nbsp;&nbsp;<a href="#sample3d">3.7.1 Sample3D</a><br>
&nbsp;&nbsp;&nbsp;<a href="#sound">3.7.2 Sound</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#sound3d">3.7.2.1 Sound3D</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#source">3.7.2.2 Source</a><br>
&nbsp;&nbsp;&nbsp;<a href="#capturedevice">3.7.3 CaptureDevice</a><br>
    <a href="#music">3.8  MidiMusic <I>aka</I> Music</a><br>
&nbsp;&nbsp;&nbsp;<a href="#mediacontrol">3.8.1 MediaControl</a><br>
&nbsp;&nbsp;&nbsp;<a href="#oggmusic">3.8.2 OggMusic</a><br>
    <a href="#simulator">3.9 Simulator<br>
    </a>&nbsp;&nbsp;&nbsp;<a href="#body">3.9.0 Body</a><br>
&nbsp;&nbsp;&nbsp;<a href="#particleset">3.9.1 ParticleSet</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#assembly">3.9.1.1 Assembly<br>
    </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="#machinery">3.9.1.1.0
    Machinery</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#cloth">3.9.1.1.1
    Cloth</a><br>
&nbsp;&nbsp;&nbsp;<a href="#staticenvironment">3.9.2 StaticEnvironment</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#obstruction">3.9.2.1
    Obstruction</a><br>
    <a href="#zip">3.10 Zip</a><br>
&nbsp;&nbsp;&nbsp;<a href="#newzip">3.10.1 NewZip</a><br>
    <a href="#socket">3.11 Socket</a><br>
&nbsp;&nbsp;&nbsp;<a href="#socketstream">3.11.0 SocketStream</a><br>
&nbsp;&nbsp;&nbsp;<a href="#socketdatagram">3.11.1 SocketDatagram</a><br>
&nbsp;&nbsp;&nbsp;<a href="#host">3.11.2 Host</a><br>
    <a href="#odeworld">3.12 OdeWorld</a><br>
&nbsp;&nbsp;&nbsp;<a href="#odebody">3.12.1 OdeBody</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#odemass">3.12.1.1 OdeMass</a><br>
&nbsp;&nbsp;&nbsp;<a href="#odejoint">3.12.2 OdeJoint</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#odesocket">3.12.2.1 OdeSocket</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#odehinge">3.12.2.2 OdeHinge</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#odeslider">3.12.2.3 OdeSlider</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#odecontactsinfo">3.12.2.4
    OdeContactsInfo</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#odeuniversal">3.12.2.5
    OdeUniversal</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#odehinge2">3.12.2.6 OdeHinge2</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#odemotor">3.12.2.7 OdeMotor</a><br>
&nbsp;&nbsp;&nbsp;<a href="#odejointgroup">3.12.3 OdeJointGroup</a><br>
&nbsp;&nbsp;&nbsp;<a href="#odegeom">3.12.4 OdeGeom</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#odespace">3.12.4.1 OdeSpace</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#odehashspace">3.12.4.1.1
    OdeHashSpace</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#odeplane">3.12.4.2 OdePlane</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#odeplaceable">3.12.4.3
    OdePlaceable</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#odesphere">3.12.4.3.1
    OdeSphere</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#odebox">3.12.4.3.2
    OdeBox</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#odecappedcylinder">3.12.4.3.3
    OdeCappedCylinder</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#odecylinder">3.12.4.3.3.1
    OdeCylinder</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#odetransform">3.12.4.3.4
    OdeTransform</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#oderay">3.12.4.3.5
    OdeRay</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#odetrimesh">3.12.4.3.6
    OdeTriMesh</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#odetrimeshdata">3.12.4.3.6.1
    OdeTriMeshData</a><br>
    <a href="#compiler">3.13 Compiler</a><br>
    <a href="#luascript">3.14 LuaScript</a><br>
<!--
    <a href="#interpreter">3.15 Interpreter</a><br>
    <a href="#scriptengine">3.16 ScriptEngine</a><br>
&nbsp;&nbsp;&nbsp;<a href="#scriptthread">3.16.1 ScriptThread</a><br>
-->
    <a href="#pathfinder">3.17 PathFinder</a><br>
&nbsp;&nbsp;&nbsp;<a href="#pathfound">3.17.1 PathFound</a><br>
    <a href="#steervehicle">3.18 SteerVehicle</a><br>
&nbsp;&nbsp;&nbsp;<a href="#steervehiclegroup">3.18.1 SteerVehicleGroup</a><br>
&nbsp;&nbsp;&nbsp;<a href="#steerobstacle">3.18.2 SteerObstacle</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#steerobstaclegroup">3.18.2.1
    SteerObstacleGroup</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#steersphericalobstacle">3.18.2.2
    SteerSphericalObstacle</a><br>
&nbsp;&nbsp;&nbsp;<a href="#steerpathway">3.18.3 SteerPathway</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#steerpolylinepathway">3.18.3.1
    SteerPolylinePathway</a><br>
&nbsp;&nbsp;&nbsp;<a href="#steerproximity">3.18.4 SteerProximity</a><br>
    <a href="#finitestatemachine">3.19 FiniteStateMachine</a><br>
&nbsp;&nbsp;&nbsp;<a href="#fsmstate">3.19.1 FsmState</a><br>
&nbsp;&nbsp;&nbsp;<a href="#fsmtransition">3.19.2 FsmTransition</a><br>
&nbsp;&nbsp;&nbsp;<a href="#fsmcondition">3.19.3 FsmCondition</a><br>
&nbsp;&nbsp;&nbsp;<a href="#fsmaction">3.19.4 FsmAction</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#fsmactionset">3.19.4.1 FsmActionSet</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#fsmactionincr">3.19.4.2 FsmActionIncr</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#fsmactioncall">3.19.4.3 FsmActionCall</a><br>
    <a href="#speechsynth">3.20 SpeechSynth</a>
    <a href="#networkserver">3.21 NetworkServer</a><br>
&nbsp;&nbsp;&nbsp;<a href="#networkclient">3.21.1 NetworkClient</a><br>
&nbsp;&nbsp;&nbsp;<a href="#networkpacket">3.21.2 NetworkPacket</a><br>
<!-- RakNet
    <a href="#netserver">3.21 NetServer</a><br>
&nbsp;&nbsp;&nbsp;<a href="#netclient">3.21.1 NetClient</a><br>
&nbsp;&nbsp;&nbsp;<a href="#netpacket">3.21.2 NetPacket</a><br>
&nbsp;&nbsp;&nbsp;<a href="#netstream">3.21.3 NetStream</a><br>
&nbsp;&nbsp;&nbsp;<a href="#netplayer">3.21.4 NetPlayer</a><br>
&nbsp;&nbsp;&nbsp;<a href="#netvoice">3.21.5 NetVoice</a><br>
-->
</ul>
<hr>
<center>
<p align="center"><a name="the_lua_language">
<h2>Part I - The Lua Language</h2>
</a></center>
<hr>
<p><i>Excerpt from the</i></p>
<h4>&nbsp;&nbsp;&nbsp; Lua 5.1 Reference Manual</h4>
&nbsp;&nbsp;&nbsp; by Roberto Ierusalimschy, Luiz Henrique de Figueiredo,
Waldemar Celes
<p><small>&nbsp;&nbsp;&nbsp; <a href="http://www.lua.org/copyright.html">Copyright</a>
© 2006 TeCGraf, PUC-Rio. All rights reserved.<br>
</small>
<hr>
<h2>1 - <a name="1">Introduction</a></h2>
<p>Lua is an extension programming language designed to support general
procedural programming with data description facilities. It also offers good
support for object-oriented programming, functional programming, and data-driven
programming. Lua is intended to be used as a powerful, light-weight scripting
language for any program that needs one. Lua is implemented as a library,
written in <em>clean</em> C (that is, in the common subset of ANSI&nbsp;C and
C++).
<p>Being an extension language, Lua has no notion of a &quot;main&quot; program:
it only works <em>embedded</em> in a host client, called the <em>embedding
program</em> or simply the <em>host</em>. This host program can invoke functions
to execute a piece of Lua code, can write and read Lua variables, and can
register C&nbsp;functions to be called by Lua code. Through the use of C&nbsp;functions,
Lua can be augmented to cope with a wide range of different domains, thus
creating customized programming languages sharing a syntactical framework. The
Lua distribution includes a sample host program called <code>lua</code>, which
uses the Lua library to offer a complete, stand-alone Lua interpreter.
<p>Lua is free software, and is provided as usual with no guarantees, as stated
in its license. The implementation described in this manual is available at
Lua's official web site, <code>www.lua.org</code>.
<p>Like any other reference manual, this document is dry in places. For a
discussion of the decisions behind the design of Lua, see the technical papers
available at Lua's web site. For a detailed introduction to programming in Lua,
see Roberto's book, <em>Programming in Lua</em>.
<h2>2 - <a name="2">The Language</a></h2>
<p>This section describes the lexis, the syntax, and the semantics of Lua. In
other words, this section describes which tokens are valid, how they can be
combined, and what their combinations mean.
<p>The language constructs will be explained using the usual extended BNF
notation, in which {<em>a</em>}&nbsp;means&nbsp;0 or more <em>a</em>'s, and [<em>a</em>]&nbsp;means
an optional <em>a</em>. Non-terminals are shown like non-terminal, keywords are
shown like <b>kword</b>, and other terminal symbols are shown like `<b>=</b>´.
The complete syntax of Lua can be found at the end of this manual.
<h2>2.1 - <a name="2.1">Lexical Conventions</a></h2>
<p><em>Names</em> (also called <em>identifiers</em>) in Lua can be any string of
letters, digits, and underscores, not beginning with a digit. This coincides
with the definition of names in most languages. (The definition of letter
depends on the current locale: any character considered alphabetic by the
current locale can be used in an identifier.) Identifiers are used to name
variables and table fields.
<p>The following <em>keywords</em> are reserved and cannot be used as names:
<pre>
     and       break     do        else      elseif
     end       false     for       function  if
     in        local     nil       not       or
     repeat    return    then      true      until     while
</pre>
<p>Lua is a case-sensitive language: <code>and</code> is a reserved word, but <code>And</code>
and <code>AND</code> are two different, valid names. As a convention, names
starting with an underscore followed by uppercase letters (such as <code>_VERSION</code>)
are reserved for internal global variables used by Lua.
<p>The following strings denote other tokens:
<pre>
     +     -     *     /     %     ^     #
     ==    ~=    &lt;=    &gt;=    &lt;     &gt;     =
     (     )     {     }     [     ]
     ;     :     ,     .     ..    ...
</pre>
<p><em>Literal strings</em> can be delimited by matching single or double
quotes, and can contain the following C-like escape sequences: '<code>\a</code>'
(bell), '<code>\b</code>' (backspace), '<code>\f</code>' (form feed), '<code>\n</code>'
(newline), '<code>\r</code>' (carriage return), '<code>\t</code>' (horizontal
tab), '<code>\v</code>' (vertical tab), '<code>\\</code>' (backslash), '<code>\&quot;</code>'
(quotation mark [double quote]), and '<code>\'</code>' (apostrophe [single
quote]). Moreover, a backslash followed by a real newline results in a newline
in the string. A character in a string may also be specified by its numerical
value using the escape sequence <code>\<em>ddd</em></code>, where <em>ddd</em>
is a sequence of up to three decimal digits. (Note that if a numerical escape is
to be followed by a digit, it must be expressed using exactly three digits.)
Strings in Lua may contain any 8-bit value, including embedded zeros, which can
be specified as '<code>\0</code>'.
<p>To put a double (single) quote, a newline, a backslash, or an embedded zero
inside a literal string enclosed by double (single) quotes you must use an
escape sequence. Any other character may be directly inserted into the literal.
(Some control characters may cause problems for the file system, but Lua has no
problem with them.)
<p>Literal strings can also be defined using a long format enclosed by <em>long
brackets</em>. We define an <em>opening long bracket of level <em>n</em></em> as
an opening square bracket followed by <em>n</em> equal signs followed by another
opening square bracket. So, an opening long bracket of level&nbsp;0 is written
as <code>[[</code>, an opening long bracket of level&nbsp;1 is written as <code>[=[</code>,
and so on. A <em>closing long bracket</em> is defined similarly; for instance, a
closing long bracket of level&nbsp;4 is written as <code>]====]</code>. A long
string starts with an opening long bracket of any level and ends at the first
closing long bracket of the same level. Literals in this bracketed form may run
for several lines, do not interpret any escape sequences, and ignore long
brackets of any other level. They may contain anything except a closing bracket
of the proper level.
<p>For convenience, when the opening long bracket is immediately followed by a
newline, the newline is not included in the string. As an example, in a system
using ASCII (in which '<code>a</code>' is coded as&nbsp;97, newline is coded as&nbsp;10,
and '<code>1</code>' is coded as&nbsp;49), the five literals below denote the
same string:
<pre>
     a = 'alo\n123&quot;'
     a = &quot;alo\n123\&quot;&quot;
     a = '\97lo\10\04923&quot;'
     a = [[alo
     123&quot;]]
     a = [==[
     alo
     123&quot;]==]
</pre>
<p>A <em>numerical constant</em> may be written with an optional decimal part
and an optional decimal exponent. Lua also accepts integer hexadecimal
constants, by prefixing them with <code>0x</code>. Examples of valid numerical
constants are
<pre>
     3   3.0   3.1416   314.16e-2   0.31416E1   0xff   0x56
</pre>
<p>A <em>comment</em> starts with a double hyphen (<code>--</code>) anywhere
outside a string. If the text immediately after <code>--</code> is not an
opening long bracket, the comment is a <em>short comment</em>, which runs until
the end of the line. Otherwise, it is a <em>long comment</em>, which runs until
the corresponding closing long bracket. Long comments are frequently used to
disable code temporarily.
<h2>2.2 - <a name="2.2">Values and Types</a></h2>
<p>Lua is a <em>dynamically typed language</em>. This means that variables do
not have types; only values do. There are no type definitions in the language.
All values carry their own type.
<p>All values in Lua are <em>first-class values</em>. This means that all values
can be stored in variables, passed as arguments to other functions, and returned
as results.
<p>There are eight basic types in Lua: <em>nil</em>, <em>boolean</em>, <em>number</em>,
<em>string</em>, <em>function</em>, <em>userdata</em>, <em>thread</em>, and <em>table</em>.
<em>Nil</em> is the type of the value <b>nil</b>, whose main property is to be
different from any other value; it usually represents the absence of a useful
value. <em>Boolean</em> is the type of the values <b>false</b> and <b>true</b>.
Both <b>nil</b> and <b>false</b> make a condition false; any other value makes
it true. <em>Number</em> represents real (double-precision floating-point)
numbers. (It is easy to build Lua interpreters that use other internal
representations for numbers, such as single-precision float or long integers;
see file <code>luaconf.h</code>.) <em>String</em> represents arrays of
characters. Lua is 8-bit clean: strings may contain any 8-bit character,
including embedded zeros ('<code>\0</code>') (see <a href="#2.1">§2.1</a>).
<p>Lua can call (and manipulate) functions written in Lua and functions written
in C (see <a href="#2.5.8">§2.5.8</a>).
<p>The type <em>userdata</em> is provided to allow arbitrary C&nbsp;data to be
stored in Lua variables. This type corresponds to a block of raw memory and has
no pre-defined operations in Lua, except assignment and identity test. However,
by using <em>metatables</em>, the programmer can define operations for userdata
values (see <a href="#2.8">§2.8</a>). Userdata values cannot be created or
modified in Lua, only through the C&nbsp;API. This guarantees the integrity of
data owned by the host program.
<p>The type <em>thread</em> represents independent threads of execution and it
is used to implement coroutines (see <a href="#2.11">§2.11</a>). Do not confuse
Lua threads with operating-system threads. Lua supports coroutines on all
systems, even those that do not support threads.
<p>The type <em>table</em> implements associative arrays, that is, arrays that
can be indexed not only with numbers, but with any value (except <b>nil</b>).
Tables can be <em>heterogeneous</em>; that is, they can contain values of all
types (except <b>nil</b>). Tables are the sole data structuring mechanism in Lua;
they may be used to represent ordinary arrays, symbol tables, sets, records,
graphs, trees, etc. To represent records, Lua uses the field name as an index.
The language supports this representation by providing <code>a.name</code> as
syntactic sugar for <code>a[&quot;name&quot;]</code>. There are several
convenient ways to create tables in Lua (see <a href="#2.5.7">§2.5.7</a>).
<p>Like indices, the value of a table field can be of any type (except <b>nil</b>).
In particular, because functions are first-class values, table fields may
contain functions. Thus tables may also carry <em>methods</em> (see <a href="#2.5.9">§2.5.9</a>).
<p>Tables, functions, threads, and (full) userdata values are <em>objects</em>:
variables do not actually <em>contain</em> these values, only <em>references</em>
to them. Assignment, parameter passing, and function returns always manipulate
references to such values; these operations do not imply any kind of copy.
<p>The library function <a href="#pdf-type"><code>type</code></a> returns a
string describing the type of a given value.
<h3>2.2.1 - <a name="2.2.1">Coercion</a></h3>
<p>Lua provides automatic conversion between string and number values at run
time. Any arithmetic operation applied to a string tries to convert this string
to a number, following the usual conversion rules. Conversely, whenever a number
is used where a string is expected, the number is converted to a string, in a
reasonable format. For complete control over how numbers are converted to
strings, use the <code>format</code> function from the string library (see <a href="#pdf-string.format"><code>string.format</code></a>).
<h2>2.3 - <a name="2.3">Variables</a></h2>
<p>Variables are places that store values. There are three kinds of variables in
Lua: global variables, local variables, and table fields.
<p>A single name can denote a global variable or a local variable (or a
function's formal parameter, which is a particular kind of local variable):
<pre>
	var ::= Name
</pre>
<p>Name denotes identifiers, as defined in <a href="#2.1">§2.1</a>.
<p>Variables are assumed to be global unless explicitly declared local (see <a href="#2.4.7">§2.4.7</a>).
Local variables are <em>lexically scoped</em>: local variables can be freely
accessed by functions defined inside their scope (see <a href="#2.6">§2.6</a>).
<p>Before the first assignment to a variable, its value is <b>nil</b>.
<p>Square brackets are used to index a table:
<pre>
	var ::= prefixexp `<b>[</b>´ exp `<b>]</b>´
</pre>
<p>The meaning of accesses to global variables and table fields can be changed
via metatables. An access to an indexed variable <code>t[i]</code> is equivalent
to a call <code>gettable_event(t,i)</code>. (See <a href="#2.8">§2.8</a> for a
complete description of the <code>gettable_event</code> function. This function
is not defined or callable in Lua. We use it here only for explanatory
purposes.)
<p>The syntax <code>var.Name</code> is just syntactic sugar for <code>var[&quot;Name&quot;]</code>:
<pre>
	var ::= prefixexp `<b>.</b>´ Name
</pre>
<p>All global variables live as fields in ordinary Lua tables, called <em>environment
tables</em> or simply <em>environments</em> (see <a href="#2.9">§2.9</a>). Each
function has its own reference to an environment, so that all global variables
in this function will refer to this environment table. When a function is
created, it inherits the environment from the function that created it. To get
the environment table of a Lua function, you call <a href="#pdf-getfenv"><code>getfenv</code></a>.
To replace it, you call <a href="#pdf-setfenv"><code>setfenv</code></a>. (You
can only manipulate the environment of C&nbsp;functions through the debug
library; (see <a href="#5.9">§5.9</a>).)
<p>An access to a global variable <code>x</code> is equivalent to <code>_env.x</code>,
which in turn is equivalent to
<pre>
     gettable_event(_env, &quot;x&quot;)
</pre>
<p>where <code>_env</code> is the environment of the running function. (See <a href="#2.8">§2.8</a>
for a complete description of the <code>gettable_event</code> function. This
function is not defined or callable in Lua. Similarly, the <code>_env</code>
variable is not defined in Lua. We use them here only for explanatory purposes.)
<h2>2.4 - <a name="2.4">Statements</a></h2>
<p>Lua supports an almost conventional set of statements, similar to those in
Pascal or C. This set includes assignment, control structures, function calls,
and variable declarations.
<h3>2.4.1 - <a name="2.4.1">Chunks</a></h3>
<p>The unit of execution of Lua is called a <em>chunk</em>. A chunk is simply a
sequence of statements, which are executed sequentially. Each statement can be
optionally followed by a semicolon:
<pre>
	chunk ::= {stat [`<b>;</b>´]}
</pre>
<p>There are no empty statements and thus '<code>;;</code>' is not legal.
<p>Lua handles a chunk as the body of an anonymous function with a variable
number of arguments (see <a href="#2.5.9">§2.5.9</a>). As such, chunks can
define local variables, receive arguments, and return values.
<p>A chunk may be stored in a file or in a string inside the host program. When
a chunk is executed, first it is pre-compiled into instructions for a virtual
machine, and then the compiled code is executed by an interpreter for the
virtual machine.
<p>Chunks may also be pre-compiled into binary form; see program <code>luac</code>
for details. Programs in source and compiled forms are interchangeable; Lua
automatically detects the file type and acts accordingly.
<h3>2.4.2 - <a name="2.4.2">Blocks</a></h3>
<p>A block is a list of statements; syntactically, a block is the same as a
chunk:
<pre>
	block ::= chunk
</pre>
<p>A block may be explicitly delimited to produce a single statement:
<pre>
	stat ::= <b>do</b> block <b>end</b>
</pre>
<p>Explicit blocks are useful to control the scope of variable declarations.
Explicit blocks are also sometimes used to add a <b>return</b> or <b>break</b>
statement in the middle of another block (see <a href="#2.4.4">§2.4.4</a>).
<h3>2.4.3 - <a name="2.4.3">Assignment</a></h3>
<p>Lua allows multiple assignment. Therefore, the syntax for assignment defines
a list of variables on the left side and a list of expressions on the right
side. The elements in both lists are separated by commas:
<pre>
	stat ::= varlist1 `<b>=</b>´ explist1
	varlist1 ::= var {`<b>,</b>´ var}
	explist1 ::= exp {`<b>,</b>´ exp}
</pre>
<p>Expressions are discussed in <a href="#2.5">§2.5</a>.
<p>Before the assignment, the list of values is <em>adjusted</em> to the length
of the list of variables. If there are more values than needed, the excess
values are thrown away. If there are fewer values than needed, the list is
extended with as many <b>nil</b>'s as needed. If the list of expressions ends
with a function call, then all values returned by this call enter in the list of
values, before the adjustment (except when the call is enclosed in parentheses;
see <a href="#2.5">§2.5</a>).
<p>The assignment statement first evaluates all its expressions and only then
are the assignments performed. Thus the code
<pre>
     i = 3
     i, a[i] = i+1, 20
</pre>
<p>sets <code>a[3]</code> to 20, without affecting <code>a[4]</code> because the
<code>i</code> in <code>a[i]</code> is evaluated (to 3) before it is assigned&nbsp;4.
Similarly, the line
<pre>
     x, y = y, x
</pre>
<p>exchanges the values of <code>x</code> and <code>y</code>.
<p>The meaning of assignments to global variables and table fields can be
changed via metatables. An assignment to an indexed variable <code>t[i] = val</code>
is equivalent to <code>settable_event(t,i,val)</code>. (See <a href="#2.8">§2.8</a>
for a complete description of the <code>settable_event</code> function. This
function is not defined or callable in Lua. We use it here only for explanatory
purposes.)
<p>An assignment to a global variable <code>x = val</code> is equivalent to the
assignment <code>_env.x = val</code>, which in turn is equivalent to
<pre>
     settable_event(_env, &quot;x&quot;, val)
</pre>
<p>where <code>_env</code> is the environment of the running function. (The <code>_env</code>
variable is not defined in Lua. We use it here only for explanatory purposes.)
<h3>2.4.4 - <a name="2.4.4">Control Structures</a></h3>
<p>The control structures <b>if</b>, <b>while</b>, and <b>repeat</b> have the
usual meaning and familiar syntax:
<pre>
	stat ::= <b>while</b> exp <b>do</b> block <b>end</b>
	stat ::= <b>repeat</b> block <b>until</b> exp
	stat ::= <b>if</b> exp <b>then</b> block {<b>elseif</b> exp <b>then</b> block} [<b>else</b> block] <b>end</b>
</pre>
<p>Lua also has a <b>for</b> statement, in two flavors (see <a href="#2.4.5">§2.4.5</a>).
<p>The condition expression of a control structure may return any value. Both <b>false</b>
and <b>nil</b> are considered false. All values different from <b>nil</b> and <b>false</b>
are considered true (in particular, the number 0 and the empty string are also
true).
<p>In the <b>repeat</b><b>until</b> loop, the inner block does not end at the
<b>until</b> keyword, but only after the condition. So, the condition can refer
to local variables declared inside the loop block.
<p>The <b>return</b> statement is used to return values from a function or a
chunk (which is just a function). Functions and chunks may return more than one
value, so the syntax for the <b>return</b> statement is
<pre>
	stat ::= <b>return</b> [explist1]
</pre>
<p>The <b>break</b> statement is used to terminate the execution of a <b>while</b>,
<b>repeat</b>, or <b>for</b> loop, skipping to the next statement after the
loop:
<pre>
	stat ::= <b>break</b>
</pre>
<p>A <b>break</b> ends the innermost enclosing loop.
<p>The <b>return</b> and <b>break</b> statements can only be written as the <em>last</em>
statement of a block. If it is really necessary to <b>return</b> or <b>break</b>
in the middle of a block, then an explicit inner block can be used, as in the
idioms <code>do return end</code> and <code>do break end</code>, because now <b>return</b>
and <b>break</b> are the last statements in their (inner) blocks.
<h3>2.4.5 - <a name="2.4.5">For Statement</a></h3>
<p>The <b>for</b> statement has two forms: one numeric and one generic.
<p>The numeric <b>for</b> loop repeats a block of code while a control variable
runs through an arithmetic progression. It has the following syntax:
<pre>
	stat ::= <b>for</b> Name `<b>=</b>´ exp `<b>,</b>´ exp [`<b>,</b>´ exp] <b>do</b> block <b>end</b>
</pre>
<p>The <em>block</em> is repeated for <em>name</em> starting at the value of the
first <em>exp</em>, until it passes the second <em>exp</em> by steps of the
third <em>exp</em>. More precisely, a <b>for</b> statement like
<pre>

     for var = e1, e2, e3 do block end
</pre>
<p>is equivalent to the code:
<pre>
     do
       local _var, _limit, _step = tonumber(e1), tonumber(e2), tonumber(e3)
       if not (_var and _limit and _step) then error() end
       while (_step&gt;0 and _var&lt;=_limit) or (_step&lt;=0 and _var&gt;=_limit) do
         local var = _var
         <em>block</em>
         _var = _var + _step
       end
     end
</pre>
<p>Note the following:
<ul>
  <li>All three control expressions are evaluated only once, before the loop
    starts. They must all result in numbers.</li>
  <li><code>_var</code>, <code>_limit</code>, and <code>_step</code> are
    invisible variables. The names are here for explanatory purposes only.</li>
  <li>If the third expression (the step) is absent, then a step of&nbsp;1 is
    used.</li>
  <li>You can use <b>break</b> to exit a <b>for</b> loop.</li>
  <li>The loop variable <code>var</code> is local to the loop; you cannot use
    its value after the <b>for</b> ends or is broken. If you need the value of
    the loop variable <code>var</code>, then assign it to another variable
    before breaking or exiting the loop.</li>
</ul>
<p>The generic <b>for</b> statement works over functions, called <em>iterators</em>.
On each iteration, the iterator function is called to produce a new value,
stopping when this new value is <b>nil</b>. The generic <b>for</b> loop has the
following syntax:
<pre>
	stat ::= <b>for</b> namelist <b>in</b> explist1 <b>do</b> block <b>end</b>
	namelist ::= Name {`<b>,</b>´ Name}
</pre>
<p>A <b>for</b> statement like
<pre>
     for var_1, ···, var_n in explist do block end
</pre>
<p>is equivalent to the code:
<pre>
     do
       local _f, _s, _var = explist
       while true do
         local var_1, ···, var_n = _f(_s, _var)
         _var = var_1
         if _var == nil then break end
         block
       end
     end
</pre>
<p>Note the following:
<ul>
  <li><code>explist</code> is evaluated only once. Its results are an <em>iterator</em>
    function, a <em>state</em>, and an initial value for the first <em>iterator
    variable</em>.</li>
  <li><code>_f</code>, <code>_s</code>, and <code>_var</code> are invisible
    variables. The names are here for explanatory purposes only.</li>
  <li>You can use <b>break</b> to exit a <b>for</b> loop.</li>
  <li>The loop variables <code>var_i</code> are local to the loop; you cannot
    use their values after the <b>for</b> ends. If you need these values, then
    assign them to other variables before breaking or exiting the loop.</li>
</ul>
<h3>2.4.6 - <a name="2.4.6">Function Calls as Statements</a></h3>
<p>To allow possible side-effects, function calls can be executed as statements:
<pre>
	stat ::= functioncall
</pre>
<p>In this case, all returned values are thrown away. Function calls are
explained in <a href="#2.5.8">§2.5.8</a>.
<h3>2.4.7 - <a name="2.4.7">Local Declarations</a></h3>
<p>Local variables may be declared anywhere inside a block. The declaration may
include an initial assignment:
<pre>
	stat ::= <b>local</b> namelist [`<b>=</b>´ explist1]
</pre>
<p>If present, an initial assignment has the same semantics of a multiple
assignment (see <a href="#2.4.3">§2.4.3</a>). Otherwise, all variables are
initialized with <b>nil</b>.
<p>A chunk is also a block (see <a href="#2.4.1">§2.4.1</a>), and so local
variables can be declared in a chunk outside any explicit block. The scope of
such local variables extends until the end of the chunk.
<p>The visibility rules for local variables are explained in <a href="#2.6">§2.6</a>.
<h2>2.5 - <a name="2.5">Expressions</a></h2>
<p>The basic expressions in Lua are the following:
<pre>
	exp ::= prefixexp
	exp ::= <b>nil</b> | <b>false</b> | <b>true</b>
	exp ::= Number
	exp ::= String
	exp ::= function
	exp ::= tableconstructor
	exp ::= `<b>...</b>´
	exp ::= exp binop exp
	exp ::= unop exp
	prefixexp ::= var | functioncall | `<b>(</b>´ exp `<b>)</b>´
</pre>
<p>Numbers and literal strings are explained in <a href="#2.1">§2.1</a>;
variables are explained in <a href="#2.3">§2.3</a>; function definitions are
explained in <a href="#2.5.9">§2.5.9</a>; function calls are explained in <a href="#2.5.8">§2.5.8</a>;
table constructors are explained in <a href="#2.5.7">§2.5.7</a>. Vararg
expressions, denoted by three dots ('<code>...</code>'), can only be used inside
vararg functions; they are explained in <a href="#2.5.9">§2.5.9</a>.
<p>Binary operators comprise arithmetic operators (see <a href="#2.5.1">§2.5.1</a>),
relational operators (see <a href="#2.5.2">§2.5.2</a>), logical operators (see <a href="#2.5.3">§2.5.3</a>),
and the concatenation operator (see <a href="#2.5.4">§2.5.4</a>). Unary
operators comprise the unary minus (see <a href="#2.5.1">§2.5.1</a>), the unary
<b>not</b> (see <a href="#2.5.3">§2.5.3</a>), and the unary <em>length operator</em>
(see <a href="#2.5.5">§2.5.5</a>).
<p>Both function calls and vararg expressions may result in multiple values. If
the expression is used as a statement (see <a href="#2.4.6">§2.4.6</a>) (only
possible for function calls), then its return list is adjusted to zero elements,
thus discarding all returned values. If the expression is used inside another
expression or in the middle of a list of expressions, then its result list is
adjusted to one element, thus discarding all values except the first one. If the
expression is used as the last element of a list of expressions, then no
adjustment is made, unless the call is enclosed in parentheses.
<p>Here are some examples:
<pre>
     f()                -- adjusted to 0 results
     g(f(), x)          -- f() is adjusted to 1 result
     g(x, f())          -- g gets x plus all values returned by f()
     a,b,c = f(), x     -- f() is adjusted to 1 result (c gets nil)
     a,b = ...          -- a gets the first vararg parameter, b gets
                        -- the second (both a and b may get nil if there is
                        -- no corresponding vararg parameter)
     a,b,c = x, f()     -- f() is adjusted to 2 results
     a,b,c = f()        -- f() is adjusted to 3 results
     return f()         -- returns all values returned by f()
     return ...         -- returns all received vararg parameters
     return x,y,f()     -- returns x, y, and all values returned by f()
     {f()}              -- creates a list with all values returned by f()
     {...}              -- creates a list with all vararg parameters
     {f(), nil}         -- f() is adjusted to 1 result
</pre>
<p>An expression enclosed in parentheses always results in only one value. Thus,
<code>(f(x,y,z))</code> is always a single value, even if <code>f</code> returns
several values. (The value of <code>(f(x,y,z))</code> is the first value
returned by <code>f</code> or <b>nil</b> if <code>f</code> does not return any
values.)
<h3>2.5.1 - <a name="2.5.1">Arithmetic Operators</a></h3>
<p>Lua supports the usual arithmetic operators: the binary <code>+</code>
(addition), <code>-</code> (subtraction), <code>*</code> (multiplication), <code>/</code>
(division), <code>%</code> (modulo), and <code>^</code> (exponentiation); and
unary <code>-</code> (negation). If the operands are numbers, or strings that
can be converted to numbers (see <a href="#2.2.1">§2.2.1</a>), then all
operations have the usual meaning. Exponentiation works for any exponent. For
instance, <code>x^(-0.5)</code> computes the inverse of the square root of <code>x</code>.
Modulo is defined as
<pre>
     a % b == a - math.floor(a/b)*b
</pre>
<p>That is, it is the remainder of a division that rounds the quotient towards
minus infinity.
<h3>2.5.2 - <a name="2.5.2">Relational Operators</a></h3>
<p>The relational operators in Lua are
<pre>
     ==    ~=    &lt;     &gt;     &lt;=    &gt;=
</pre>
<p>These operators always result in <b>false</b> or <b>true</b>.
<p>Equality (<code>==</code>) first compares the type of its operands. If the
types are different, then the result is <b>false</b>. Otherwise, the values of
the operands are compared. Numbers and strings are compared in the usual way.
Objects (tables, userdata, threads, and functions) are compared by <em>reference</em>:
two objects are considered equal only if they are the <em>same</em> object.
Every time you create a new object (a table, userdata, thread, or function),
this new object is different from any previously existing object.
<p>You can change the way that Lua compares tables and userdata by using the
&quot;eq&quot; metamethod (see <a href="#2.8">§2.8</a>).
<p>The conversion rules of <a href="#2.2.1">§2.2.1</a> <em>do not</em> apply to
equality comparisons. Thus, <code>&quot;0&quot;==0</code> evaluates to <b>false</b>,
and <code>t[0]</code> and <code>t[&quot;0&quot;]</code> denote different entries
in a table.
<p>The operator <code>~=</code> is exactly the negation of equality (<code>==</code>).
<p>The order operators work as follows. If both arguments are numbers, then they
are compared as such. Otherwise, if both arguments are strings, then their
values are compared according to the current locale. Otherwise, Lua tries to
call the &quot;lt&quot; or the &quot;le&quot; metamethod (see <a href="#2.8">§2.8</a>).
<h3>2.5.3 - <a name="2.5.3">Logical Operators</a></h3>
<p>The logical operators in Lua are <b>and</b>, <b>or</b>, and <b>not</b>. Like
the control structures (see <a href="#2.4.4">§2.4.4</a>), all logical operators
consider both <b>false</b> and <b>nil</b> as false and anything else as true.
<p>The negation operator <b>not</b> always returns <b>false</b> or <b>true</b>.
The conjunction operator <b>and</b> returns its first argument if this value is <b>false</b>
or <b>nil</b>; otherwise, <b>and</b> returns its second argument. The
disjunction operator <b>or</b> returns its first argument if this value is
different from <b>nil</b> and <b>false</b>; otherwise, <b>or</b> returns its
second argument. Both <b>and</b> and <b>or</b> use short-cut evaluation; that
is, the second operand is evaluated only if necessary. Here are some examples:
<pre>
     10 or 20            --&gt; 10
     10 or error()       --&gt; 10
     nil or &quot;a&quot;          --&gt; &quot;a&quot;
     nil and 10          --&gt; nil
     false and error()   --&gt; false
     false and nil       --&gt; false
     false or nil        --&gt; nil
     10 and 20           --&gt; 20
</pre>
<p>(In this manual, --&gt; indicates the result of the preceding expression.)
<h3>2.5.4 - <a name="2.5.4">Concatenation</a></h3>
<p>The string concatenation operator in Lua is denoted by two dots ('<code>..</code>').
If both operands are strings or numbers, then they are converted to strings
according to the rules mentioned in <a href="#2.2.1">§2.2.1</a>. Otherwise, the
&quot;concat&quot; metamethod is called (see <a href="#2.8">§2.8</a>).
<h3>2.5.5 - <a name="2.5.5">The Length Operator</a></h3>
<p>The length operator is denoted by the unary operator <code>#</code>. The
length of a string is its number of bytes (that is, the usual meaning of string
length when each character is one byte).
<p>The length of a table <code>t</code> is defined to be any integer index <code>n</code>
such that <code>t[n]</code> is not <b>nil</b> and <code>t[n+1]</code> is <b>nil</b>;
moreover, if <code>t[1]</code> is <b>nil</b>, <code>n</code> may be zero. For a
regular array, with non-nil values from 1 to a given <code>n</code>, its length
is exactly that <code>n</code>, the index of its last value. If the array has
&quot;holes&quot; (that is, <b>nil</b> values between other non-nil values),
then <code>#t</code> may be any of the indices that directly precedes a <b>nil</b>
value (that is, it may consider any such <b>nil</b> value as the end of the
array).
<h3>2.5.6 - <a name="2.5.6">Precedence</a></h3>
<p>Operator precedence in Lua follows the table below, from lower to higher
priority:
<pre>
     or
     and
     &lt;     &gt;     &lt;=    &gt;=    ~=    ==
     ..
     +     -
     *     /     %
     not   #     - (unary)
     ^
</pre>
<p>As usual, you can use parentheses to change the precedences of an expression.
The concatenation ('<code>..</code>') and exponentiation ('<code>^</code>')
operators are right associative. All other binary operators are left
associative.
<h3>2.5.7 - <a name="2.5.7">Table Constructors</a></h3>
<p>Table constructors are expressions that create tables. Every time a
constructor is evaluated, a new table is created. Constructors can be used to
create empty tables, or to create a table and initialize some of its fields. The
general syntax for constructors is
<pre>
	tableconstructor ::= `<b>{</b>´ [fieldlist] `<b>}</b>´
	fieldlist ::= field {fieldsep field} [fieldsep]
	field ::= `<b>[</b>´ exp `<b>]</b>´ `<b>=</b>´ exp | Name `<b>=</b>´ exp | exp
	fieldsep ::= `<b>,</b>´ | `<b>;</b>´
</pre>
<p>Each field of the form <code>[exp1] = exp2</code> adds to the new table an
entry with key <code>exp1</code> and value <code>exp2</code>. A field of the
form <code>name = exp</code> is equivalent to <code>[&quot;name&quot;] = exp</code>.
Finally, fields of the form <code>exp</code> are equivalent to <code>[i] = exp</code>,
where <code>i</code> are consecutive numerical integers, starting with 1. Fields
in the other formats do not affect this counting. For example,
<pre>
     a = { [f(1)] = g; &quot;x&quot;, &quot;y&quot;; x = 1, f(x), [30] = 23; 45 }
</pre>
<p>is equivalent to
<pre>
     do
       local t = {}
       t[f(1)] = g
       t[1] = &quot;x&quot;         -- 1st exp
       t[2] = &quot;y&quot;         -- 2nd exp
       t.x = 1            -- t[&quot;x&quot;] = 1
       t[3] = f(x)        -- 3rd exp
       t[30] = 23
       t[4] = 45          -- 4th exp
       a = t
     end
</pre>
<p>If the last field in the list has the form <code>exp</code> and the
expression is a function call or a vararg expression, then all values returned
by this expression enter the list consecutively (see <a href="#2.5.8">§2.5.8</a>).
To avoid this, enclose the function call (or the vararg expression) in
parentheses (see <a href="#2.5">§2.5</a>).
<p>The field list may have an optional trailing separator, as a convenience for
machine-generated code.
<h3>2.5.8 - <a name="2.5.8">Function Calls</a></h3>
<p>A function call in Lua has the following syntax:
<pre>
	functioncall ::= prefixexp args
</pre>
<p>In a function call, first prefixexp and args are evaluated. If the value of
prefixexp has type <em>function</em>, then this function is called with the
given arguments. Otherwise, the prefixexp &quot;call&quot; metamethod is called,
having as first parameter the value of prefixexp, followed by the original call
arguments (see <a href="#2.8">§2.8</a>).
<p>The form
<pre>
	functioncall ::= prefixexp `<b>:</b>´ Name args
</pre>
<p>can be used to call &quot;methods&quot;. A call <code>v:name(<em>args</em>)</code>
is syntactic sugar for <code>v.name(v,<em>args</em>)</code>, except that <code>v</code>
is evaluated only once.
<p>Arguments have the following syntax:
<pre>
	args ::= `<b>(</b>´ [explist1] `<b>)</b>´
	args ::= tableconstructor
	args ::= String
</pre>
<p>All argument expressions are evaluated before the call. A call of the form <code>f{<em>fields</em>}</code>
is syntactic sugar for <code>f({<em>fields</em>})</code>; that is, the argument
list is a single new table. A call of the form <code>f'<em>string</em>'</code>
(or <code>f&quot;<em>string</em>&quot;</code> or <code>f[[<em>string</em>]]</code>)
is syntactic sugar for <code>f('<em>string</em>')</code>; that is, the argument
list is a single literal string.
<p>As an exception to the free-format syntax of Lua, you cannot put a line break
before the '<code>(</code>' in a function call. This restriction avoids some
ambiguities in the language. If you write
<pre>
     a = f
     (g).x(a)
</pre>
<p>Lua would see that as a single statement, <code>a = f(g).x(a)</code>. So, if
you want two statements, you must add a semi-colon between them. If you actually
want to call <code>f</code>, you must remove the line break before <code>(g)</code>.
<p>A call of the form <code>return</code> <em>functioncall</em> is called a <em>tail
call</em>. Lua implements <em>proper tail calls</em> (or <em>proper tail
recursion</em>): in a tail call, the called function reuses the stack entry of
the calling function. Therefore, there is no limit on the number of nested tail
calls that a program can execute. However, a tail call erases any debug
information about the calling function. Note that a tail call only happens with
a particular syntax, where the <b>return</b> has one single function call as
argument; this syntax makes the calling function return exactly the returns of
the called function. So, none of the following examples are tail calls:
<pre>
     return (f(x))        -- results adjusted to 1
     return 2 * f(x)
     return x, f(x)       -- additional results
     f(x); return         -- results discarded
     return x or f(x)     -- results adjusted to 1
</pre>
<h3>2.5.9 - <a name="2.5.9">Function Definitions</a></h3>
<p>The syntax for function definition is
<pre>
	function ::= <b>function</b> funcbody
	funcbody ::= `<b>(</b>´ [parlist1] `<b>)</b>´ block <b>end</b>
</pre>
<p>The following syntactic sugar simplifies function definitions:
<pre>
	stat ::= <b>function</b> funcname funcbody
	stat ::= <b>local</b> <b>function</b> Name funcbody
	funcname ::= Name {`<b>.</b>´ Name} [`<b>:</b>´ Name]
</pre>
<p>The statement
<pre>
     function f () <em>body</em> end
</pre>
<p>translates to
<pre>
     f = function () <em>body</em> end
</pre>
<p>The statement
<pre>
     function t.a.b.c.f () <em>body</em> end
</pre>
<p>translates to
<pre>
     t.a.b.c.f = function () <em>body</em> end
</pre>
<p>The statement
<pre>
     local function f () <em>body</em> end
</pre>
<p>translates to
<pre>
     local f; f = function () <em>body</em> end
</pre>
<p><em>not</em> to
<pre>
     local f = function () <em>body</em> end
</pre>
<p>(This only makes a difference when the body of the function contains
references to <code>f</code>.)
<p>A function definition is an executable expression, whose value has type <em>function</em>.
When Lua pre-compiles a chunk, all its function bodies are pre-compiled too.
Then, whenever Lua executes the function definition, the function is <em>instantiated</em>
(or <em>closed</em>). This function instance (or <em>closure</em>) is the final
value of the expression. Different instances of the same function may refer to
different external local variables and may have different environment tables.
<p>Parameters act as local variables that are initialized with the argument
values:
<pre>
	parlist1 ::= namelist [`<b>,</b>´ `<b>...</b>´] | `<b>...</b>´
</pre>
<p>When a function is called, the list of arguments is adjusted to the length of
the list of parameters, unless the function is a variadic or <em>vararg function</em>,
which is indicated by three dots ('<code>...</code>') at the end of its
parameter list. A vararg function does not adjust its argument list; instead, it
collects all extra arguments and supplies them to the function through a <em>vararg
expression</em>, which is also written as three dots. The value of this
expression is a list of all actual extra arguments, similar to a function with
multiple results. If a vararg expression is used inside another expression or in
the middle of a list of expressions, then its return list is adjusted to one
element. If the expression is used as the last element of a list of expressions,
then no adjustment is made (unless the call is enclosed in parentheses).
<p>As an example, consider the following definitions:
<pre>
     function f(a, b) end
     function g(a, b, ...) end
     function r() return 1,2,3 end
</pre>
<p>Then, we have the following mapping from arguments to parameters and to the
vararg expression:
<pre>
     CALL            PARAMETERS
     
     f(3)             a=3, b=nil
     f(3, 4)          a=3, b=4
     f(3, 4, 5)       a=3, b=4
     f(r(), 10)       a=1, b=10
     f(r())           a=1, b=2
     
     g(3)             a=3, b=nil, ... --&gt;  (nothing)
     g(3, 4)          a=3, b=4,   ... --&gt;  (nothing)
     g(3, 4, 5, 8)    a=3, b=4,   ... --&gt;  5  8
     g(5, r())        a=5, b=1,   ... --&gt;  2  3
</pre>
<p>Results are returned using the <b>return</b> statement (see <a href="#2.4.4">§2.4.4</a>).
If control reaches the end of a function without encountering a <b>return</b>
statement, then the function returns with no results.
<p>The <em>colon</em> syntax is used for defining <em>methods</em>, that is,
functions that have an implicit extra parameter <code>self</code>. Thus, the
statement
<pre>
     function t.a.b.c:f (<em>params</em>) <em>body</em> end
</pre>
<p>is syntactic sugar for
<pre>
     t.a.b.c.f = function (self, <em>params</em>) <em>body</em> end
</pre>
<h2>2.6 - <a name="2.6">Visibility Rules</a></h2>
<p>Lua is a lexically scoped language. The scope of variables begins at the
first statement <em>after</em> their declaration and lasts until the end of the
innermost block that includes the declaration. Consider the following example:
<pre>
     x = 10                -- global variable
     do                    -- new block
       local x = x         -- new 'x', with value 10
       print(x)            --&gt; 10
       x = x+1
       do                  -- another block
         local x = x+1     -- another 'x'
         print(x)          --&gt; 12
       end
       print(x)            --&gt; 11
     end
     print(x)              --&gt; 10  (the global one)
</pre>
<p>Notice that, in a declaration like <code>local x = x</code>, the new <code>x</code>
being declared is not in scope yet, and so the second <code>x</code> refers to
the outside variable.
<p>Because of the lexical scoping rules, local variables can be freely accessed
by functions defined inside their scope. A local variable used by an inner
function is called an <em>upvalue</em>, or <em>external local variable</em>,
inside the inner function.
<p>Notice that each execution of a <b>local</b> statement defines new local
variables. Consider the following example:
<pre>
     a = {}
     local x = 20
     for i=1,10 do
       local y = 0
       a[i] = function () y=y+1; return x+y end
     end
</pre>
<p>The loop creates ten closures (that is, ten instances of the anonymous
function). Each of these closures uses a different <code>y</code> variable,
while all of them share the same <code>x</code>.
<h2>2.7 - <a name="2.7">Error Handling</a></h2>
<p>Because Lua is an embedded extension language, all Lua actions start from C&nbsp;code
in the host program calling a function from the Lua library (see <a href="#lua_pcall"><code>lua_pcall</code></a>).
Whenever an error occurs during Lua compilation or execution, control returns to
C, which can take appropriate measures (such as printing an error message).
<p>Lua code can explicitly generate an error by calling the <a href="#pdf-error"><code>error</code></a>
function. If you need to catch errors in Lua, you can use the <a href="#pdf-pcall"><code>pcall</code></a>
function.
<h2>2.8 - <a name="2.8">Metatables</a></h2>
<p>Every value in Lua may have a <em>metatable</em>. This <em>metatable</em> is
an ordinary Lua table that defines the behavior of the original value under
certain special operations. You can change several aspects of the behavior of
operations over a value by setting specific fields in its metatable. For
instance, when a non-numeric value is the operand of an addition, Lua checks for
a function in the field <code>&quot;__add&quot;</code> in its metatable. If it
finds one, Lua calls this function to perform the addition.
<p>We call the keys in a metatable <em>events</em> and the values <em>metamethods</em>.
In the previous example, the event is <code>&quot;add&quot;</code> and the
metamethod is the function that performs the addition.
<p>You can query the metatable of any value through the <a href="#pdf-getmetatable"><code>getmetatable</code></a>
function.
<p>You can replace the metatable of tables through the <a href="#pdf-setmetatable"><code>setmetatable</code></a>
function. You cannot change the metatable of other types from Lua (except using
the debug library); you must use the C&nbsp;API for that.
<p>Tables and userdata have individual metatables (although multiple tables and
userdata can share a same table as their metatable); values of all other types
share one single metatable per type. So, there is one single metatable for all
numbers, and for all strings, etc.
<p>A metatable may control how an object behaves in arithmetic operations, order
comparisons, concatenation, length operation, and indexing. A metatable can also
define a function to be called when a userdata is garbage collected. For each of
these operations Lua associates a specific key called an <em>event</em>. When
Lua performs one of these operations over a value, it checks whether this value
has a metatable with the corresponding event. If so, the value associated with
that key (the metamethod) controls how Lua will perform the operation.
<p>Metatables control the operations listed next. Each operation is identified
by its corresponding name. The key for each operation is a string with its name
prefixed by two underscores, '<code>__</code>'; for instance, the key for
operation &quot;add&quot; is the string <code>&quot;__add&quot;</code>. The
semantics of these operations is better explained by a Lua function describing
how the interpreter executes the operation.
<p>The code shown here in Lua is only illustrative; the real behavior is hard
coded in the interpreter and it is much more efficient than this simulation. All
functions used in these descriptions (<a href="#pdf-rawget"><code>rawget</code></a>,
<a href="#pdf-tonumber"><code>tonumber</code></a>, etc.) are described in <a href="#5.1">§5.1</a>.
In particular, to retrieve the metamethod of a given object, we use the
expression
<pre>
     metatable(obj)[event]
</pre>
<p>This should be read as
<pre>
     rawget(getmetatable(obj) or {}, event)
</pre>
<p>That is, the access to a metamethod does not invoke other metamethods, and
the access to objects with no metatables does not fail (it simply results in <b>nil</b>).
<ul>
  <li><b>&quot;add&quot;:</b> the <code>+</code> operation.
    <p>The function <code>getbinhandler</code> below defines how Lua chooses a
    handler for a binary operation. First, Lua tries the first operand. If its
    type does not define a handler for the operation, then Lua tries the second
    operand.
    <pre>
     function getbinhandler (op1, op2, event)
       return metatable(op1)[event] or metatable(op2)[event]
     end
</pre>
    <p>By using this function, the behavior of the <code>op1 + op2</code> is
    <pre>
     function add_event (op1, op2)
       local o1, o2 = tonumber(op1), tonumber(op2)
       if o1 and o2 then  -- both operands are numeric?
         return o1 + o2   -- '+' here is the primitive 'add'
       else  -- at least one of the operands is not numeric
         local h = getbinhandler(op1, op2, &quot;__add&quot;)
         if h then
           -- call the handler with both operands
           return h(op1, op2)
         else  -- no handler available: default behavior
           error(···)
         end
       end
     end
</pre>
    <p>&nbsp;</li>
  <li><b>&quot;sub&quot;:</b> the <code>-</code> operation. Behavior similar to
    the &quot;add&quot; operation.</li>
  <li><b>&quot;mul&quot;:</b> the <code>*</code> operation. Behavior similar to
    the &quot;add&quot; operation.</li>
  <li><b>&quot;div&quot;:</b> the <code>/</code> operation. Behavior similar to
    the &quot;add&quot; operation.</li>
  <li><b>&quot;mod&quot;:</b> the <code>%</code> operation. Behavior similar to
    the &quot;add&quot; operation, with the operation <code>o1 - floor(o1/o2)*o2</code>
    as the primitive operation.</li>
  <li><b>&quot;pow&quot;:</b> the <code>^</code> (exponentiation) operation.
    Behavior similar to the &quot;add&quot; operation, with the function <code>pow</code>
    (from the C&nbsp;math library) as the primitive operation.</li>
  <li><b>&quot;unm&quot;:</b> the unary <code>-</code> operation.
    <pre>
     function unm_event (op)
       local o = tonumber(op)
       if o then  -- operand is numeric?
         return -o  -- '-' here is the primitive 'unm'
       else  -- the operand is not numeric.
         -- Try to get a handler from the operand
         local h = metatable(op).__unm
         if h then
           -- call the handler with the operand
           return h(op)
         else  -- no handler available: default behavior
           error(···)
         end
       end
     end
</pre>
    <p>&nbsp;</li>
  <li><b>&quot;concat&quot;:</b> the <code>..</code> (concatenation) operation.
    <pre>
     function concat_event (op1, op2)
       if (type(op1) == &quot;string&quot; or type(op1) == &quot;number&quot;) and
          (type(op2) == &quot;string&quot; or type(op2) == &quot;number&quot;) then
         return op1 .. op2  -- primitive string concatenation
       else
         local h = getbinhandler(op1, op2, &quot;__concat&quot;)
         if h then
           return h(op1, op2)
         else
           error(···)
         end
       end
     end
</pre>
    <p>&nbsp;</li>
  <li><b>&quot;len&quot;:</b> the <code>#</code> operation.
    <pre>
     function len_event (op)
       if type(op) == &quot;string&quot; then
         return strlen(op)         -- primitive string length
       elseif type(op) == &quot;table&quot; then
         return #op                -- primitive table length
       else
         local h = metatable(op).__len
         if h then
           -- call the handler with the operand
           return h(op)
         else  -- no handler available: default behavior
           error(···)
         end
       end
     end
</pre>
    <p>See <a href="#2.5.5">§2.5.5</a> for a description of the length of a
    table.</li>
  <li><b>&quot;eq&quot;:</b> the <code>==</code> operation. The function <code>getcomphandler</code>
    defines how Lua chooses a metamethod for comparison operators. A metamethod
    only is selected when both objects being compared have the same type and the
    same metamethod for the selected operation.
    <pre>
     function getcomphandler (op1, op2, event)
       if type(op1) ~= type(op2) then return nil end
       local mm1 = metatable(op1)[event]
       local mm2 = metatable(op2)[event]
       if mm1 == mm2 then return mm1 else return nil end
     end
</pre>
    <p>The &quot;eq&quot; event is defined as follows:
    <pre>
     function eq_event (op1, op2)
       if type(op1) ~= type(op2) then  -- different types?
         return false   -- different objects
       end
       if op1 == op2 then   -- primitive equal?
         return true   -- objects are equal
       end
       -- try metamethod
       local h = getcomphandler(op1, op2, &quot;__eq&quot;)
       if h then
         return h(op1, op2)
       else
         return false
       end
     end
</pre>
    <p><code>a ~= b</code> is equivalent to <code>not (a == b)</code>.</li>
  <li><b>&quot;lt&quot;:</b> the <code>&lt;</code> operation.
    <pre>
     function lt_event (op1, op2)
       if type(op1) == &quot;number&quot; and type(op2) == &quot;number&quot; then
         return op1 &lt; op2   -- numeric comparison
       elseif type(op1) == &quot;string&quot; and type(op2) == &quot;string&quot; then
         return op1 &lt; op2   -- lexicographic comparison
       else
         local h = getcomphandler(op1, op2, &quot;__lt&quot;)
         if h then
           return h(op1, op2)
         else
           error(···);
         end
       end
     end
</pre>
    <p><code>a &gt; b</code> is equivalent to <code>b &lt; a</code>.</li>
  <li><b>&quot;le&quot;:</b> the <code>&lt;=</code> operation.
    <pre>
     function le_event (op1, op2)
       if type(op1) == &quot;number&quot; and type(op2) == &quot;number&quot; then
         return op1 &lt;= op2   -- numeric comparison
       elseif type(op1) == &quot;string&quot; and type(op2) == &quot;string&quot; then
         return op1 &lt;= op2   -- lexicographic comparison
       else
         local h = getcomphandler(op1, op2, &quot;__le&quot;)
         if h then
           return h(op1, op2)
         else
           h = getcomphandler(op1, op2, &quot;__lt&quot;)
           if h then
             return not h(op2, op1)
           else
             error(···);
           end
         end
       end
     end
</pre>
    <p><code>a &gt;= b</code> is equivalent to <code>b &lt;= a</code>. Note
    that, in the absence of a &quot;le&quot; metamethod, Lua tries the &quot;lt&quot;,
    assuming that <code>a &lt;= b</code> is equivalent to <code>not (b &lt; a)</code>.</li>
  <li><b>&quot;index&quot;:</b> The indexing access <code>table[key]</code>.
    <pre>
     function gettable_event (table, key)
       local h
       if type(table) == &quot;table&quot; then
         local v = rawget(table, key)
         if v ~= nil then return v end
         h = metatable(table).__index
         if h == nil then return nil end
       else
         h = metatable(table).__index
         if h == nil then
           error(···);
         end
       end
       if type(h) == &quot;function&quot; then
         return h(table, key)      -- call the handler
       else return h[key]          -- or repeat operation on it
       end
     end
</pre>
    <p>&nbsp;</li>
  <li><b>&quot;newindex&quot;:</b> The indexing assignment <code>table[key] =
    value</code>.
    <pre>
     function settable_event (table, key, value)
       local h
       if type(table) == &quot;table&quot; then
         local v = rawget(table, key)
         if v ~= nil then rawset(table, key, value); return end
         h = metatable(table).__newindex
         if h == nil then rawset(table, key, value); return end
       else
         h = metatable(table).__newindex
         if h == nil then
           error(···);
         end
       end
       if type(h) == &quot;function&quot; then
         return h(table, key,value)    -- call the handler
       else h[key] = value             -- or repeat operation on it
       end
     end
</pre>
    <p>&nbsp;</li>
  <li><b>&quot;call&quot;:</b> called when Lua calls a value.
    <pre>
     function function_event (func, ...)
       if type(func) == &quot;function&quot; then
         return func(...)   -- primitive call
       else
         local h = metatable(func).__call
         if h then
           return h(func, ...)
         else
           error(···)
         end
       end
     end
</pre>
    <p>&nbsp;</li>
</ul>
<h2>2.9 - <a name="2.9">Environments</a></h2>
<p>Besides metatables, objects of types thread, function, and userdata have
another table associated with them, called their <em>environment</em>. Like
metatables, environments are regular tables and multiple objects can share the
same environment.
<p>Environments associated with userdata have no meaning for Lua. It is only a
convenience feature for programmers to associate a table to a userdata.
<p>Environments associated with threads are called <em>global environments</em>.
They are used as the default environment for their threads and non-nested
functions created by the thread (through <a href="#pdf-loadfile"><code>loadfile</code></a>,
<a href="#pdf-loadstring"><code>loadstring</code></a> or <a href="#pdf-load"><code>load</code></a>)
and can be directly accessed by C&nbsp;code (see <a href="#3.3">§3.3</a>).
<p>Environments associated with C&nbsp;functions can be directly accessed by C&nbsp;code
(see <a href="#3.3">§3.3</a>). They are used as the default environment for
other C&nbsp;functions created by the function.
<p>Environments associated with Lua functions are used to resolve all accesses
to global variables within the function (see <a href="#2.3">§2.3</a>). They are
used as the default environment for other Lua functions created by the function.
<p>You can change the environment of a Lua function or the running thread by
calling <a href="#pdf-setfenv"><code>setfenv</code></a>. You can get the
environment of a Lua function or the running thread by calling <a href="#pdf-getfenv"><code>getfenv</code></a>.
To manipulate the environment of other objects (userdata, C&nbsp;functions,
other threads) you must use the C&nbsp;API.
<h2>2.10 - <a name="2.10">Garbage Collection</a></h2>
<p>Lua performs automatic memory management. This means that you have to worry
neither about allocating memory for new objects nor about freeing it when the
objects are no longer needed. Lua manages memory automatically by running a <em>garbage
collector</em> from time to time to collect all <em>dead objects</em> (that is,
these objects that are no longer accessible from Lua). All objects in Lua are
subject to automatic management: tables, userdata, functions, threads, and
strings.
<p>Lua implements an incremental mark-and-sweep collector. It uses two numbers
to control its garbage-collection cycles: the <em>garbage-collector pause</em>
and the <em>garbage-collector step multiplier</em>.
<p>The garbage-collector pause controls how long the collector waits before
starting a new cycle. Larger values make the collector less aggressive. Values
smaller than 1 mean the collector will not wait to start a new cycle. A value of
2 means that the collector waits for the total memory in use to double before
starting a new cycle.
<p>The step multiplier controls the relative speed of the collector relative to
memory allocation. Larger values make the collector more aggressive but also
increase the size of each incremental step. Values smaller than 1 make the
collector too slow and may result in the collector never finishing a cycle. The
default, 2, means that the collector runs at &quot;twice&quot; the speed of
memory allocation.
<p>You can change these numbers by calling <a href="#lua_gc"><code>lua_gc</code></a>
in C or <a href="#pdf-collectgarbage"><code>collectgarbage</code></a> in Lua.
Both get percentage points as arguments (so an argument of 100 means a real
value of 1). With these functions you can also control the collector directly
(e.g., stop and restart it).
<h3>2.10.1 - <a name="2.10.1">Garbage-Collection Metamethods</a></h3>
<p>Using the C&nbsp;API, you can set garbage-collector metamethods for userdata
(see <a href="#2.8">§2.8</a>). These metamethods are also called <em>finalizers</em>.
Finalizers allow you to coordinate Lua's garbage collection with external
resource management (such as closing files, network or database connections, or
freeing your own memory).
<p>Garbage userdata with a field <code>__gc</code> in their metatables are not
collected immediately by the garbage collector. Instead, Lua puts them in a
list. After the collection, Lua does the equivalent of the following function
for each userdata in that list:
<pre>
     function gc_event (udata)
       local h = metatable(udata).__gc
       if h then
         h(udata)
       end
     end
</pre>
<p>At the end of each garbage-collection cycle, the finalizers for userdata are
called in <em>reverse</em> order of their creation, among those collected in
that cycle. That is, the first finalizer to be called is the one associated with
the userdata created last in the program.
<h3>2.10.2 - <a name="2.10.2">Weak Tables</a></h3>
<p>A <em>weak table</em> is a table whose elements are <em>weak references</em>.
A weak reference is ignored by the garbage collector. In other words, if the
only references to an object are weak references, then the garbage collector
will collect this object.
<p>A weak table can have weak keys, weak values, or both. A table with weak keys
allows the collection of its keys, but prevents the collection of its values. A
table with both weak keys and weak values allows the collection of both keys and
values. In any case, if either the key or the value is collected, the whole pair
is removed from the table. The weakness of a table is controlled by the value of
the <code>__mode</code> field of its metatable. If the <code>__mode</code> field
is a string containing the character&nbsp;'<code>k</code>', the keys in the
table are weak. If <code>__mode</code> contains '<code>v</code>', the values in
the table are weak.
<p>After you use a table as a metatable, you should not change the value of its
field <code>__mode</code>. Otherwise, the weak behavior of the tables controlled
by this metatable is undefined.
<h2>2.11 - <a name="2.11">Coroutines</a></h2>
<p>Lua supports coroutines, also called <em>collaborative multithreading</em>. A
coroutine in Lua represents an independent thread of execution. Unlike threads
in multithread systems, however, a coroutine only suspends its execution by
explicitly calling a yield function.
<p>You create a coroutine with a call to <a href="#pdf-coroutine.create"><code>coroutine.create</code></a>.
Its sole argument is a function that is the main function of the coroutine. The <code>create</code>
function only creates a new coroutine and returns a handle to it (an object of
type <em>thread</em>); it does not start the coroutine execution.
<p>When you first call <a href="#pdf-coroutine.resume"><code>coroutine.resume</code></a>,
passing as its first argument the thread returned by <a href="#pdf-coroutine.create"><code>coroutine.create</code></a>,
the coroutine starts its execution, at the first line of its main function.
Extra arguments passed to <a href="#pdf-coroutine.resume"><code>coroutine.resume</code></a>
are passed on to the coroutine main function. After the coroutine starts
running, it runs until it terminates or <em>yields</em>.
<p>A coroutine can terminate its execution in two ways: normally, when its main
function returns (explicitly or implicitly, after the last instruction); and
abnormally, if there is an unprotected error. In the first case, <a href="#pdf-coroutine.resume"><code>coroutine.resume</code></a>
returns <b>true</b>, plus any values returned by the coroutine main function. In
case of errors, <a href="#pdf-coroutine.resume"><code>coroutine.resume</code></a>
returns <b>false</b> plus an error message.
<p>A coroutine yields by calling <a href="#pdf-coroutine.yield"><code>coroutine.yield</code></a>.
When a coroutine yields, the corresponding <a href="#pdf-coroutine.resume"><code>coroutine.resume</code></a>
returns immediately, even if the yield happens inside nested function calls
(that is, not in the main function, but in a function directly or indirectly
called by the main function). In the case of a yield, <a href="#pdf-coroutine.resume"><code>coroutine.resume</code></a>
also returns <b>true</b>, plus any values passed to <a href="#pdf-coroutine.yield"><code>coroutine.yield</code></a>.
The next time you resume the same coroutine, it continues its execution from the
point where it yielded, with the call to <a href="#pdf-coroutine.yield"><code>coroutine.yield</code></a>
returning any extra arguments passed to <a href="#pdf-coroutine.resume"><code>coroutine.resume</code></a>.
<p>The <a href="#pdf-coroutine.wrap"><code>coroutine.wrap</code></a> function
creates a coroutine, just like <a href="#pdf-coroutine.create"><code>coroutine.create</code></a>,
but instead of returning the coroutine itself, it returns a function that, when
called, resumes the coroutine. Any arguments passed to this function go as extra
arguments to <a href="#pdf-coroutine.resume"><code>coroutine.resume</code></a>. <a href="#pdf-coroutine.wrap"><code>coroutine.wrap</code></a>
returns all the values returned by <a href="#pdf-coroutine.resume"><code>coroutine.resume</code></a>,
except the first one (the boolean error code). Unlike <a href="#pdf-coroutine.resume"><code>coroutine.resume</code></a>,
<a href="#pdf-coroutine.wrap"><code>coroutine.wrap</code></a> does not catch
errors; any error is propagated to the caller.
<p>As an example, consider the following code:
<pre>
     function foo (a)
       print(&quot;foo&quot;, a)
       return coroutine.yield(2*a)
     end
     
     co = coroutine.create(function (a,b)
           print(&quot;co-body&quot;, a, b)
           local r = foo(a+1)
           print(&quot;co-body&quot;, r)
           local r, s = coroutine.yield(a+b, a-b)
           print(&quot;co-body&quot;, r, s)
           return b, &quot;end&quot;
     end)
            
     print(&quot;main&quot;, coroutine.resume(co, 1, 10))
     print(&quot;main&quot;, coroutine.resume(co, &quot;r&quot;))
     print(&quot;main&quot;, coroutine.resume(co, &quot;x&quot;, &quot;y&quot;))
     print(&quot;main&quot;, coroutine.resume(co, &quot;x&quot;, &quot;y&quot;))
</pre>
<p>When you run it, it produces the following output:
<pre>
     co-body 1       10
     foo     2
     main    true    4
     co-body r
     main    true    11      -9
     co-body x       y
     main    true    10      end
     main    false   cannot resume dead coroutine
</pre>
<h2>7 - <a name="7">Incompatibilities with the Previous Version</a></h2>
<p>Here we list the incompatibilities that may be found when moving a program
from Lua&nbsp;5.0 to Lua&nbsp;5.1. You can avoid most of the incompatibilities
compiling Lua with appropriate options (see file <code>luaconf.h</code>).
However, all these compatibility options will be removed in the next version of
Lua.
<h2>7.1 - <a name="7.1">Changes in the Language</a></h2>
<ul>
  <li>The vararg system changed from the pseudo-argument <code>arg</code> with a
    table with the extra arguments to the vararg expression. (Option <code>LUA_COMPAT_VARARG</code>
    in <code>luaconf.h</code>.)</li>
  <li>There was a subtle change in the scope of the implicit variables of the <b>for</b>
    statement and for the <b>repeat</b> statement.</li>
  <li>The long string/long comment syntax (<code>[[<em>string</em>]]</code>)
    does not allow nesting. You can use the new syntax (<code>[=[<em>string</em>]=]</code>)
    in these cases. (Option <code>LUA_COMPAT_LSTR</code> in <code>luaconf.h</code>.)</li>
</ul>
<h2>7.2 - <a name="7.2">Changes in the Libraries</a></h2>
<ul>
  <li>Function <code>string.gfind</code> was renamed <a href="#pdf-string.gmatch"><code>string.gmatch</code></a>.
    (Option <code>LUA_COMPAT_GFIND</code>)</li>
  <li>When <a href="#pdf-string.gsub"><code>string.gsub</code></a> is called
    with a function as its third argument, whenever this function returns <b>nil</b>
    or <b>false</b> the replacement string is the whole match, instead of the
    empty string.</li>
  <li>Function <code>table.setn</code> was deprecated. Function <code>table.getn</code>
    corresponds to the new length operator (<code>#</code>); use the operator
    instead of the function. (Option <code>LUA_COMPAT_GETN</code>)</li>
  <li>Function <code>loadlib</code> was renamed <a href="#pdf-package.loadlib"><code>package.loadlib</code></a>.
    (Option <code>LUA_COMPAT_LOADLIB</code>)</li>
  <li>Function <code>math.mod</code> was renamed <a href="#pdf-math.fmod"><code>math.fmod</code></a>.
    (Option <code>LUA_COMPAT_MOD</code>)</li>
  <li>Functions <code>table.foreach</code> and <code>table.foreachi</code> are
    deprecated. You can use a for loop with <code>pairs</code> or <code>ipairs</code>
    instead.</li>
  <li>There were substantial changes in function <a href="#pdf-require"><code>require</code></a>
    due to the new module system. However, the new behavior is mostly compatible
    with the old, but <code>require</code> gets the path from <a href="#pdf-package.path"><code>package.path</code></a>
    instead of from <code>LUA_PATH</code>.</li>
  <li>Function <a href="#pdf-collectgarbage"><code>collectgarbage</code></a> has
    different arguments. Function <code>gcinfo</code> is deprecated; use <code>collectgarbage(&quot;count&quot;)</code>
    instead.</li>
</ul>
<h2>7.3 - <a name="7.3">Changes in the API</a></h2>
<ul>
  <li>The <code>luaopen_*</code> functions (to open libraries) cannot be called
    directly, like a regular C function. They must be called through Lua, like a
    Lua function.</li>
  <li>Function <code>lua_open</code> was replaced by <a href="#lua_newstate"><code>lua_newstate</code></a>
    to allow the user to set a memory-allocation function. You can use <a href="#luaL_newstate"><code>luaL_newstate</code></a>
    from the standard library to create a state with a standard allocation
    function (based on <code>realloc</code>).</li>
  <li>Functions <code>luaL_getn</code> and <code>luaL_setn</code> (from the
    auxiliary library) are deprecated. Use <a href="#lua_objlen"><code>lua_objlen</code></a>
    instead of <code>luaL_getn</code> and nothing instead of <code>luaL_setn</code>.</li>
  <li>Function <code>luaL_openlib</code> was replaced by <a href="#luaL_register"><code>luaL_register</code></a>.</li>
  <li>Function <code>luaL_checkudata</code> now throws an error when the given
    value is not a userdata of the expected type. (In Lua&nbsp;5.0 it returned <code>NULL</code>.)</li>
</ul>
<h2>8 - <a name="8">The Complete Syntax of Lua</a></h2>
<p>Here is the complete syntax of Lua in extended BNF. (It does not describe
operator precedences.)
<pre>

	chunk ::= {stat [`<b>;</b>´]} [laststat [`<b>;</b>´]]

	block ::= chunk

	stat ::=  varlist1 `<b>=</b>´ explist1 | 
		 functioncall | 
		 <b>do</b> block <b>end</b> | 
		 <b>while</b> exp <b>do</b> block <b>end</b> | 
		 <b>repeat</b> block <b>until</b> exp | 
		 <b>if</b> exp <b>then</b> block {<b>elseif</b> exp <b>then</b> block} [<b>else</b> block] <b>end</b> | 
		 <b>for</b> Name `<b>=</b>´ exp `<b>,</b>´ exp [`<b>,</b>´ exp] <b>do</b> block <b>end</b> | 
		 <b>for</b> namelist <b>in</b> explist1 <b>do</b> block <b>end</b> | 
		 <b>function</b> funcname funcbody | 
		 <b>local</b> <b>function</b> Name funcbody | 
		 <b>local</b> namelist [`<b>=</b>´ explist1] 

	laststat ::= <b>return</b> [explist1] | <b>break</b>

	funcname ::= Name {`<b>.</b>´ Name} [`<b>:</b>´ Name]

	varlist1 ::= var {`<b>,</b>´ var}

	var ::=  Name | prefixexp `<b>[</b>´ exp `<b>]</b>´ | prefixexp `<b>.</b>´ Name 

	namelist ::= Name {`<b>,</b>´ Name}

	explist1 ::= {exp `<b>,</b>´} exp

	exp ::=  <b>nil</b> | <b>false</b> | <b>true</b> | Number | String | `<b>...</b>´ | function | 
		 prefixexp | tableconstructor | exp binop exp | unop exp 

	prefixexp ::= var | functioncall | `<b>(</b>´ exp `<b>)</b>´

	functioncall ::=  prefixexp args | prefixexp `<b>:</b>´ Name args 

	args ::=  `<b>(</b>´ [explist1] `<b>)</b>´ | tableconstructor | String 

	function ::= <b>function</b> funcbody

	funcbody ::= `<b>(</b>´ [parlist1] `<b>)</b>´ block <b>end</b>

	parlist1 ::= namelist [`<b>,</b>´ `<b>...</b>´] | `<b>...</b>´

	tableconstructor ::= `<b>{</b>´ [fieldlist] `<b>}</b>´

	fieldlist ::= field {fieldsep field} [fieldsep]

	field ::= `<b>[</b>´ exp `<b>]</b>´ `<b>=</b>´ exp | Name `<b>=</b>´ exp | exp

	fieldsep ::= `<b>,</b>´ | `<b>;</b>´

	binop ::= `<b>+</b>´ | `<b>-</b>´ | `<b>*</b>´ | `<b>/</b>´ | `<b>^</b>´ | `<b>%</b>´ | `<b>..</b>´ | 
		 `<b>&lt;</b>´ | `<b>&lt;=</b>´ | `<b>&gt;</b>´ | `<b>&gt;=</b>´ | `<b>==</b>´ | `<b>~=</b>´ | 
		 <b>and</b> | <b>or</b>

	unop ::= `<b>-</b>´ | <b>not</b> | `<b>#</b>´

</pre>
<p><a href="#index">Index</a>
<hr>
<center>
<p align="center"><a name="the_LUA_API">
<h2>Part II - The Lua API</h2>
</a></center>
<hr>
<p>&nbsp;
<h2>5 - <a name="5">Standard Libraries</a></h2>
<p>The standard Lua libraries provide useful functions that are implemented
directly through the C&nbsp;API. Some of these functions provide essential
services to the language (e.g., <a href="#pdf-type"><code>type</code></a> and <a href="#pdf-getmetatable"><code>getmetatable</code></a>);
others provide access to &quot;outside&quot; services (e.g., I/O); and others
could be implemented in Lua itself, but are quite useful or have critical
performance requirements that deserve an implementation in C (e.g., <code>sort</code>).
<p>All libraries are implemented through the official C&nbsp;API and are
provided as separate C&nbsp;modules. Currently, Lua has the following standard
libraries:
<ul>
  <li>basic library;</li>
  <li>package library;</li>
  <li>string manipulation;</li>
  <li>table manipulation;</li>
  <li>mathematical functions (sin, log, etc.);</li>
  <li>input and output;</li>
  <li>operating system facilities;</li>
  <li>debug facilities.</li>
</ul>
<p>Except for the basic and package libraries, each library provides all its
functions as fields of a global table or as methods of its objects.
<p>To have access to these libraries, the C&nbsp;host program must call <a href="#luaL_openlibs"><code>luaL_openlibs</code></a>,
which open all standard libraries. Alternatively, it can open them individually
by calling <a name="pdf-luaopen_base"><code>luaopen_base</code></a> (for the
basic library), <a name="pdf-luaopen_package"><code>luaopen_package</code></a>
(for the package library), <a name="pdf-luaopen_string"><code>luaopen_string</code></a>
(for the string library), <a name="pdf-luaopen_table"><code>luaopen_table</code></a>
(for the table library), <a name="pdf-luaopen_math"><code>luaopen_math</code></a>
(for the mathematical library), <a name="pdf-luaopen_io"><code>luaopen_io</code></a>
(for the I/O and the Operating System libraries), and <a name="pdf-luaopen_debug"><code>luaopen_debug</code></a>
(for the debug library). These functions are declared in <a name="pdf-lualib.h"><code>lualib.h</code></a>
and should not be called directly: you must call them like any other Lua C&nbsp;function,
e.g., by using <a href="#lua_call"><code>lua_call</code></a>.
<h2>5.1 - <a name="5.1">Basic Functions</a></h2>
<p>The basic library provides some core functions to Lua. If you do not include
this library in your application, you should check carefully whether you need to
provide implementations for some of its facilities.
<p>&nbsp;
<hr>
<h3><a name="pdf-assert"><code>assert (v [, message])</code></a></h3>
Issues an error when the value of its argument <code>v</code> is false (i.e., <b>nil</b>
or <b>false</b>); otherwise, returns all its arguments. <code>message</code> is
an error message; when absent, it defaults to &quot;assertion failed!&quot;
<p>&nbsp;
<hr>
<h3><a name="pdf-collectgarbage"><code>collectgarbage (opt [, arg])</code></a></h3>
<p>This function is a generic interface to the garbage collector. It performs
different functions according to its first argument, <code>opt</code>:
<ul>
  <li><b>&quot;stop&quot;:</b> stops the garbage collector.</li>
  <li><b>&quot;restart&quot;:</b> restarts the garbage collector.</li>
  <li><b>&quot;collect&quot;:</b> performs a full garbage-collection cycle.</li>
  <li><b>&quot;count&quot;:</b> returns the total memory in use by Lua (in
    Kbytes).</li>
  <li><b>&quot;step&quot;:</b> performs a garbage-collection step. The step
    &quot;size&quot; is controlled by <code>arg</code> (larger values mean more
    steps) in a non-specified way. If you want to control the step size you must
    experimentally tune the value of <code>arg</code>. Returns <b>true</b> if
    the step finished a collection cycle.</li>
  <li><b>&quot;setpause&quot;:</b> sets <code>arg</code>/100 as the new value
    for the <em>pause</em> of the collector (see <a href="#2.10">§2.10</a>).</li>
  <li><b>&quot;setstepmul&quot;:</b> sets <code>arg</code>/100 as the new value
    for the <em>step multiplier</em> of the collector (see <a href="#2.10">§2.10</a>).</li>
</ul>
<p>&nbsp;
<hr>
<h3><a name="pdf-dofile"><code>dofile (filename)</code></a></h3>
Opens the named file and executes its contents as a Lua chunk. When called
without arguments, <code>dofile</code> executes the contents of the standard
input (<code>stdin</code>). Returns all values returned by the chunk. In case of
errors, <code>dofile</code> propagates the error to its caller (that is, <code>dofile</code>
does not run in protected mode).
<p>&nbsp;
<hr>
<h3><a name="pdf-error"><code>error (message [, level])</code></a></h3>
Terminates the last protected function called and returns <code>message</code>
as the error message. Function <code>error</code> never returns.
<p>Usually, <code>error</code> adds some information about the error position at
the beginning of the message. The <code>level</code> argument specifies how to
get the error position. With level&nbsp;1 (the default), the error position is
where the <code>error</code> function was called. Level&nbsp;2 points the error
to where the function that called <code>error</code> was called; and so on.
Passing a level&nbsp;0 avoids the addition of error position information to the
message.
<p>&nbsp;
<hr>
<h3><a name="pdf-_G"><code>_G</code></a></h3>
A global variable (not a function) that holds the global environment (that is, <code>_G._G
= _G</code>). Lua itself does not use this variable; changing its value does not
affect any environment, nor vice-versa. (Use <a href="#pdf-setfenv"><code>setfenv</code></a>
to change environments.)
<p>&nbsp;
<hr>
<h3><a name="pdf-getfenv"><code>getfenv (f)</code></a></h3>
Returns the current environment in use by the function. <code>f</code> can be a
Lua function or a number that specifies the function at that stack level: Level&nbsp;1
is the function calling <code>getfenv</code>. If the given function is not a Lua
function, or if <code>f</code> is 0, <code>getfenv</code> returns the global
environment. The default for <code>f</code> is 1.
<p>&nbsp;
<hr>
<h3><a name="pdf-getmetatable"><code>getmetatable (object)</code></a></h3>
<p>If <code>object</code> does not have a metatable, returns <b>nil</b>.
Otherwise, if the object's metatable has a <code>&quot;__metatable&quot;</code>
field, returns the associated value. Otherwise, returns the metatable of the
given object.
<p>&nbsp;
<hr>
<h3><a name="pdf-ipairs"><code>ipairs (t)</code></a></h3>
<p>Returns three values: an iterator function, the table <code>t</code>, and 0,
so that the construction
<pre>
     for i,v in ipairs(t) do <em>body</em> end
</pre>
<p>will iterate over the pairs (<code>1,t[1]</code>), (<code>2,t[2]</code>),
···, up to the first integer key absent from the table.
<p>See <a href="#pdf-next"><code>next</code></a> for the caveats of modifying
the table during its traversal.
<p>&nbsp;
<hr>
<h3><a name="pdf-load"><code>load (func [, chunkname])</code></a></h3>
<p>Loads a chunk using function <code>func</code> to get its pieces. Each call
to <code>func</code> must return a string that concatenates with previous
results. A return of <b>nil</b> (or no value) signals the end of the chunk.
<p>If there are no errors, returns the compiled chunk as a function; otherwise,
returns <b>nil</b> plus the error message. The environment of the returned
function is the global environment.
<p><code>chunkname</code> is used as the chunk name for error messages and debug
information.
<p>&nbsp;
<hr>
<h3><a name="pdf-loadfile"><code>loadfile ([filename])</code></a></h3>
<p>Similar to <a href="#pdf-load"><code>load</code></a>, but gets the chunk from
file <code>filename</code> or from the standard input, if no file name is given.
<p>&nbsp;
<hr>
<h3><a name="pdf-loadstring"><code>loadstring (string [, chunkname])</code></a></h3>
<p>Similar to <a href="#pdf-load"><code>load</code></a>, but gets the chunk from
the given string.
<p>To load and run a given string, use the idiom
<pre>
     assert(loadstring(s))()
</pre>
<p>&nbsp;
<hr>
<h3><a name="pdf-next"><code>next (table [, index])</code></a></h3>
<p>Allows a program to traverse all fields of a table. Its first argument is a
table and its second argument is an index in this table. <code>next</code>
returns the next index of the table and its associated value. When called with <b>nil</b>
as its second argument, <code>next</code> returns an initial index and its
associated value. When called with the last index, or with <b>nil</b> in an
empty table, <code>next</code> returns <b>nil</b>. If the second argument is
absent, then it is interpreted as <b>nil</b>. In particular, you can use <code>next(t)</code>
to check whether a table is empty.
<p>The order in which the indices are enumerated is not specified, <em>even for
numeric indices</em>. (To traverse a table in numeric order, use a numerical <b>for</b>
or the <a href="#pdf-ipairs"><code>ipairs</code></a> function.)
<p>The behavior of <code>next</code> is <em>undefined</em> if, during the
traversal, you assign any value to a non-existent field in the table. You may
however modify existing fields. In particular, you may clear existing fields.
<p>&nbsp;
<hr>
<h3><a name="pdf-pairs"><code>pairs (t)</code></a></h3>
<p>Returns three values: the <a href="#pdf-next"><code>next</code></a> function,
the table <code>t</code>, and <b>nil</b>, so that the construction
<pre>
     for k,v in pairs(t) do <em>body</em> end
</pre>
<p>will iterate over all keyvalue pairs of table <code>t</code>.
<p>See <a href="#pdf-next"><code>next</code></a> for the caveats of modifying
the table during its traversal.
<p>&nbsp;
<hr>
<h3><a name="pdf-pcall"><code>pcall (f, arg1, ···)</code></a></h3>
<p>Calls function <code>f</code> with the given arguments in <em>protected mode</em>.
This means that any error inside&nbsp;<code>f</code> is not propagated; instead,
<code>pcall</code> catches the error and returns a status code. Its first result
is the status code (a boolean), which is true if the call succeeds without
errors. In such case, <code>pcall</code> also returns all results from the call,
after this first result. In case of any error, <code>pcall</code> returns <b>false</b>
plus the error message.
<p>&nbsp;
<hr>
<h3><a name="pdf-print"><code>print (···)</code></a></h3>
Receives any number of arguments, and prints their values to <code>stdout</code>,
using the <a href="#pdf-tostring"><code>tostring</code></a> function to convert
them to strings. <code>print</code> is not intended for formatted output, but
only as a quick way to show a value, typically for debugging. For formatted
output, use <a href="#pdf-string.format"><code>string.format</code></a>.
<p>&nbsp;
<hr>
<h3><a name="pdf-rawequal"><code>rawequal (v1, v2)</code></a></h3>
Checks whether <code>v1</code> is equal to <code>v2</code>, without invoking any
metamethod. Returns a boolean.
<p>&nbsp;
<hr>
<h3><a name="pdf-rawget"><code>rawget (table, index)</code></a></h3>
Gets the real value of <code>table[index]</code>, without invoking any
metamethod. <code>table</code> must be a table; <code>index</code> may be any
value.
<p>&nbsp;
<hr>
<h3><a name="pdf-rawset"><code>rawset (table, index, value)</code></a></h3>
Sets the real value of <code>table[index]</code> to <code>value</code>, without
invoking any metamethod. <code>table</code> must be a table, <code>index</code>
any value different from <b>nil</b>, and <code>value</code> any Lua value.
<p>This function returns <code>table</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-select"><code>select (index, ···)</code></a></h3>
<p>If <code>index</code> is a number, returns all arguments after argument
number <code>index</code>. Otherwise, <code>index</code> must be the string <code>&quot;#&quot;</code>,
and <code>select</code> returns the total number of extra arguments it received.
<p>&nbsp;
<hr>
<h3><a name="pdf-setfenv"><code>setfenv (f, table)</code></a></h3>
<p>Sets the environment to be used by the given function. <code>f</code> can be
a Lua function or a number that specifies the function at that stack level:
Level&nbsp;1 is the function calling <code>setfenv</code>. <code>setfenv</code>
returns the given function.
<p>As a special case, when <code>f</code> is 0 <code>setfenv</code> changes the
environment of the running thread. In this case, <code>setfenv</code> returns no
values.
<p>&nbsp;
<hr>
<h3><a name="pdf-setmetatable"><code>setmetatable (table, metatable)</code></a></h3>
<p>Sets the metatable for the given table. (You cannot change the metatable of
other types from Lua, only from&nbsp;C.) If <code>metatable</code> is <b>nil</b>,
removes the metatable of the given table. If the original metatable has a <code>&quot;__metatable&quot;</code>
field, raises an error.
<p>This function returns <code>table</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-tonumber"><code>tonumber (e [, base])</code></a></h3>
Tries to convert its argument to a number. If the argument is already a number
or a string convertible to a number, then <code>tonumber</code> returns this
number; otherwise, it returns <b>nil</b>.
<p>An optional argument specifies the base to interpret the numeral. The base
may be any integer between 2 and 36, inclusive. In bases above&nbsp;10, the
letter '<code>A</code>' (in either upper or lower case) represents&nbsp;10, '<code>B</code>'
represents&nbsp;11, and so forth, with '<code>Z</code>' representing 35. In base
10 (the default), the number may have a decimal part, as well as an optional
exponent part (see <a href="#2.1">§2.1</a>). In other bases, only unsigned
integers are accepted.
<p>&nbsp;
<hr>
<h3><a name="pdf-tostring"><code>tostring (e)</code></a></h3>
Receives an argument of any type and converts it to a string in a reasonable
format. For complete control of how numbers are converted, use <a href="#pdf-string.format"><code>string.format</code></a>.
<p>If the metatable of <code>e</code> has a <code>&quot;__tostring&quot;</code>
field, then <code>tostring</code> calls the corresponding value with <code>e</code>
as argument, and uses the result of the call as its result.
<p>&nbsp;
<hr>
<h3><a name="pdf-type"><code>type (v)</code></a></h3>
Returns the type of its only argument, coded as a string. The possible results
of this function are &quot;<code>nil</code>&quot; (a string, not the value <b>nil</b>),
&quot;<code>number</code>&quot;, &quot;<code>string</code>&quot;, &quot;<code>boolean</code>&quot;,
&quot;<code>table</code>&quot;, &quot;<code>function</code>&quot;, &quot;<code>thread</code>&quot;,
and &quot;<code>userdata</code>&quot;.
<p>&nbsp;
<hr>
<h3><a name="pdf-unpack"><code>unpack (list [, i [, j]])</code></a></h3>
Returns the elements from the given table. This function is equivalent to
<pre>
     return list[i], list[i+1], ···, list[j]
</pre>
<p>except that the above code can be written only for a fixed number of
elements. By default, <code>i</code> is&nbsp;1 and <code>j</code> is the length
of the list, as defined by the length operator (see <a href="#2.5.5">§2.5.5</a>).
<p>&nbsp;
<hr>
<h3><a name="pdf-_VERSION"><code>_VERSION</code></a></h3>
A global variable (not a function) that holds a string containing the current
interpreter version. The current contents of this variable is &quot;<code>Lua
5.1</code>&quot;.
<p>&nbsp;
<hr>
<h3><a name="pdf-xpcall"><code>xpcall (f, err)</code></a></h3>
<p>This function is similar to <code>pcall</code>, except that you can set a new
error handler.
<p><code>xpcall</code> calls function <code>f</code> in protected mode, using <code>err</code>
as the error handler. Any error inside <code>f</code> is not propagated;
instead, <code>xpcall</code> catches the error, calls the <code>err</code>
function with the original error object, and returns a status code. Its first
result is the status code (a boolean), which is true if the call succeeds
without errors. In this case, <code>xpcall</code> also returns all results from
the call, after this first result. In case of any error, <code>xpcall</code>
returns <b>false</b> plus the result from <code>err</code>.
<h2>5.2 - <a name="5.2">Coroutine Manipulation</a></h2>
<p>The operations related to coroutines comprise a sub-library of the basic
library and come inside the table <a name="pdf-coroutine"><code>coroutine</code></a>.
See <a href="#2.11">§2.11</a> for a general description of coroutines.
<p>&nbsp;
<hr>
<h3><a name="pdf-coroutine.create"><code>coroutine.create (f)</code></a></h3>
<p>Creates a new coroutine, with body <code>f</code>. <code>f</code> must be a
Lua function. Returns this new coroutine, an object with type <code>&quot;thread&quot;</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-coroutine.resume"><code>coroutine.resume (co [, val1, ···])</code></a></h3>
<p>Starts or continues the execution of coroutine <code>co</code>. The first
time you resume a coroutine, it starts running its body. The values <code>val1</code>,
··· are passed as the arguments to the body function. If the coroutine has
yielded, <code>resume</code> restarts it; the values <code>val1</code>, ···
are passed as the results from the yield.
<p>If the coroutine runs without any errors, <code>resume</code> returns <b>true</b>
plus any values passed to <code>yield</code> (if the coroutine yields) or any
values returned by the body function (if the coroutine terminates). If there is
any error, <code>resume</code> returns <b>false</b> plus the error message.
<p>&nbsp;
<hr>
<h3><a name="pdf-coroutine.running"><code>coroutine.running ()</code></a></h3>
<p>Returns the running coroutine, or <b>nil</b> when called by the main thread.
<p>&nbsp;
<hr>
<h3><a name="pdf-coroutine.status"><code>coroutine.status (co)</code></a></h3>
<p>Returns the status of coroutine <code>co</code>, as a string: <code>&quot;running&quot;</code>,
if the coroutine is running (that is, it called <code>status</code>); <code>&quot;suspended&quot;</code>,
if the coroutine is suspended in a call to <code>yield</code>, or if it has not
started running yet; <code>&quot;normal&quot;</code> if the coroutine is active
but not running (that is, it has resumed another coroutine); and <code>&quot;dead&quot;</code>
if the coroutine has finished its body function, or if it has stopped with an
error.
<p>&nbsp;
<hr>
<h3><a name="pdf-coroutine.wrap"><code>coroutine.wrap (f)</code></a></h3>
<p>Creates a new coroutine, with body <code>f</code>. <code>f</code> must be a
Lua function. Returns a function that resumes the coroutine each time it is
called. Any arguments passed to the function behave as the extra arguments to <code>resume</code>.
Returns the same values returned by <code>resume</code>, except the first
boolean. In case of error, propagates the error.
<p>&nbsp;
<hr>
<h3><a name="pdf-coroutine.yield"><code>coroutine.yield (···)</code></a></h3>
<p>Suspends the execution of the calling coroutine. The coroutine cannot be
running a C&nbsp;function, a metamethod, or an iterator. Any arguments to <code>yield</code>
are passed as extra results to <code>resume</code>.
<h2>5.3 - <a name="5.3">Modules</a></h2>
<p>The package library provides basic facilities for loading and building
modules in Lua. It exports two of its functions directly in the global
environment: <a href="#pdf-require"><code>require</code></a> and <a href="#pdf-module"><code>module</code></a>.
Everything else is exported in a table <a name="pdf-package"><code>package</code></a>.
<p>&nbsp;
<hr>
<h3><a name="pdf-module"><code>module (name [, ···])</code></a></h3>
<p>Creates a module. If there is a table in <code>package.loaded[name]</code>,
this table is the module. Otherwise, if there is a global table <code>t</code>
with the given name, this table is the module. Otherwise creates a new table <code>t</code>
and sets it as the value of the global <code>name</code> and the value of <code>package.loaded[name]</code>.
This function also initializes <code>t._NAME</code> with the given name, <code>t._M</code>
with the module (<code>t</code> itself), and <code>t._PACKAGE</code> with the
package name (the full module name minus last component; see below). Finally, <code>module</code>
sets <code>t</code> as the new environment of the current function and the new
value of <code>package.loaded[name]</code>, so that <a href="#pdf-require"><code>require</code></a>
returns <code>t</code>.
<p>If <code>name</code> is a compound name (that is, one with components
separated by dots), <code>module</code> creates (or reuses, if they already
exist) tables for each component. For instance, if <code>name</code> is <code>a.b.c</code>,
then <code>module</code> stores the module table in field <code>c</code> of
field <code>b</code> of global <code>a</code>.
<p>This function may receive optional <em>options</em> after the module name,
where each option is a function to be applied over the module.
<p>&nbsp;
<hr>
<h3><a name="pdf-require"><code>require (modname)</code></a></h3>
<p>Loads the given module. The function starts by looking into the table <a href="#pdf-package.loaded"><code>package.loaded</code></a>
to determine whether <code>modname</code> is already loaded. If it is, then <code>require</code>
returns the value stored at <code>package.loaded[modname]</code>. Otherwise, it
tries to find a <em>loader</em> for the module.
<p>To find a loader, first <code>require</code> queries <code>package.preload[modname]</code>.
If it has a value, this value (which should be a function) is the loader.
Otherwise <code>require</code> searches for a Lua loader using the path stored
in <a href="#pdf-package.path"><code>package.path</code></a>. If that also
fails, it searches for a C&nbsp;loader using the path stored in <a href="#pdf-package.cpath"><code>package.cpath</code></a>.
If that also fails, it tries an <em>all-in-one</em> loader (see below).
<p>When loading a C&nbsp;library, <code>require</code> first uses a dynamic link
facility to link the application with the library. Then it tries to find a C&nbsp;function
inside this library to be used as the loader. The name of this C&nbsp;function
is the string &quot;<code>luaopen_</code>&quot; concatenated with a copy of the
module name where each dot is replaced by an underscore. Moreover, if the module
name has a hyphen, its prefix up to (and including) the first hyphen is removed.
For instance, if the module name is <code>a.v1-b.c</code>, the function name
will be <code>luaopen_b_c</code>.
<p>If <code>require</code> finds neither a Lua library nor a C&nbsp;library for
a module, it calls the <em>all-in-one loader</em>. This loader searches the C&nbsp;path
for a library for the root name of the given module. For instance, when
requiring <code>a.b.c</code>, it will search for a C&nbsp;library for <code>a</code>.
If found, it looks into it for an open function for the submodule; in our
example, that would be <code>luaopen_a_b_c</code>. With this facility, a package
can pack several C&nbsp;submodules into one single library, with each submodule
keeping its original open function.
<p>Once a loader is found, <code>require</code> calls the loader with a single
argument, <code>modname</code>. If the loader returns any value, <code>require</code>
assigns it to <code>package.loaded[modname]</code>. If the loader returns no
value and has not assigned any value to <code>package.loaded[modname]</code>,
then <code>require</code> assigns <b>true</b> to this entry. In any case, <code>require</code>
returns the final value of <code>package.loaded[modname]</code>.
<p>If there is any error loading or running the module, or if it cannot find any
loader for the module, then <code>require</code> signals an error.
<p>&nbsp;
<hr>
<h3><a name="pdf-package.cpath"><code>package.cpath</code></a></h3>
<p>The path used by <a href="#pdf-require"><code>require</code></a> to search
for a C&nbsp;loader.
<p>Lua initializes the C&nbsp;path <a href="#pdf-package.cpath"><code>package.cpath</code></a>
in the same way it initializes the Lua path <a href="#pdf-package.path"><code>package.path</code></a>,
using the environment variable <a name="pdf-LUA_CPATH"><code>LUA_CPATH</code></a>
(plus another default path defined in <code>luaconf.h</code>).
<p>&nbsp;
<hr>
<h3><a name="pdf-package.loaded"><code>package.loaded</code></a></h3>
<p>A table used by <a href="#pdf-require"><code>require</code></a> to control
which modules are already loaded. When you require a module <code>modname</code>
and <code>package.loaded[modname]</code> is not false, <a href="#pdf-require"><code>require</code></a>
simply returns the value stored there.
<p>&nbsp;
<hr>
<h3><a name="pdf-package.loadlib"><code>package.loadlib (libname, funcname)</code></a></h3>
<p>Dynamically links the host program with the C&nbsp;library <code>libname</code>.
Inside this library, looks for a function <code>funcname</code> and returns this
function as a C&nbsp;function. (So, <code>funcname</code> must follow the
protocol (see <a href="#lua_CFunction"><code>lua_CFunction</code></a>)).
<p>This is a low-level function. It completely bypasses the package and module
system. Unlike <a href="#pdf-require"><code>require</code></a>, it does not
perform any path searching and does not automatically adds extensions. <code>libname</code>
must be the complete file name of the C&nbsp;library, including if necessary a
path and extension. <code>funcname</code> must be the exact name exported by the
C&nbsp;library (which may depend on the C&nbsp;compiler and linker used).
<p>This function is not supported by ANSI C. As such, it is only available on
some platforms (Windows, Linux, Mac OS X, Solaris, BSD, plus other Unix systems
that support the <code>dlfcn</code> standard).
<p>&nbsp;
<hr>
<h3><a name="pdf-package.path"><code>package.path</code></a></h3>
<p>The path used by <a href="#pdf-require"><code>require</code></a> to search
for a Lua loader.
<p>At start-up, Lua initializes this variable with the value of the environment
variable <a name="pdf-LUA_PATH"><code>LUA_PATH</code></a> or with a default path
defined in <code>luaconf.h</code>, if the environment variable is not defined.
Any &quot;<code>;;</code>&quot; in the value of the environment variable is
replaced by the default path.
<p>A path is a sequence of <em>templates</em> separated by semicolons. For each
template, <a href="#pdf-require"><code>require</code></a> will change each
interrogation mark in the template by <code>filename</code>, which is <code>modname</code>
with each dot replaced by a &quot;directory separator&quot; (such as &quot;<code>/</code>&quot;
in Unix); then it will try to load the resulting file name. So, for instance, if
the Lua path is
<pre>
     &quot;./?.lua;./?.lc;/usr/local/?/init.lua&quot;
</pre>
<p>the search for a Lua loader for module <code>foo</code> will try to load the
files <code>./foo.lua</code>, <code>./foo.lc</code>, and <code>/usr/local/foo/init.lua</code>,
in that order.
<p>&nbsp;
<hr>
<h3><a name="pdf-package.preload"><code>package.preload</code></a></h3>
<p>A table to store loaders for specific modules (see <a href="#pdf-require"><code>require</code></a>).
<p>&nbsp;
<hr>
<h3><a name="pdf-package.seeall"><code>package.seeall (module)</code></a></h3>
<p>Sets a metatable for <code>module</code> with its <code>__index</code> field
referring to the global environment, so that this module inherits values from
the global environment. To be used as an option to function <a href="#pdf-module"><code>module</code></a>.
<h2>5.4 - <a name="5.4">String Manipulation</a></h2>
<p>This library provides generic functions for string manipulation, such as
finding and extracting substrings, and pattern matching. When indexing a string
in Lua, the first character is at position&nbsp;1 (not at&nbsp;0, as in C).
Indices are allowed to be negative and are interpreted as indexing backwards,
from the end of the string. Thus, the last character is at position -1, and so
on.
<p>The string library provides all its functions inside the table <a name="pdf-string"><code>string</code></a>.
It also sets a metatable for strings where the <code>__index</code> field points
to the <code>string</code> table. Therefore, you can use the string functions in
object-oriented style. For instance, <code>string.byte(s, i)</code> can be
written as <code>s:byte(i)</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-string.byte"><code>string.byte (s [, i [, j]])</code></a></h3>
Returns the internal numerical codes of the characters <code>s[i]</code>, <code>s[i+1]</code>,
···, <code>s[j]</code>. The default value for <code>i</code> is&nbsp;1; the
default value for <code>j</code> is&nbsp;<code>i</code>.
<p>Note that numerical codes are not necessarily portable across platforms.
<p>&nbsp;
<hr>
<h3><a name="pdf-string.char"><code>string.char (···)</code></a></h3>
Receives zero or more integers. Returns a string with length equal to the number
of arguments, in which each character has the internal numerical code equal to
its corresponding argument.
<p>Note that numerical codes are not necessarily portable across platforms.
<p>&nbsp;
<hr>
<h3><a name="pdf-string.dump"><code>string.dump (function)</code></a></h3>
<p>Returns a string containing a binary representation of the given function, so
that a later <a href="#pdf-loadstring"><code>loadstring</code></a> on this
string returns a copy of the function. <code>function</code> must be a Lua
function without upvalues.
<p>&nbsp;
<hr>
<h3><a name="pdf-string.find"><code>string.find (s, pattern [, init [, plain]])</code></a></h3>
Looks for the first match of <code>pattern</code> in the string <code>s</code>.
If it finds a match, then <code>find</code> returns the indices of&nbsp;<code>s</code>
where this occurrence starts and ends; otherwise, it returns <b>nil</b>. A
third, optional numerical argument <code>init</code> specifies where to start
the search; its default value is&nbsp;1 and may be negative. A value of <b>true</b>
as a fourth, optional argument <code>plain</code> turns off the pattern matching
facilities, so the function does a plain &quot;find substring&quot; operation,
with no characters in <code>pattern</code> being considered &quot;magic&quot;.
Note that if <code>plain</code> is given, then <code>init</code> must be given
as well.
<p>If the pattern has captures, then in a successful match the captured values
are also returned, after the two indices.
<p>&nbsp;
<hr>
<h3><a name="pdf-string.format"><code>string.format (formatstring, ···)</code></a></h3>
Returns a formatted version of its variable number of arguments following the
description given in its first argument (which must be a string). The format
string follows the same rules as the <code>printf</code> family of standard C&nbsp;functions.
The only differences are that the options/modifiers <code>*</code>, <code>l</code>,
<code>L</code>, <code>n</code>, <code>p</code>, and <code>h</code> are not
supported and that there is an extra option, <code>q</code>. The <code>q</code>
option formats a string in a form suitable to be safely read back by the Lua
interpreter: the string is written between double quotes, and all double quotes,
newlines, embedded zeros, and backslashes in the string are correctly escaped
when written. For instance, the call
<pre>
     string.format('%q', 'a string with &quot;quotes&quot; and \n new line')
</pre>
<p>will produce the string:
<pre>
     &quot;a string with \&quot;quotes\&quot; and \
      new line&quot;
</pre>
<p>The options <code>c</code>, <code>d</code>, <code>E</code>, <code>e</code>, <code>f</code>,
<code>g</code>, <code>G</code>, <code>i</code>, <code>o</code>, <code>u</code>, <code>X</code>,
and <code>x</code> all expect a number as argument, whereas <code>q</code> and <code>s</code>
expect a string.
<p>This function does not accept string values containing embedded zeros.
<p>&nbsp;
<hr>
<h3><a name="pdf-string.gmatch"><code>string.gmatch (s, pattern)</code></a></h3>
Returns an iterator function that, each time it is called, returns the next
captures from <code>pattern</code> over string <code>s</code>.
<p>If <code>pattern</code> specifies no captures, then the whole match is
produced in each call.
<p>As an example, the following loop
<pre>
     s = &quot;hello world from Lua&quot;
     for w in string.gmatch(s, &quot;%a+&quot;) do
       print(w)
     end
</pre>
<p>will iterate over all the words from string <code>s</code>, printing one per
line. The next example collects all pairs <code>key=value</code> from the given
string into a table:
<pre>
     t = {}
     s = &quot;from=world, to=Lua&quot;
     for k, v in string.gmatch(s, &quot;(%w+)=(%w+)&quot;) do
       t[k] = v
     end
</pre>
<p>&nbsp;
<hr>
<h3><a name="pdf-string.gsub"><code>string.gsub (s, pattern, repl [, n])</code></a></h3>
Returns a copy of <code>s</code> in which all occurrences of the <code>pattern</code>
have been replaced by a replacement string specified by <code>repl</code>, which
may be a string, a table, or a function. <code>gsub</code> also returns, as its
second value, the total number of substitutions made.
<p>If <code>repl</code> is a string, then its value is used for replacement. The
character&nbsp;<code>%</code> works as an escape character: any sequence in <code>repl</code>
of the form <code>%<em>n</em></code>, with <em>n</em> between 1 and 9, stands
for the value of the <em>n</em>-th captured substring (see below). The sequence <code>%0</code>
stands for the whole match. The sequence <code>%%</code> stands for a single&nbsp;<code>%</code>.
<p>If <code>repl</code> is a table, then the table is queried for every match,
using the first capture as the key; if the pattern specifies no captures, then
the whole match is used as the key.
<p>If <code>repl</code> is a function, then this function is called every time a
match occurs, with all captured substrings passed as arguments, in order; if the
pattern specifies no captures, then the whole match is passed as a sole
argument.
<p>If the value returned by the table query or by the function call is a string
or a number, then it is used as the replacement string; otherwise, if it is <b>false</b>
or <b>nil</b>, then there is no replacement (that is, the original match is kept
in the string).
<p>The optional last parameter <code>n</code> limits the maximum number of
substitutions to occur. For instance, when <code>n</code> is 1 only the first
occurrence of <code>pattern</code> is replaced.
<p>Here are some examples:
<pre>
     x = string.gsub(&quot;hello world&quot;, &quot;(%w+)&quot;, &quot;%1 %1&quot;)
     --&gt; x=&quot;hello hello world world&quot;
     
     x = string.gsub(&quot;hello world&quot;, &quot;%w+&quot;, &quot;%0 %0&quot;, 1)
     --&gt; x=&quot;hello hello world&quot;
     
     x = string.gsub(&quot;hello world from Lua&quot;, &quot;(%w+)%s*(%w+)&quot;, &quot;%2 %1&quot;)
     --&gt; x=&quot;world hello Lua from&quot;
     
     x = string.gsub(&quot;home = $HOME, user = $USER&quot;, &quot;%$(%w+)&quot;, os.getenv)
     --&gt; x=&quot;home = /home/roberto, user = roberto&quot;
     
     x = string.gsub(&quot;4+5 = $return 4+5$&quot;, &quot;%$(.-)%$&quot;, function (s)
           return loadstring(s)()
         end)
     --&gt; x=&quot;4+5 = 9&quot;
     
     local t = {name=&quot;lua&quot;, version=&quot;5.1&quot;}
     x = string.gsub(&quot;$name%-$version.tar.gz&quot;, &quot;%$(%w+)&quot;, t)
     --&gt; x=&quot;lua-5.1.tar.gz&quot;
</pre>
<p>&nbsp;
<hr>
<h3><a name="pdf-string.len"><code>string.len (s)</code></a></h3>
Receives a string and returns its length. The empty string <code>&quot;&quot;</code>
has length 0. Embedded zeros are counted, so <code>&quot;a\000bc\000&quot;</code>
has length 5.
<p>&nbsp;
<hr>
<h3><a name="pdf-string.lower"><code>string.lower (s)</code></a></h3>
Receives a string and returns a copy of this string with all uppercase letters
changed to lowercase. All other characters are left unchanged. The definition of
what an uppercase letter is depends on the current locale.
<p>&nbsp;
<hr>
<h3><a name="pdf-string.match"><code>string.match (s, pattern [, init])</code></a></h3>
Looks for the first <em>match</em> of <code>pattern</code> in the string <code>s</code>.
If it finds one, then <code>match</code> returns the captures from the pattern;
otherwise it returns <b>nil</b>. If <code>pattern</code> specifies no captures,
then the whole match is returned. A third, optional numerical argument <code>init</code>
specifies where to start the search; its default value is&nbsp;1 and may be
negative.
<p>&nbsp;
<hr>
<h3><a name="pdf-string.rep"><code>string.rep (s, n)</code></a></h3>
Returns a string that is the concatenation of <code>n</code> copies of the
string <code>s</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-string.reverse"><code>string.reverse (s)</code></a></h3>
Returns a string that is the string <code>s</code> reversed.
<p>&nbsp;
<hr>
<h3><a name="pdf-string.sub"><code>string.sub (s, i [, j])</code></a></h3>
Returns the substring of <code>s</code> that starts at <code>i</code> and
continues until <code>j</code>; <code>i</code> and <code>j</code> may be
negative. If <code>j</code> is absent, then it is assumed to be equal to -1
(which is the same as the string length). In particular, the call <code>string.sub(s,1,j)</code>
returns a prefix of <code>s</code> with length <code>j</code>, and <code>string.sub(s,
-i)</code> returns a suffix of <code>s</code> with length <code>i</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-string.upper"><code>string.upper (s)</code></a></h3>
Receives a string and returns a copy of this string with all lowercase letters
changed to uppercase. All other characters are left unchanged. The definition of
what a lowercase letter is depends on the current locale.
<hr>
<h3><a name="pdf-string.pack"><code>string.pack (F,x1,x2)</code></a></h3>
F is a string describing how the values x1, x2, ... are to be interpreted and formatted. Each letter
in the format string F consumes one of the given values. Only values of type
number or string are accepted. pack returns a (binary) string containing the
values packed as described in F. The letter codes understood by pack are listed
in lpack.c (they are inspired by Perl's codes but are not the same). Numbers
following letter codes in F indicate repetitions.
<br><I>Character codes</I>:
'z' zero-terminated string; 'p' string preceded by length byte; 'P' string preceded by length word;
'a' string preceded by length size_t; 'A' string; 'f' float; 'd' double; 'n' Lua number;
'c' char; 'b' byte = unsigned char; 'h' short; 'H' unsigned short; 'i' int; 'I' unsigned int; 'l' long;
'L' unsigned long; '&lt;' little endian; '&gt;' big endian; '=' native endian.
<hr>
<h3><a name="pdf-string.unpack"><code>string.unpack (s,F,[init])</code></a></h3>
s is a (binary) string containing data packed as if by pack, F is a format string describing what is
to be read from s, and the optional init marks where in s to begin reading the
values. unpack returns one value per letter in F until F or s is exhausted
(the letters codes are the same as for pack, except that numbers following `A'
are interpreted as the number of characters to read into the string, not as
repetitions).
<br>The first value returned by unpack is the next unread position in s, which can
be used as the init position in a subsequent call to unpack. This allows you to
unpack values in a loop or in several steps. If the position returned by unpack
is beyond the end of s, then s has been exhausted; any calls to unpack starting
beyond the end of s will always return nil values.

<h3>5.4.1 - <a name="5.4.1">Patterns</a></h3>
<h4>Character Class:</h4>
<p>A <em>character class</em> is used to represent a set of characters. The
following combinations are allowed in describing a character class:
<ul>
  <li><b><em>x</em>:</b> (where <em>x</em> is not one of the <em>magic
    characters</em> <code>^$()%.[]*+-?</code>) represents the character <em>x</em>
    itself.</li>
  <li><b><code>.</code>:</b> (a dot) represents all characters.</li>
  <li><b><code>%a</code>:</b> represents all letters.</li>
  <li><b><code>%c</code>:</b> represents all control characters.</li>
  <li><b><code>%d</code>:</b> represents all digits.</li>
  <li><b><code>%l</code>:</b> represents all lowercase letters.</li>
  <li><b><code>%p</code>:</b> represents all punctuation characters.</li>
  <li><b><code>%s</code>:</b> represents all space characters.</li>
  <li><b><code>%u</code>:</b> represents all uppercase letters.</li>
  <li><b><code>%w</code>:</b> represents all alphanumeric characters.</li>
  <li><b><code>%x</code>:</b> represents all hexadecimal digits.</li>
  <li><b><code>%z</code>:</b> represents the character with representation 0.</li>
  <li><b><code>%<em>x</em></code>:</b> (where <em>x</em> is any non-alphanumeric
    character) represents the character <em>x</em>. This is the standard way to
    escape the magic characters. Any punctuation character (even the non magic)
    can be preceded by a '<code>%</code>' when used to represent itself in a
    pattern.</li>
  <li><b><code>[<em>set</em>]</code>:</b> represents the class which is the
    union of all characters in <em>set</em>. A range of characters may be
    specified by separating the end characters of the range with a '<code>-</code>'.
    All classes <code>%</code><em>x</em> described above may also be used as
    components in <em>set</em>. All other characters in <em>set</em> represent
    themselves. For example, <code>[%w_]</code> (or <code>[_%w]</code>)
    represents all alphanumeric characters plus the underscore, <code>[0-7]</code>
    represents the octal digits, and <code>[0-7%l%-]</code> represents the octal
    digits plus the lowercase letters plus the '<code>-</code>' character.
    <p>The interaction between ranges and classes is not defined. Therefore,
    patterns like <code>[%a-z]</code> or <code>[a-%%]</code> have no meaning.</li>
  <li><b><code>[^<em>set</em>]</code>:</b> represents the complement of <em>set</em>,
    where <em>set</em> is interpreted as above.</li>
</ul>
<p>For all classes represented by single letters (<code>%a</code>, <code>%c</code>,
etc.), the corresponding uppercase letter represents the complement of the
class. For instance, <code>%S</code> represents all non-space characters.
<p>The definitions of letter, space, and other character groups depend on the
current locale. In particular, the class <code>[a-z]</code> may not be
equivalent to <code>%l</code>.
<h4>Pattern Item:</h4>
<p>A <em>pattern item</em> may be
<ul>
  <li>a single character class, which matches any single character in the class;</li>
  <li>a single character class followed by '<code>*</code>', which matches 0 or
    more repetitions of characters in the class. These repetition items will
    always match the longest possible sequence;</li>
  <li>a single character class followed by '<code>+</code>', which matches 1 or
    more repetitions of characters in the class. These repetition items will
    always match the longest possible sequence;</li>
  <li>a single character class followed by '<code>-</code>', which also matches
    0 or more repetitions of characters in the class. Unlike '<code>*</code>',
    these repetition items will always match the <em>shortest</em> possible
    sequence;</li>
  <li>a single character class followed by '<code>?</code>', which matches 0 or
    1 occurrence of a character in the class;</li>
  <li><code>%<em>n</em></code>, for <em>n</em> between 1 and 9; such item
    matches a substring equal to the <em>n</em>-th captured string (see below);</li>
  <li><code>%b<em>xy</em></code>, where <em>x</em> and <em>y</em> are two
    distinct characters; such item matches strings that start with&nbsp;<em>x</em>,
    end with&nbsp;<em>y</em>, and where the <em>x</em> and <em>y</em> are <em>balanced</em>.
    This means that, if one reads the string from left to right, counting <em>+1</em>
    for an <em>x</em> and <em>-1</em> for a <em>y</em>, the ending <em>y</em> is
    the first <em>y</em> where the count reaches 0. For instance, the item <code>%b()</code>
    matches expressions with balanced parentheses.</li>
</ul>
<h4>Pattern:</h4>
<p>A <em>pattern</em> is a sequence of pattern items. A '<code>^</code>' at the
beginning of a pattern anchors the match at the beginning of the subject string.
A '<code>$</code>' at the end of a pattern anchors the match at the end of the
subject string. At other positions, '<code>^</code>' and '<code>$</code>' have
no special meaning and represent themselves.
<h4>Captures:</h4>
<p>A pattern may contain sub-patterns enclosed in parentheses; they describe <em>captures</em>.
When a match succeeds, the substrings of the subject string that match captures
are stored (<em>captured</em>) for future use. Captures are numbered according
to their left parentheses. For instance, in the pattern <code>&quot;(a*(.)%w(%s*))&quot;</code>,
the part of the string matching <code>&quot;a*(.)%w(%s*)&quot;</code> is stored
as the first capture (and therefore has number&nbsp;1); the character matching
&quot;<code>.</code>&quot; is captured with number&nbsp;2, and the part matching
&quot;<code>%s*</code>&quot; has number&nbsp;3.
<p>As a special case, the empty capture <code>()</code> captures the current
string position (a number). For instance, if we apply the pattern <code>&quot;()aa()&quot;</code>
on the string <code>&quot;flaaap&quot;</code>, there will be two captures: 3&nbsp;and&nbsp;5.
<p>A pattern cannot contain embedded zeros. Use <code>%z</code> instead.
<h2>5.5 - <a name="5.5">Table Manipulation</a></h2>
<p>This library provides generic functions for table manipulation. It provides
all its functions inside the table <a name="pdf-table"><code>table</code></a>.
<p>Most functions in the table library assume that the table represents an array
or a list. For these functions, when we talk about the &quot;length&quot; of a
table we mean the result of the length operator.
<p>&nbsp;
<hr>
<h3><a name="pdf-table.concat"><code>table.concat (table [, sep [, i [, j]]])</code></a></h3>
Returns <code>table[i]..sep..table[i+1] ··· sep..table[j]</code>. The default
value for <code>sep</code> is the empty string, the default for <code>i</code>
is 1, and the default for <code>j</code> is the length of the table. If <code>i</code>
is greater than <code>j</code>, returns the empty string.
<p>&nbsp;
<hr>
<h3><a name="pdf-table.insert"><code>table.insert (table, [pos,] value)</code></a></h3>
<p>Inserts element <code>value</code> at position <code>pos</code> in <code>table</code>,
shifting up other elements to open space, if necessary. The default value for <code>pos</code>
is <code>n+1</code>, where <code>n</code> is the length of the table (see <a href="#2.5.5">§2.5.5</a>),
so that a call <code>table.insert(t,x)</code> inserts <code>x</code> at the end
of table <code>t</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-table.maxn"><code>table.maxn (table)</code></a></h3>
<p>Returns the largest positive numerical index of the given table, or zero if
the table has no positive numerical indices. (To do its job this function does a
linear traversal of the whole table.)
<p>&nbsp;
<hr>
<h3><a name="pdf-table.remove"><code>table.remove (table [, pos])</code></a></h3>
<p>Removes from <code>table</code> the element at position <code>pos</code>,
shifting down other elements to close the space, if necessary. Returns the value
of the removed element. The default value for <code>pos</code> is <code>n</code>,
where <code>n</code> is the length of the table, so that a call <code>table.remove(t)</code>
removes the last element of table <code>t</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-table.sort"><code>table.sort (table [, comp])</code></a></h3>
Sorts table elements in a given order, <em>in-place</em>, from <code>table[1]</code>
to <code>table[n]</code>, where <code>n</code> is the length of the table. If <code>comp</code>
is given, then it must be a function that receives two table elements, and
returns true when the first is less than the second (so that <code>not
comp(a[i+1],a[i])</code> will be true after the sort). If <code>comp</code> is
not given, then the standard Lua operator <code>&lt;</code> is used instead.
<p>The sort algorithm is not stable; that is, elements considered equal by the
given order may have their relative positions changed by the sort.
<h2>5.6 - <a name="5.6">Mathematical Functions</a></h2>
<p>This library is an interface to the standard C&nbsp;math library. It provides
all its functions inside the table <a name="pdf-math"><code>math</code></a>.
<p>&nbsp;
<hr>
<h3><a name="pdf-math.abs"><code>math.abs (x)</code></a></h3>
<p>Returns the absolute value of <code>x</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-math.acos"><code>math.acos (x)</code></a></h3>
<p>Returns the arc cosine of <code>x</code> (in radians).
<p>&nbsp;
<hr>
<h3><a name="pdf-math.asin"><code>math.asin (x)</code></a></h3>
<p>Returns the arc sine of <code>x</code> (in radians).
<p>&nbsp;
<hr>
<h3><a name="pdf-math.atan"><code>math.atan (x)</code></a></h3>
<p>Returns the arc tangent of <code>x</code> (in radians).
<p>&nbsp;
<hr>
<h3><a name="pdf-math.atan2"><code>math.atan2 (x, y)</code></a></h3>
<p>Returns the arc tangent of <code>x/y</code> (in radians), but uses the signs
of both parameters to find the quadrant of the result. (It also handles
correctly the case of <code>y</code> being zero.)
<p>&nbsp;
<hr>
<h3><a name="pdf-math.ceil"><code>math.ceil (x)</code></a></h3>
<p>Returns the smallest integer larger than or equal to <code>x</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-math.cos"><code>math.cos (x)</code></a></h3>
<p>Returns the cosine of <code>x</code> (assumed to be in radians).
<p>&nbsp;
<hr>
<h3><a name="pdf-math.cosh"><code>math.cosh (x)</code></a></h3>
<p>Returns the hyperbolic cosine of <code>x</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-math.deg"><code>math.deg (x)</code></a></h3>
<p>Returns the angle <code>x</code> (given in radians) in degrees.
<p>&nbsp;
<hr>
<h3><a name="pdf-math.exp"><code>math.exp (x)</code></a></h3>
<p>Returns the the value <em>e<sup>x</sup></em>.
<p>&nbsp;
<hr>
<h3><a name="pdf-math.floor"><code>math.floor (x)</code></a></h3>
<p>Returns the largest integer smaller than or equal to <code>x</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-math.fmod"><code>math.fmod (x, y)</code></a></h3>
<p>Returns the remainder of the division of <code>x</code> by <code>y</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-math.frexp"><code>math.frexp (x)</code></a></h3>
<p>Returns <code>m</code> and <code>e</code> such that <em>x = m2<sup>e</sup></em>,
<code>e</code> is an integer and the absolute value of <code>m</code> is in the
range <em>[0.5, 1)</em> (or zero when <code>x</code> is zero).
<p>&nbsp;
<hr>
<h3><a name="pdf-math.huge"><code>math.huge</code></a></h3>
<p>The value <code>HUGE_VAL</code>, a value larger than or equal to any other
numerical value.
<p>&nbsp;
<hr>
<h3><a name="pdf-math.ldexp"><code>math.ldexp (m, e)</code></a></h3>
<p>Returns <em>m2<sup>e</sup></em> (<code>e</code> should be an integer).
<p>&nbsp;
<hr>
<h3><a name="pdf-math.log"><code>math.log (x)</code></a></h3>
<p>Returns the natural logarithm of <code>x</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-math.log10"><code>math.log10 (x)</code></a></h3>
<p>Returns the base-10 logarithm of <code>x</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-math.max"><code>math.max (x, ···)</code></a></h3>
<p>Returns the maximum value among its arguments.
<p>&nbsp;
<hr>
<h3><a name="pdf-math.min"><code>math.min (x, ···)</code></a></h3>
<p>Returns the minimum value among its arguments.
<p>&nbsp;
<hr>
<h3><a name="pdf-math.modf"><code>math.modf (x)</code></a></h3>
<p>Returns two numbers, the integral part of <code>x</code> and the fractional
part of <code>x</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-math.pi"><code>math.pi</code></a></h3>
<p>The value PI.
<p>&nbsp;
<hr>
<h3><a name="pdf-math.pow"><code>math.pow (x, y)</code></a></h3>
<p>Returns <em>x<sup>y</sup></em>. (You can also use the expression <code>x^y</code>
to compute this value.)
<p>&nbsp;
<hr>
<h3><a name="pdf-math.rad"><code>math.rad (x)</code></a></h3>
<p>Returns the angle <code>x</code> (given in degrees) in radians.
<p>&nbsp;
<hr>
<h3><a name="pdf-math.random"><code>math.random ([m [, n]])</code></a></h3>
<p>This function is an interface to the simple pseudo-random generator function <code>rand</code>
provided by ANSI&nbsp;C. (No guarantees can be given for its statistical
properties.)
<p>When called without arguments, returns a pseudo-random real number in the
range <em>[0,1)</em>. When called with a number <code>m</code>, <code>math.random</code>
returns a pseudo-random integer in the range <em>[1, m]</em>. When called with
two numbers <code>m</code> and <code>n</code>, <code>math.random</code> returns
a pseudo-random integer in the range <em>[m, n]</em>.
<p>&nbsp;
<hr>
<h3><a name="pdf-math.randomseed"><code>math.randomseed (x)</code></a></h3>
<p>Sets <code>x</code> as the &quot;seed&quot; for the pseudo-random generator:
equal seeds produce equal sequences of numbers.
<p>&nbsp;
<hr>
<h3><a name="pdf-math.sin"><code>math.sin (x)</code></a></h3>
<p>Returns the sine of <code>x</code> (assumed to be in radians).
<p>&nbsp;
<hr>
<h3><a name="pdf-math.sinh"><code>math.sinh (x)</code></a></h3>
<p>Returns the hyperbolic sine of <code>x</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-math.sqrt"><code>math.sqrt (x)</code></a></h3>
<p>Returns the square root of <code>x</code>. (You can also use the expression <code>x^0.5</code>
to compute this value.)
<p>&nbsp;
<hr>
<h3><a name="pdf-math.tan"><code>math.tan (x)</code></a></h3>
<p>Returns the tangent of <code>x</code> (assumed to be in radians).
<p>&nbsp;
<hr>
<h3><a name="pdf-math.tanh"><code>math.tanh (x)</code></a></h3>
<p>Returns the hyperbolic tangent of <code>x</code>.
<h2>5.7 - <a name="5.7">Input and Output Facilities</a></h2>
<p>The I/O library provides two different styles for file manipulation. The
first one uses implicit file descriptors; that is, there are operations to set a
default input file and a default output file, and all input/output operations
are over these default files. The second style uses explicit file descriptors.
<p>When using implicit file descriptors, all operations are supplied by table <a name="pdf-io"><code>io</code></a>.
When using explicit file descriptors, the operation <a href="#pdf-io.open"><code>io.open</code></a>
returns a file descriptor and then all operations are supplied as methods of the
file descriptor.
<p>The table <code>io</code> also provides three predefined file descriptors
with their usual meanings from C: <a name="pdf-io.stdin"><code>io.stdin</code></a>,
<a name="pdf-io.stdout"><code>io.stdout</code></a>, and <a name="pdf-io.stderr"><code>io.stderr</code></a>.
<p>Unless otherwise stated, all I/O functions return <b>nil</b> on failure (plus
an error message as a second result) and some value different from <b>nil</b> on
success.
<p>&nbsp;
<hr>
<h3><a name="pdf-io.close"><code>io.close ([file])</code></a></h3>
<p>Equivalent to <code>file:close()</code>. Without a <code>file</code>, closes
the default output file.
<p>&nbsp;
<hr>
<h3><a name="pdf-io.flush"><code>io.flush ()</code></a></h3>
<p>Equivalent to <code>file:flush</code> over the default output file.
<p>&nbsp;
<hr>
<h3><a name="pdf-io.input"><code>io.input ([file])</code></a></h3>
<p>When called with a file name, it opens the named file (in text mode), and
sets its handle as the default input file. When called with a file handle, it
simply sets this file handle as the default input file. When called without
parameters, it returns the current default input file.
<p>In case of errors this function raises the error, instead of returning an
error code.
<p>&nbsp;
<hr>
<h3><a name="pdf-io.lines"><code>io.lines ([filename])</code></a></h3>
<p>Opens the given file name in read mode and returns an iterator function that,
each time it is called, returns a new line from the file. Therefore, the
construction
<pre>
     for line in io.lines(filename) do <em>body</em> end
</pre>
<p>will iterate over all lines of the file. When the iterator function detects
the end of file, it returns <b>nil</b> (to finish the loop) and automatically
closes the file.
<p>The call <code>io.lines()</code> (without a file name) is equivalent to <code>io.input():lines()</code>;
that is, it iterates over the lines of the default input file. In this case it
does not close the file when the loop ends.
<p>&nbsp;
<hr>
<h3><a name="pdf-io.open"><code>io.open (filename [, mode])</code></a></h3>
<p>This function opens a file, in the mode specified in the string <code>mode</code>.
It returns a new file handle, or, in case of errors, <b>nil</b> plus an error
message.
<p>The <code>mode</code> string can be any of the following:
<ul>
  <li><b>&quot;r&quot;:</b> read mode (the default);</li>
  <li><b>&quot;w&quot;:</b> write mode;</li>
  <li><b>&quot;a&quot;:</b> append mode;</li>
  <li><b>&quot;r+&quot;:</b> update mode, all previous data is preserved;</li>
  <li><b>&quot;w+&quot;:</b> update mode, all previous data is erased;</li>
  <li><b>&quot;a+&quot;:</b> append update mode, previous data is preserved,
    writing is only allowed at the end of file.</li>
</ul>
<p>The <code>mode</code> string may also have a '<code>b</code>' at the end,
which is needed in some systems to open the file in binary mode. This string is
exactly what is used in the standard&nbsp;C function <code>fopen</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-io.output"><code>io.output ([file])</code></a></h3>
<p>Similar to <a href="#pdf-io.input"><code>io.input</code></a>, but operates
over the default output file.
<p>&nbsp;
<hr>
<h3><a name="pdf-io.popen"><code>io.popen ([prog [, mode]])</code></a></h3>
<p>Starts program <code>prog</code> in a separated process and returns a file
handle that you can use to read data from this program (if <code>mode</code> is <code>&quot;r&quot;</code>,
the default) or to write data to this program (if <code>mode</code> is <code>&quot;w&quot;</code>).
<p>This function is system dependent and is not available on all platforms.
<p>&nbsp;
<hr>
<h3><a name="pdf-io.read"><code>io.read (···)</code></a></h3>
<p>Equivalent to <code>io.input():read</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-io.tmpfile"><code>io.tmpfile ()</code></a></h3>
<p>Returns a handle for a temporary file. This file is opened in update mode and
it is automatically removed when the program ends.
<p>&nbsp;
<hr>
<h3><a name="pdf-io.type"><code>io.type (obj)</code></a></h3>
<p>Checks whether <code>obj</code> is a valid file handle. Returns the string <code>&quot;file&quot;</code>
if <code>obj</code> is an open file handle, <code>&quot;closed file&quot;</code>
if <code>obj</code> is a closed file handle, or <b>nil</b> if <code>obj</code>
is not a file handle.
<p>&nbsp;
<hr>
<h3><a name="pdf-io.write"><code>io.write (···)</code></a></h3>
<p>Equivalent to <code>io.output():write</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-file:close"><code>file:close ()</code></a></h3>
<p>Closes <code>file</code>. Note that files are automatically closed when their
handles are garbage collected, but that takes an unpredictable amount of time to
happen.
<p>&nbsp;
<hr>
<h3><a name="pdf-file:flush"><code>file:flush ()</code></a></h3>
<p>Saves any written data to <code>file</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-file:lines"><code>file:lines ()</code></a></h3>
<p>Returns an iterator function that, each time it is called, returns a new line
from the file. Therefore, the construction
<pre>
     for line in file:lines() do <em>body</em> end
</pre>
<p>will iterate over all lines of the file. (Unlike <a href="#pdf-io.lines"><code>io.lines</code></a>,
this function does not close the file when the loop ends.)
<p>&nbsp;
<hr>
<h3><a name="pdf-file:read"><code>file:read (···)</code></a></h3>
<p>Reads the file <code>file</code>, according to the given formats, which
specify what to read. For each format, the function returns a string (or a
number) with the characters read, or <b>nil</b> if it cannot read data with the
specified format. When called without formats, it uses a default format that
reads the entire next line (see below).
<p>The available formats are
<ul>
  <li><b>&quot;*n&quot;:</b> reads a number; this is the only format that
    returns a number instead of a string.</li>
  <li><b>&quot;*a&quot;:</b> reads the whole file, starting at the current
    position. On end of file, it returns the empty string.</li>
  <li><b>&quot;*l&quot;:</b> reads the next line (skipping the end of line),
    returning <b>nil</b> on end of file. This is the default format.</li>
  <li><b><em>number</em>:</b> reads a string with up to this number of
    characters, returning <b>nil</b> on end of file. If number is zero, it reads
    nothing and returns an empty string, or <b>nil</b> on end of file.</li>
</ul>
<p>&nbsp;
<hr>
<h3><a name="pdf-file:seek"><code>file:seek ([whence] [, offset])</code></a></h3>
<p>Sets and gets the file position, measured from the beginning of the file, to
the position given by <code>offset</code> plus a base specified by the string <code>whence</code>,
as follows:
<ul>
  <li><b>&quot;set&quot;:</b> base is position 0 (beginning of the file);</li>
  <li><b>&quot;cur&quot;:</b> base is current position;</li>
  <li><b>&quot;end&quot;:</b> base is end of file;</li>
</ul>
<p>In case of success, function <code>seek</code> returns the final file
position, measured in bytes from the beginning of the file. If this function
fails, it returns <b>nil</b>, plus a string describing the error.
<p>The default value for <code>whence</code> is <code>&quot;cur&quot;</code>,
and for <code>offset</code> is 0. Therefore, the call <code>file:seek()</code>
returns the current file position, without changing it; the call <code>file:seek(&quot;set&quot;)</code>
sets the position to the beginning of the file (and returns 0); and the call <code>file:seek(&quot;end&quot;)</code>
sets the position to the end of the file, and returns its size.
<p>&nbsp;
<hr>
<h3><a name="pdf-file:setvbuf"><code>file:setvbuf (mode [, size])</code></a></h3>
<p>Sets the buffering mode for an output file. There are three available modes:
<ul>
  <li><b>&quot;no&quot;:</b> no buffering; the result of any output operation
    appears immediately.</li>
  <li><b>&quot;full&quot;:</b> full buffering; output operation is performed
    only when the buffer is full (or when you explicitly <code>flush</code> the
    file (see <a href="#pdf-io.flush"><code>io.flush</code></a>)).</li>
  <li><b>&quot;line&quot;:</b> line buffering; output is buffered until a
    newline is output or there is any input from some special files (such as a
    terminal device).</li>
</ul>
<p>For the last two cases, <code>sizes</code> specifies the size of the buffer,
in bytes. The default is an appropriate size.
<p>&nbsp;
<hr>
<h3><a name="pdf-file:write"><code>file:write (···)</code></a></h3>
<p>Writes the value of each of its arguments to the <code>file</code>. The
arguments must be strings or numbers. To write other values, use <a href="#pdf-tostring"><code>tostring</code></a>
or <a href="#pdf-string.format"><code>string.format</code></a> before <code>write</code>.
<h2>5.8 - <a name="5.8">Operating System Facilities</a></h2>
<p>This library is implemented through table <a name="pdf-os"><code>os</code></a>.
<p>&nbsp;
<hr>
<h3><a name="pdf-os.clock"><code>os.clock ()</code></a></h3>
<p>Returns an approximation of the amount in seconds of CPU time used by the
program.
<p>&nbsp;
<hr>
<h3><a name="pdf-os.date"><code>os.date ([format [, time]])</code></a></h3>
<p>Returns a string or a table containing date and time, formatted according to
the given string <code>format</code>.
<p>If the <code>time</code> argument is present, this is the time to be
formatted (see the <a href="#pdf-os.time"><code>os.time</code></a> function for
a description of this value). Otherwise, <code>date</code> formats the current
time.
<p>If <code>format</code> starts with '<code>!</code>', then the date is
formatted in Coordinated Universal Time. After this optional character, if <code>format</code>
is <code>*t</code>, then <code>date</code> returns a table with the following
fields: <code>year</code> (four digits), <code>month</code> (1--12), <code>day</code>
(1--31), <code>hour</code> (0--23), <code>min</code> (0--59), <code>sec</code>
(0--61), <code>wday</code> (weekday, Sunday is&nbsp;1), <code>yday</code> (day
of the year), and <code>isdst</code> (daylight saving flag, a boolean).
<p>If <code>format</code> is not <code>*t</code>, then <code>date</code> returns
the date as a string, formatted according to the same rules as the C&nbsp;function
<code>strftime</code>.
<p>When called without arguments, <code>date</code> returns a reasonable date
and time representation that depends on the host system and on the current
locale (that is, <code>os.date()</code> is equivalent to <code>os.date(&quot;%c&quot;)</code>).
<p>&nbsp;
<hr>
<h3><a name="pdf-os.difftime"><code>os.difftime (t2, t1)</code></a></h3>
<p>Returns the number of seconds from time <code>t1</code> to time <code>t2</code>.
In POSIX, Windows, and some other systems, this value is exactly <code>t2</code><em>-</em><code>t1</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-os.execute"><code>os.execute ([command])</code></a></h3>
<p>This function is equivalent to the C&nbsp;function <code>system</code>. It
passes <code>command</code> to be executed by an operating system shell. It
returns a status code, which is system-dependent. If <code>command</code> is
absent, then it returns nonzero if a shell is available and zero otherwise.
<p>&nbsp;
<hr>
<h3><a name="pdf-os.exit"><code>os.exit ([code])</code></a></h3>
<p>Calls the C&nbsp;function <code>exit</code>, with an optional <code>code</code>,
to terminate the host program. The default value for <code>code</code> is the
success code.
<p>&nbsp;
<hr>
<h3><a name="pdf-os.getenv"><code>os.getenv (varname)</code></a></h3>
<p>Returns the value of the process environment variable <code>varname</code>,
or <b>nil</b> if the variable is not defined.
<p>&nbsp;
<hr>
<h3><a name="pdf-os.remove"><code>os.remove (filename)</code></a></h3>
<p>Deletes the file or directory with the given name. Directories must be empty
to be removed. If this function fails, it returns <b>nil</b>, plus a string
describing the error.
<p>&nbsp;
<hr>
<h3><a name="pdf-os.rename"><code>os.rename (oldname, newname)</code></a></h3>
<p>Renames file or directory named <code>oldname</code> to <code>newname</code>.
If this function fails, it returns <b>nil</b>, plus a string describing the
error.
<p>&nbsp;
<hr>
<h3><a name="pdf-os.setlocale"><code>os.setlocale (locale [, category])</code></a></h3>
<p>Sets the current locale of the program. <code>locale</code> is a string
specifying a locale; <code>category</code> is an optional string describing
which category to change: <code>&quot;all&quot;</code>, <code>&quot;collate&quot;</code>,
<code>&quot;ctype&quot;</code>, <code>&quot;monetary&quot;</code>, <code>&quot;numeric&quot;</code>,
or <code>&quot;time&quot;</code>; the default category is <code>&quot;all&quot;</code>.
The function returns the name of the new locale, or <b>nil</b> if the request
cannot be honored.
<p>When called with <b>nil</b> as the first argument, this function only returns
the name of the current locale for the given category.
<p>&nbsp;
<hr>
<h3><a name="pdf-os.time"><code>os.time ([table])</code></a></h3>
<p>Returns the current time when called without arguments, or a time
representing the date and time specified by the given table. This table must
have fields <code>year</code>, <code>month</code>, and <code>day</code>, and may
have fields <code>hour</code>, <code>min</code>, <code>sec</code>, and <code>isdst</code>
(for a description of these fields, see the <a href="#pdf-os.date"><code>os.date</code></a>
function).
<p>The returned value is a number, whose meaning depends on your system. In
POSIX, Windows, and some other systems, this number counts the number of seconds
since some given start time (the &quot;epoch&quot;). In other systems, the
meaning is not specified, and the number returned by <code>time</code> can be
used only as an argument to <code>date</code> and <code>difftime</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-os.tmpname"><code>os.tmpname ()</code></a></h3>
<p>Returns a string with a file name that can be used for a temporary file. The
file must be explicitly opened before its use and explicitly removed when no
longer needed.
<h2>5.9 - <a name="5.9">The Debug Library</a></h2>
<p>This library provides the functionality of the debug interface to Lua
programs. You should exert care when using this library. The functions provided
here should be used exclusively for debugging and similar tasks, such as
profiling. Please resist the temptation to use them as a usual programming tool:
they can be very slow. Moreover, several of its functions violate some
assumptions about Lua code (e.g., that variables local to a function cannot be
accessed from outside or that userdata metatables cannot be changed by Lua code)
and therefore can compromise otherwise secure code.
<p>All functions in this library are provided inside the <a name="pdf-debug"><code>debug</code></a>
table. All functions that operate over a thread have an optional first argument
which is the thread to operate over. The default is always the current thread.
<p>&nbsp;
<hr>
<h3><a name="pdf-debug.debug"><code>debug.debug ()</code></a></h3>
<p>Enters an interactive mode with the user, running each string that the user
enters. Using simple commands and other debug facilities, the user can inspect
global and local variables, change their values, evaluate expressions, and so
on. A line containing only the word <code>cont</code> finishes this function, so
that the caller continues its execution.
<p>Note that commands for <code>debug.debug</code> are not lexically nested
within any function, and so have no direct access to local variables.
<p>&nbsp;
<hr>
<h3><a name="pdf-debug.getfenv"><code>debug.getfenv (o)</code></a></h3>
Returns the environment of object <code>o</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-debug.gethook"><code>debug.gethook ([thread])</code></a></h3>
<p>Returns the current hook settings of the thread, as three values: the current
hook function, the current hook mask, and the current hook count (as set by the <a href="#pdf-debug.sethook"><code>debug.sethook</code></a>
function).
<p>&nbsp;
<hr>
<h3><a name="pdf-debug.getinfo"><code>debug.getinfo ([thread,] function [,
what])</code></a></h3>
<p>Returns a table with information about a function. You can give the function
directly, or you can give a number as the value of <code>function</code>, which
means the function running at level <code>function</code> of the call stack of
the given thread: level&nbsp;0 is the current function (<code>getinfo</code>
itself); level&nbsp;1 is the function that called <code>getinfo</code>; and so
on. If <code>function</code> is a number larger than the number of active
functions, then <code>getinfo</code> returns <b>nil</b>.
<p>The returned table may contain all the fields returned by <a href="#lua_getinfo"><code>lua_getinfo</code></a>,
with the string <code>what</code> describing which fields to fill in. The
default for <code>what</code> is to get all information available, except the
table of valid lines. If present, the option '<code>f</code>' adds a field named
<code>func</code> with the function itself. If present, the option '<code>L</code>'
adds a field named <code>activelines</code> with the table of valid lines.
<p>For instance, the expression <code>debug.getinfo(1,&quot;n&quot;).name</code>
returns a name of the current function, if a reasonable name can be found, and <code>debug.getinfo(print)</code>
returns a table with all available information about the <a href="#pdf-print"><code>print</code></a>
function.
<p>&nbsp;
<hr>
<h3><a name="pdf-debug.getlocal"><code>debug.getlocal ([thread,] level, local)</code></a></h3>
<p>This function returns the name and the value of the local variable with index
<code>local</code> of the function at level <code>level</code> of the stack.
(The first parameter or local variable has index&nbsp;1, and so on, until the
last active local variable.) The function returns <b>nil</b> if there is no
local variable with the given index, and raises an error when called with a <code>level</code>
out of range. (You can call <a href="#pdf-debug.getinfo"><code>debug.getinfo</code></a>
to check whether the level is valid.)
<p>Variable names starting with '<code>(</code>' (open parentheses) represent
internal variables (loop control variables, temporaries, and C&nbsp;function
locals).
<p>&nbsp;
<hr>
<h3><a name="pdf-debug.getmetatable"><code>debug.getmetatable (object)</code></a></h3>
<p>Returns the metatable of the given <code>object</code> or <b>nil</b> if it
does not have a metatable.
<p>&nbsp;
<hr>
<h3><a name="pdf-debug.getregistry"><code>debug.getregistry ()</code></a></h3>
<p>Returns the registry table (see <a href="#3.5">§3.5</a>).
<p>&nbsp;
<hr>
<h3><a name="pdf-debug.getupvalue"><code>debug.getupvalue (func, up)</code></a></h3>
<p>This function returns the name and the value of the upvalue with index <code>up</code>
of the function <code>func</code>. The function returns <b>nil</b> if there is
no upvalue with the given index.
<p>&nbsp;
<hr>
<h3><a name="pdf-debug.setfenv"><code>debug.setfenv (object, table)</code></a></h3>
<p>Sets the environment of the given <code>object</code> to the given <code>table</code>.
Returns <code>object</code>.
<p>&nbsp;
<hr>
<h3><a name="pdf-debug.sethook"><code>debug.sethook ([thread,] hook, mask [,
count])</code></a></h3>
<p>Sets the given function as a hook. The string <code>mask</code> and the
number <code>count</code> describe when the hook will be called. The string mask
may have the following characters, with the given meaning:
<ul>
  <li><b><code>&quot;c&quot;</code>:</b> The hook is called every time Lua calls
    a function;</li>
  <li><b><code>&quot;r&quot;</code>:</b> The hook is called every time Lua
    returns from a function;</li>
  <li><b><code>&quot;l&quot;</code>:</b> The hook is called every time Lua
    enters a new line of code.</li>
</ul>
<p>With a <code>count</code> different from zero, the hook is called after every
<code>count</code> instructions.
<p>When called without arguments, <a href="#pdf-debug.sethook"><code>debug.sethook</code></a>
turns off the hook.
<p>When the hook is called, its first parameter is a string describing the event
that has triggered its call: <code>&quot;call&quot;</code>, <code>&quot;return&quot;</code>
(or <code>&quot;tail return&quot;</code>), <code>&quot;line&quot;</code>, and <code>&quot;count&quot;</code>.
For line events, the hook also gets the new line number as its second parameter.
Inside a hook, you can call <code>getinfo</code> with level&nbsp;2 to get more
information about the running function (level&nbsp;0 is the <code>getinfo</code>
function, and level&nbsp;1 is the hook function), unless the event is <code>&quot;tail
return&quot;</code>. In this case, Lua is only simulating the return, and a call
to <code>getinfo</code> will return invalid data.
<p>&nbsp;
<hr>
<h3><a name="pdf-debug.setlocal"><code>debug.setlocal ([thread,] level, local,
value)</code></a></h3>
<p>This function assigns the value <code>value</code> to the local variable with
index <code>local</code> of the function at level <code>level</code> of the
stack. The function returns <b>nil</b> if there is no local variable with the
given index, and raises an error when called with a <code>level</code> out of
range. (You can call <code>getinfo</code> to check whether the level is valid.)
Otherwise, it returns the name of the local variable.
<p>&nbsp;
<hr>
<h3><a name="pdf-debug.setmetatable"><code>debug.setmetatable (object, table)</code></a></h3>
<p>Sets the metatable for the given <code>object</code> to the given <code>table</code>
(which can be <b>nil</b>).
<p>&nbsp;
<hr>
<h3><a name="pdf-debug.setupvalue"><code>debug.setupvalue (func, up, value)</code></a></h3>
<p>This function assigns the value <code>value</code> to the upvalue with index <code>up</code>
of the function <code>func</code>. The function returns <b>nil</b> if there is
no upvalue with the given index. Otherwise, it returns the name of the upvalue.
<p>&nbsp;
<hr>
<h3><a name="pdf-debug.traceback"><code>debug.traceback ([thread,] [message])</code></a></h3>
<p>Returns a string with a traceback of the call stack. An optional <code>message</code>
string is appended at the beginning of the traceback. This function is typically
used with <a href="#pdf-xpcall"><code>xpcall</code></a> to produce better error
messages.
<p><a href="#index">Index</a>
<hr>
<center>
<p align="center"><a name="the_APOCALYX_API">
<h2>Part III - The APOCALYX API</h2>
</a></center>
<hr>
This section describes the classes that access all the exposed features of the <i>APOCALYX
3D Engine</i>. The hierarchy of section and subsections is chosen according to
the inheritance relationships among classes, but also classes with similar
functionalities are grouped together.
<p><a href="#index">Index</a>
<hr>
<p><a name="void">
<h3>3.0 Void</h3>
</a>The <b><class>Void</class></b> class is used to retrieve the C pointer of
all its derived classes.
<ul>
  <li><i><com>userdata</i> <i>Void</i>:<b>getPointer()</com></b>
    <p><descr>returns the C pointer of this object, useful to be passed to a C
    function. The C pointer points to a <i>Void</i> instance (class defined in
    the sources of the engine), so in C++ code it is necessary to apply the
    dynamic_cast&lt;XXX*&gt; to get the correct instance of a derived class. In
    the latter case, if the cast is wrong, a NULL pointer is returned.</descr>
    </p>
  <li><i><com>instance</i> <b>createInstance(</b><i>number</i> <b>tag</b>, <i>userdata</i>
    <b>userdata)</com></b>
    <p><descr>creates an instance of the given <i>userdata</i> and is useful to
    create LUA objects from C pointers. The class of the instance depends on the
    specified tag. To get the tag of a particular class use <i>getTag()</i>.
    Since the latter function operates a search on strings, to improve
    performances retrieve the required tag only once in the initialization
    phase, then use it multiple times. This function returns <i>nil</i> on
    error.</descr>
    </p>
  <li><i><com>number</i> <b>getTag(</b><i>string</i> <b>className)</com></b>
    <p><descr>returns the tag of the specified class. Since this function
    operates a search on strings, to improve performances get the required tag
    only once in the initialization phase, then use it multiple times. This
    function return a negative value on error.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="window">
<h3>3.1 Win</h3>
</a>The <b><class>Win</class></b> class owns an unique implicit object that
manages the behaviour of the application window. Since there is a single <b>Win</b>
object, its methods are called without specifying any object. They are:
<ul>
  <li><b><com>noTypeCheck()</com></b>
    <p><descr>unsets the arguments of functions type checking. This means that
    the arguments passed to the LUA functions are not checked any more for
    number and type. Be careful: Use this function to improve performances a bit
    only when you absolutely trust your code.</descr>
    </p>
  <li><b><com>setTitle(</b><i>string</i><b> title)</com></b>
    <p><descr>sets the title of the window.</descr>
    </p>
  <li><b><com>setHelp(</b><i>table</i><b> help)</com></b>
    <p><descr>sets the table containing the lines of text to be displayed as
    help for the user.</descr>
    </p>
  <li><b></b>&nbsp;<b><com>hideHelp()</com></b>
    <p><descr>hides the help text.</descr>
    </p>
  <li><b></b>&nbsp;<b><com>showHelpReduced()</com></b>
    <p><descr>shows a single line specifying that the 'F1' key shows the help
    text.</descr>
    </p>
  <li><b><com>showHelpUser()</com></b>
    <p><descr>shows the user's help text.</descr>
    </p>
  <li><b><com>showHelpFull()</com></b>
    <p><descr>shows both the user's help and the system help.</descr>
    </p>
  <li><b><com>hideWatermark()</com></b>
    <p><descr>hides the watermark.</descr>
    </p>
  <li><b><com>showWatermark()</com></b>
    <p><descr>shows the watermark.</descr>
    </p>
  <li><b><com>hideFramerate()</com></b>
    <p><descr>hides the current frame rate.</descr>
    </p>
  <li><b><com>showFramerate()</com></b>
    <p><descr>shows the current frame rate.</descr>
    </p>
  <li><b><com>hideConsole()</com></b>
    <p><descr>hides the console.</descr>
    </p>
  <li><b><com>showConsole(</b><i>boolean</i> <b>getInput</b> = true<b>)</com></b>
    <p><descr>shows the console (useful to display error texts when something
    goes wrong). If <i>getInput</i> is true, the console intercepts the keyboard
    input, otherwise the pressed keys are passed to the script in execution.</descr>
    </p>
  <li><com><b>typewrite(</b><i>string</i> <b>text</b><b>)</b></com>
    <p><descr>prints the string on the console without adding a new line
    character at the end.</descr>
    </p>
  <li><b><com>showSplashImage(</b><i>Image</i> <b>splashImage,</b> <i>number</i>
    <b>waitForSeconds</b> = 0<b>)</com></b>
    <p><descr>shows the <i>splashImage</i> image and sleeps for <i>waitForSeconds</i>
    (0 seconds by default). This function use the ortho projection mode, so
    after you must use <i>setPerspective()</i> to set up pespective projection
    mode.</descr>
    </p>
  <li><b><com>showLoadingScreen(</b><i>number</i> <b>waitForSeconds</b> = 0<b>)</com></b>
    <p><descr>shows the loading screen and sleeps for <i>waitForSeconds</i> (0
    seconds by default). This function use the ortho projection mode, so after
    you must use <i>setPerspective()</i> to set up pespective projection mode.</descr>
    <p>&nbsp;
  <li><i><com>Image</i> <b>getScreenshot(</b><i>number</i> <b>x</b>, <i>number</i>
    <b>y</b>, <i>number</i> <b>w</b>, <i>number</i> <b>h)</com></b>
    <p><descr>creates an image taking a screenshot from the specified portion of
    the screen.</descr>
    </p>
  <li><b><com>setScene(</b><i>Scene</i> <b>scene</b> = nil<b>)</b></com>
    <p><descr>sets the active <b>Scene</b> object, that specifies a set of callback functions. Pass <i>nil</i>
    to reset the scene.</descr>
    </p>
  <li><b><com>setBackstage(</b><i>Scene</i> <b>scene</b> = nil<b>)</b></com>
    <p><descr>sets the active back-<b>Scene</b> object. It specifies a set of callback functions that are called before the corresponding functions defined by <I>setScene()</I>. Pass <i>nil</i> to reset the scene.</descr>
    </p>
  <li><b><com>releaseKey(</b><i>number</i> <b>keyCode)</com></b>
    <p><descr>changes the status of a key as if it is released by the user. The <i>keyCode</i>
    is the code of the key defined by Windows. For &quot;normal&quot; keys, for
    example the 'A' key, use the function <b>string.byte(&quot;A&quot;)</b>.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <b>isKeyPressed(</b><i>number</i> <b>keyCode)</com></b>
    <p><descr>checks the status of a key. The <i>keyCode</i> is the code of the
    key defined by Windows. For &quot;normal&quot; keys, for example the 'A'
    key, use the function <b>string.byte(&quot;A&quot;)</b>. The value returned
    is different from <b>nil</b> only if the key is pressed by the user and not
    released by <i>releaseKey()</i>.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <b>isAsyncKeyPressed(</b><i>number</i> <b>keyCode)</com></b>
    <p><descr>checks the status of a key. This version uses a Windows native function.</descr>
    <p>&nbsp;
  <li>&nbsp;<i><com>boolean</i> <b>isCTRLPressed()</com></b>
    <p><descr>checks the status of the CTRL key. The value returned is different
    from <b>nil</b> only if the key is pressed by the user.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <b>isSHIFTPressed()</com></b>
    <p><descr>checks the status of the SHIFT key. The value returned is
    different from <b>nil</b> only if the key is pressed by the user.</descr>
    <p>&nbsp;
  <li><i><com>number</i> w, <i>number</i> h = <b>getDimension()</com></b>
    <p><descr>returns the size (width and height) of the window.</descr>
    </p>
  <li><i><com>number</i> x, <i>number</i> y = <b>getLocation()</com></b>
    <p><descr>returns the position (x and y of the top-left corner) of the window.</descr>
    </p>
  <li><com><b>setDimension(</b><I>number</I> <B>w</B>, <I>number</I> <B>h</B><b>)</com></b>
    <p><descr>sets the size (width and height) of the window.</descr>
    </p>
  <li><com><b>setLocation(</b><I>number</I> <B>x</B>, <I>number</I> <B>y</B><b>)</com></b>
    <p><descr>sets the position (x and y of the top-left corner) of the window.</descr>
    </p>
  <li><com><i>number</i> hits = <b>pickNames(</b><i>number</i>
    <b>x</b>, <i>number</i> <b>y</b>, <i>table</i> <b>names</b><b>)</b></com>
    <p><descr>fills the table <i>names</i> with the names of the objects rendered at the given pixel and returns the number of picked objects.</descr>
    <p>&nbsp;
  <li><i><com>number</i> dx, <i>number</i> dy = <b>getMouseMove()</com></b>
    <p><descr>gets the relative displacement of the mouse pointer. It returns
    two values for x and y displacement coordinates.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y = <b>getMousePos()</com></b>
    <p><descr>gets the absolute position of the mouse pointer. It returns two
    values for x and y position coordinates.</descr>
    <p>&nbsp;
  <li><b><com>setMousePos(</b><i>number</i> <b>x</b>, <i>number</i> <b>y)</com></b>
    <p><descr>sets the absolute position of the mouse pointer.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <b>getMouseWheel()</com></b>
    <p><descr>gets the relative motion of the mouse wheel. It is positive if the
    wheel rotates forward, negative otherwise.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <b>isMouseLeftPressed()</com></b>
    <p><descr>checks the status of the left button of the mouse. The value
    returned is different from <b>nil</b> only if the button is pressed by the
    user.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <b>isMouseMiddlePressed()</com></b>
    <p><descr>checks the status of the middle button of the mouse. The value
    returned is different from <b>nil</b> only if the button is pressed by the
    user.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <b>isMouseRightPressed()</com></b>
    <p><descr>checks the status of the right button of the mouse. The value
    returned is different from <b>nil</b> only if the button is pressed by the
    user.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <b>isPointerVisible()</com></b>
    <p><descr>returns true if the mouse pointer is shown.</descr>
    <p>&nbsp;
  <li><b><com>setPointerVisible(</b><i>boolean</i> <b>visible</b> = true<b>)</b></com>
    <p><descr>sets the visibility of the mouse pointer.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <b>isMouseAcquired()</com></b>
    <p>&nbsp;<descr>returns true if the mouse is acquired by the application.</descr></p>
  <li><b><com>acquireMouse(</b><i>boolean</i> <b>acquire)</com></b>
    <p><descr>the application acquires the control of the mouse if the argument
    is true, otherwise releases it.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <b>hasFocus()</com></b>
    <p><descr>returns if the application window has the focus or not.</descr>
    <p>&nbsp;
  <li><b><com>gainFocus()</com></b>
    <p><descr>the window of the application gain the focus.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <b>isActive()</com></b>
    <p><descr>returns true if the rendering loop is active. When the window has the focus, the returned value should be always true.</descr>
    <p>&nbsp;
  <li><com><b>setActive(</b><I>boolean</I> <B>active</B> = true<b>)</com></b>
    <p><descr>changes the active status of the application. Don't use it or the application will freeze: This function must be called only from external applications.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <b>isRunning()</com></b>
    <p><descr>returns true if no request to quit was made. When no such request is made, the returned value should be always true.</descr>
    <p>&nbsp;
  <li><com><b>setRunning(</b><I>boolean</I> <B>running</B> = true<b>)</com></b>
    <p><descr>changes the running status of the application. When the value is set to <I>false</I>, the application will exit before the next frame is rendered.</descr>
    <p>&nbsp;
  <li><com><b>setTopmost(</b><I>boolean</I> <B>topmost</B> = true<b>)</com></b>
    <p><descr>puts the application window on top of all the other windows and keeps it there.</descr>
    <p>&nbsp;
<li><com><I>number</I> retCount, <I>...</I> = <b>sendMessage(</b><I>string</I> <B>appName</B>, <I>number</I> <B>type</B>, <I>string</I> <B>message</B>, <I>number</I> <B>bufferSize</B> = 1024<b>)</b></com>
    <p><descr>sends a message to a window of another application. <I>appName</I> is the name
of the registered class of the window (just as "APOCALYX" is the registered name of the window
of the engine), <I>type</I> is an integer value between 0 and 3 (included - other values are reserved for future use), <I>message</I> is the string sent to the other application, <I>bufferSize</I> is the size in bytes of the buffer where to store possible return values.
<br>If the message is sent to APOCALYX, the <I>type</I> argument has the following meanings:
<I>0</I> means that the message is a Lua string to be interpreted, no value is returned so <I>retCount</I> is zero and <I>bufferSize</I> is ignored; <I>1</I> means that the message is a Lua file name to be interpreted, no value is returned so <I>retCount</I> is zero and <I>bufferSize</I> is ignored; <I>2</I> means that the message is a list of global variables, separated by TAB characters ('\t' or '\008'), the values of which in string form are returned, so <I>retCount</I> is equal to the number of variables; <I>3</I> means that the message is a Lua string to be interpreted and the number of returned values is specified by <I>retCount</I>. In any case, if <I>retCount</I> is <I>nil</I>, some error in the communication has occurred.
<br>Those above are the meanings given by the engine, but in other applications the meaning of the message may be different. The only constant is that, when the type is <I>0</I> or <I>1</I>, there are no returned values, while <I>2</I> and <I>3</I> may return values. Remember that <I>bufferSize</I> must be large enough to store all the returned values in string form, so estimate enough room to store the largest returned values.</descr>
    <p>&nbsp;
<li><com><I>string</I> <b>getSharedMemory(</b><b>)</b></com>
    <p><descr>return the contents of the shared memory. The shared memory is a piece of memory created by an external application (with "APOCALYX" as the name of file-mapping object). The contents of the shared memory must be NULL ('\0' character) terminated.</descr>
    <p>&nbsp;
<li><com><b>setSharedMemory(</b><I>string</I> <B>data</B><b>)</b></com>
    <p><descr>sets the contents of the shared memory. The shared memory is a piece of memory created by an external application (with "APOCALYX" as the name of file-mapping object). The external application must reserve enough space to hold the longest string passed by this function.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <b>getTimeStep()</com></b>
    <p><descr>returns the time in seconds elapsed since the last frame was rendered.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <b>getElapsedTime()</com></b>
    <p><descr>returns the time in seconds elapsed since the start of the program.</descr>
    <p>&nbsp;
  <li><com><b>setElapsedTime(</b><I>number</I> <B>time</B><b>)</b></com>
    <p><descr>sets the time in seconds elapsed since the start of the program.</descr>
    <p>&nbsp;
  <li><i><com>bool</i> <b>isPaused()</com></b>
    <p><descr>returns <i>true</i> when the application is paused, <i>false</i>
    otherwise.</descr>
    </p>
  <li><com><b>processLoop()</b></com>
    <p><descr>executes the message processing of the underlaying operative system.
    It may be used in special situations, but normally you can forget it, in fact the
    message loop is executed automatically when the <i>update()</i> method of
    a <i>Scene</i> ends.</descr>
    </p>
  <li><b><com>makeCurrent()</com></b>
    <p><descr>makes the main window the current context for OpenGL rendering.
    It is necessary only if other windows acquire the OpenGL context.</descr>
    </p>
  <li><b><com>render()</com></b>
    <p><descr>forces the rendering of the world. It may be used in special
    situations, but normally you can forget it, in fact the rendering phase is executed
    automatically when the <i>update()</i> method of a <i>Scene</i> ends.</descr>
    </p>
  <li><b><com>exit()</com></b>
    <p><descr>exits the application.</descr>
    <p>&nbsp;
  <li><com><i>string</i> version, <i>string</i> renderer, <i>string</i> vendor, <i>string</i>
    extensions, <i>string</i> wglExtensions = <b>getOpenGLStrings()</com></b>
    <p><descr>returns several strings related to the OpenGL version and the
    available extensions.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <b>getTextureUnitsCount()</com></b>
    <p><descr>returns the number of texture units available for multitexturing.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <b>isStencilAvailable()</com></b>
    <p><descr>returns true is the stencil buffer is available (it's needed to
    render shadow volumes).</descr>
    <p>&nbsp;
  <li><i><com>number</i> <b>getVertexAttribsCount()</com></b>
    <p><descr>returns the number of attrubutes for each vertex.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <b>getTextureCoordsCount()</com></b>
    <p><descr>returns the number of texture coordinates available for
    multitexturing.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <b>getTextureImageUnitsCount()</com></b>
    <p><descr>returns the number of texture image units available.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <b>getProgramMatricesCount()</com></b>
    <p><descr>returns the number of program matrices.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <b>isVertexProgramSupported()</com></b>
    <p><descr>returns true is the OpenGL extension <i>GL_vertex_program_ARB</i>
    is available to the application.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <b>getVP<i>XXX</i>Count()</com></b>
    <p><descr>returns the number of the property relative to <i>vertex programs</i>
    and <i>vertex shaders</i>. Can be used to test the 3D accelerator
    capabilities in the vertex programmable pipeline. The properties that can
    replace the '<i>XXX</i>' are <i>Instructions, NativeInstructions,
    Temporaries, NativeTemporaries, Parameters, NativeParameters, Attribs,
    NativeAttribs, AddressRegisters, NativeAddressRegisters, LocalParameters</i>
    and <i>EnvParameters</i>.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <b>isFragmentProgramSupported()</com></b>
    <p><descr>returns true is the OpenGL extension <i>GL_fragment_program_ARB</i>
    is available to the application.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <b>getFP<i>XXX</i>Count()</com></b>
    <p><descr>returns the number of the property relative to <i>fragment
    programs</i> and <i>fragment shaders</i>. Can be used to test the 3D
    accelerator capabilities in the fragment programmable pipeline. The
    properties that can replace the '<i>XXX</i>' are <i>Instructions,
    NativeInstructions, Temporaries, NativeTemporaries, Parameters,
    NativeParameters, Attribs, NativeAttribs, AddressRegisters,
    NativeAddressRegisters, LocalParameters, EnvParameters, AluInstructions,
    NativeAluInstructions, TexInstructions, NativeTexInstructions,
    TexIndirections</i> and <i>NativeTexIndirections</i>.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <b>areShaderObjectsSupported()</com></b>
    <p><descr>returns true is the OpenGL extension <i>GL_shader_objects_ARB</i>
    is available to the application.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <b>isVertexShaderSupported()</com></b>
    <p><descr>returns true is the OpenGL extension <i>GL_vertex_shader_ARB</i>
    is available to the application.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <b>getVSUniformComponentsCount()</com></b>
    <p><descr>returns the number of uniform components available to vertex
    shaders.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <b>getVSVaryingFloatCount()</com></b>
    <p><descr>returns the number of varying floats available to vertex shaders.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <b>isFragmentShaderSupported()</com></b>
    <p><descr>returns true is the OpenGL extension <i>GL_fragment_shader_ARB</i>
    is available to the application.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <b>getFSUniformComponentsCount()</com></b>
    <p><descr>returns the number of uniform components available to fragment
    shaders.</descr>
    </p>
  <li><b><com>useFixedPipeline()</com></b>
    <p><descr>restores the fixed pipeline as the main pipeline of the rendering
    instead of programmable shaders' pipeline. It is useful to restore the
    normal status after a <i>ShaderProgram</i> was applied to set its uniforms.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="scene">
<h4>3.1.1 Scene</h4>
</a>The <b><class>Scene</class></b> class defines the methods to initialize,
update and finalize a scene. It can set also a few other callback functions.
<ul>
  <li><com><i>Scene</i> <b>Scene(</b><i>function</i> <b>initialize,</b> <i>function</i>
    <b>update,</b> <i>function</i> <b>finalize</b>, <i>function</i> <b>keyDown</b> = nil, <i>function</i> <b>keyUp</b> = nil, <i>function</i> <b>onResize</b> = nil<b>)</b></com>
    <p><descr>creates a new scene with the specified methods for initialization,
    update, finalization and optionally to intercept pressed keys.
<br><i>initialize()</i> is called only once at the creation of a scene when it
needs to be filled with objects; <i>update()</i> is called once for every frame to
modify the properties of the objects in the scene; <i>finalize()</i> is called
only once when the scene needs to be destroyed and its resources released.
<br>The optional <i>keyDown()</i> is used to intercept pressed keys: It's the best place to check for pressed keys, because this method is called only when a key is actually pressed. In its declaration, <i>keyDown(number key)</i> accepts a number argument that represents the ASCII code of the pressed key (for example, when A is pressed the argument has the same value as <i>string.byte("A")</i>).
<br>The optional <i>keyUp()</i> is used to intercept released keys and accepts a number argument that represents the ASCII code of the released key.
<br>The optional <i>onResize()</i> is used to intercept the resizing of the window.
</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="world">
<h4>3.1.2 World</h4>
</a>The <b><class>World</class></b> class has an unique implicit object that
contains all the objects to be rendered. Since there is a single <b>World</b>
object, its methods are called without specifying any object. They are:
<ul>
  <li><b><com>setPerspective(</b><i>number</i> <b>fieldOfView,</b> <i>number</i>
    <b>minClip,</b> <i>number</i> <b>maxClip)</com></b>
    <p><descr>sets the perspective properties: angle of view (in degrees),
    minimum and maximum clipping plane distances.</descr>
    </p>
  <li><b><com>setViewport(</b><i>number</i> <b>x,</b> <i>number</i> <b>y,</b> <i>number</i>
    <b>w,</b> <i>number</i> <b>h)</com></b>
    <p><descr>sets the location and dimensions of the main viewport (necessary
    only if the world viewport is smaller than the full window).</descr>
    </p>
  <li><b><com>setAmbient(</b><i>number</i> <b>red,</b> <i>number</i> <b>green,</b>
    <i>number</i> <b>blue)</com></b>
    <p><descr>sets the overall world ambient color (color components range from
    0 to 1).</descr>
    </p>
  <li><b><com>setClear(</b><i>number</i> <b>red,</b> <i>number</i> <b>green,</b>
    <i>number</i> <b>blue)</com></b>
    <p><descr>sets the clear color of the screen (color components range from 0
    to 1).</descr>
    <p>&nbsp;
  <li><i><com>Camera</i> <b>getCamera()</com></b>
    <p><descr>returns the current camera.</descr>
    </p>
  <li><b><com>setBackground(</b><i>Background</i> <b>background</b>, <i>boolean</i>
    <b>deleteOld</b> = true<b>)</com></b>
    <p><descr>sets the current background of the world. If the argument <i>deleteOld</i>
    is present and equal to <i>false</i> the old background is preserved in memory
    and the programmer must delete it when necessary, otherwise it is removed.</descr>
    </p>
  <li><b><com>addBackground(</b><i>Background</i> <b>background)</com></b>
    <p><descr>adds a background to the world and blends it with other
    backgrounds.</descr>
    </p>
  <li><b><com>removeBackground(</b><i>Background</i> <b>background)</com></b>
    <p><descr>removes the background from the world.</descr>
    </p>
  <li><b><com>setCloudLayer(</b><i>CloudLayer</i> <b>clouds,</b> <i>boolean</i> <b>deleteOld</b>
    = true<b>)</com></b>
    <p><descr>sets the current cloud layer of the world. If the argument <i>deleteOld</i>
    is present and equal to <i>nil</i> the old background is preserved in memory
    and the programmer must delete it when necessary, otherwise it is removed.</descr>
    </p>
  <li><b><com>addCloudLayer(</b><i>CloudLayer</i> <b>clouds)</com></b>
    <p><descr>adds a cloud layer to the world.</descr>
    </p>
  <li><b><com>removeCloudLayer(</b><i>CloudLayer</i> <b>clouds)</com></b>
    <p><descr>removes the cloud layer from the world.</descr>
    </p>
  <li><b><com>setMoon(</b><i>Moon</i> <b>moon</b> = nil<b>)</com></b>
    <p><descr>sets the current world moon.</descr>
    </p>
  <li><b><com>setSun(</b><i>Sun</i> <b>sun</b> = nil<b>)</com></b>
    <p><descr>sets the current world sun.</descr>
    </p>
  <li><b><com>setTerrain(</b><i>Terrain</i> <b>terrain</b> = nil<b>)</com></b>
    <p><descr>sets the current world terrain.</descr>
    </p>
  <li><b><com>setScenery(</b><i>Scenery</i> <b>scenery</b> = nil<b>)</com></b>
    <p><descr>sets the current world scenery.</descr>
    </p>
  <li><b><com>addObject(</b><i>Object</i> <b>object)</com></b>
    <p><descr>adds a new object to the world.</descr>
    </p>
  <li><b><com>removeObject(</b><i>Object</i> <b>object)</com></b>
    <p><descr>removes an object from the world.</descr>
    </p>
  <li><b><com>deleteObjects()</com></b>
    <p><descr>removes all the objects from the world.</descr>
    </p>
  <li><b><com>addShadow(</b><i>Shadow</i> <b>shadow)</com></b>
    <p><descr>adds a new shadow to the world.</descr>
    </p>
  <li><b><com>removeShadow(</b><i>Shadow</i> <b>shadow)</com></b>
    <p><descr>removes a shadow from the world.</descr>
    </p>
  <li><b><com>deleteShadows()</com></b>
    <p><descr>removes all the shadows from the world.</descr>
    </p>
  <li><b><com>addLight(</b><i>Light</i> <b>light)</com></b>
    <p><descr>adds a new light to the world.</descr>
    </p>
  <li><b><com>removeLight(</b><i>Light</i> <b>light)</com></b>
    <p><descr>removes a light from the world.</descr>
    </p>
  <li><b><com>deleteLights()</com></b>
    <p><descr>removes all the lights from the world.</descr>
    </p>
  <li><b><com>addSource(</b><i>Source</i> <b>source)</com></b>
    <p><descr>adds a new sound source to the world.</descr>
    </p>
  <li><b><com>removeSource(</b><i>Source</i> <b>source)</com></b>
    <p><descr>removes a sound source from the world.</descr>
    </p>
  <li><b><com>deleteSources()</com></b>
    <p><descr>removes all the sound sources from the world.</descr>
    </p>
  <li><b><com>setListener(</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>forwardX,</b> <i>number</i> <b>forwardY,</b>
    <i>number</i> <b>forwardZ,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>topX,</b> <i>number</i> <b>topY,</b> <i>number</i>
    <b>topZ,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>posX,</b> <i>number</i> <b>posY,</b> <i>number</i>
    <b>posZ,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>velX,</b> <i>number</i> <b>velY,</b> <i>number</i>
    <b>velZ</b><br>
    <b>)</com></b>
    <p><descr>sets the properties of the sound listener: forward vector, top
    vector, position vector and velocity vector (the latter expressed in meters
    per second).</descr>
    </p>
  <li><b><com>setListenerScale(</b><i>number</i> <b>distanceFactor)</com></b>
    <p><descr>sets the number of units that corresponds to 1 meter in the scene
    where the listener is embedded.</descr>
    </p>
  <li><b><com>empty()</com></b>
    <p><descr>removes the sun, the moon, the terrain and all the objects, sound
    sources, backgrounds and cloud layers from the world.</descr>
    </p>
  <li><b><com>enableFog(</b><i>number</i> <b>distance,</b> <i>number</i> <b>red,</b>
    <i>number</i> <b>green,</b> <i>number</i> <b>blue)</com></b>
    <p><descr>enables the fog effect with the given characteristic distance and
    color (color components range from 0 to 1). The fog density falls
    exponentially.</descr>
    </p>
  <li><b><com>enableLinearFog(</b><i>number</i> <b>distance,</b> <i>number</i> <b>maxDistance,</b>
    <i>number</i> <b>red,</b> <i>number</i> <b>green,</b> <i>number</i> <b>blue)</com></b>
    <p><descr>enables the fog effect with the given characteristic distance and
    color (color components range from 0 to 1). The fog density falls linearly
    from <i>distance</i> to <i>maxDistance</i>.</descr>
    </p>
  <li><b><com>disableFog()</com></b>
    <p><descr>disables the fog effect.</descr><br>
    <p>&nbsp;
  <li><i><com>boolean</i> collided, <i>number</i> collX, <i>number</i> collY, <i>number</i>
    collZ = <b>getSphereRayCollision(</b><br>
    &nbsp;&nbsp; number <b>centerX,</b> number <b>centerY,</b> number <b>centerZ,</b>
    number <b>radius,</b><br>
    &nbsp;&nbsp; number <b>originX,</b> number <b>originY,</b> number <b>originZ,</b><br>
    &nbsp;&nbsp; number <b>direcX,</b> number <b>direcY,</b> number <b>direcZ</b><br>
    <b>)</com><br>
    </b><br>
    <descr>returns the intersection of a ray, starting from <i>origin</i> with
    direction <i>direc</i>, with a sphere, with <i>center</i> and <i>radius</i>.
    If an intersection exists, <i>collided</i> is true and <i>coll</i> contains
    the coordinates of the point of intersection. If there is no intersection,
    only <i>collided</i> is returned (with a false value).</descr><br>
    <p>&nbsp;
  <li><i><com>boolean</i> collided, <i>number</i> collX, <i>number</i> collY, <i>number</i>
    collZ = <b>getSphereSphereCollision(</b><br>
    &nbsp;&nbsp; number <b>centerX,</b> number <b>centerY,</b> number <b>centerZ,</b>
    number <b>radius,</b><br>
    &nbsp;&nbsp; number <b>center2X,</b> number <b>center2Y,</b> number <b>center2Z,</b>
    number <b>radius2</b><br>
    <b>)</com><br>
    </b><br>
    <descr>returns the intersection of a sphere, with <i>center</i> and <i>radius</i>,
    with another sphere, with <i>center2</i> and <i>radius2</i>. If an
    intersection exists, <i>collided</i> is true and <i>coll</i> contains the
    coordinates of the point of intersection. If there is no intersection, only <i>collided</i>
    is returned (with a false value).</descr></li>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="tweakbar">
<h4>3.1.2.0 TweakBar</h4>
</a>The <b><class>TweakBar</class></b> class represents a dialog (bar) useful to
easily tweak parameters in the application. It is based on the Philippe
Decaudin's &quot;<i>AntTweakBar 1.02</i>&quot; library. For the arguments specified
as <i>definition</i> is some methods refer to the documentation of &quot;<i>AntTweakBar</i>&quot;.
<ul>
  <li><com><b>TweakBarInit()</b></com>
    <p><descr>opens and initializes the &quot;<i>AntTweakBar</i>&quot; library.</descr>
    </p>
  <li><com><b>TweakBarTerm()</b></com>
    <p><descr>deinitializes and closes the &quot;<i>AntTweakBar</i>&quot;
    library.</descr>
    </p>
  <li><com><i>TweakBar</i> <b>TweakBar(</b><i>string</i> <b>name</b><b>)</b></com>
    <p><descr>creates a bar with the given name.</descr>
    </p>
  <li><com><i>TweakBar</i>:<b>delete(</b><b>)</b></com>
    <p><descr>deletes the bar.</descr>
    </p>
  <li><com><b>TweakBarDefine(</b><i>string</i> <b>define</b><b>)</b></com>
    <p><descr>defines the properties of a bar. This is a static method that does
    not refer to a particular bar. The <i>define</i> string contains all the
    specifications, bar name and properties, necessary to correctly setup the
    definition.</descr>
    </p>
  <li><com><i>TweakBar</i>:<b>setTop(</b><b>)</b></com>
    <p><descr>puts this bar at the top (above other bars).</descr>
    </p>
  <li><com><i>string</i> <i>TweakBar</i>:<b>getName(</b><b>)</b></com>
    <p><descr>returns the name of the bar.</descr>
    </p>
  <li><com><i>number</i> <i>TweakBar</i>:<b>removeVar(</b><i>string</i> <b>varName</b><b>)</b></com>
    <p><descr>removes the variable with the given name from the bar. Returns a
    number that specifies the error status.</descr>
    </p>
  <li><com><i>number</i> <i>TweakBar</i>:<b>removeAllVars(</b><b>)</b></com>
    <p><descr>removes all the variables from the bar. Returns a number that
    specifies the error status.</descr>
    </p>
  <li><com><i>number</i> <i>TweakBar</i>:<b>addButton(</b><i>string</i> <b>name</b>,
    <i>function</i> <b>callback</b>, <i>string</i> <b>definition</b><b>)</b></com>
    <p><descr>adds a button to the bar with the given name, callback function
    and definition. The callback is a function that does not accept arguments
    and does not return arguments: It is called when the button is pressed. This
    method returns a number that specifies the error status.</descr>
    </p>
  <li><com><i>number</i> <i>TweakBar</i>:<b>addBooleanVar(</b><i>string</i> <b>name</b>,
    <i>function</i> <b>setCallback</b>, <i>function</i> <b>getCallback</b>, <i>string</i>
    <b>definition</b><b>)</b></com>
    <p><descr>adds a widget that manages the input of boolean variables with the
    given name, set/get callback functions and definition. The <i>get</i>
    callback is a function that does not accept arguments and returns the
    current variable value: It is called anytime when the bar wants to verify if
    the value that refers to this variable has changed in the application. The <i>set</i>
    callback is a function that accepts an argument and returns nothing: It is
    called when the user modifies the value in the bar so the value of the
    variable in the application is synchronized. The <i>definition</i> defines
    some parameters related to the variable. This method returns a number that
    specifies the error status.</descr>
    </p>
  <li><com><i>number</i> <i>TweakBar</i>:<b>addNumberVar(</b><i>string</i> <b>name</b>,
    <i>function</i> <b>setCallback</b>, <i>function</i> <b>getCallback</b>, <i>string</i>
    <b>definition</b><b>)</b></com>
    <p><descr>adds a widget that manages the input of numeric variables with the
    given name, set/get callback functions and definition. The <i>get</i>
    callback is a function that does not accept arguments and returns the
    current variable value: It is called anytime when the bar wants to verify if
    the value that refers to this variable has changed in the application. The <i>set</i>
    callback is a function that accepts an argument and returns nothing: It is
    called when the user modifies the value in the bar so the value of the
    variable in the application is synchronized. The <i>definition</i> defines
    some parameters related to the variable. This method returns a number that
    specifies the error status.</descr>
    </p>
  <li><com><i>number</i> <i>TweakBar</i>:<b>addColorVar(</b><i>string</i> <b>name</b>,
    <i>function</i> <b>setCallback</b>, <i>function</i> <b>getCallback</b>, <i>string</i>
    <b>definition</b><b>)</b></com>
    <p><descr>adds a widget that manages the input of color variables with the
    given name, set/get callback functions and definition. The <i>get</i>
    callback is a function that does not accept arguments and returns the
    current variable value: It is called anytime when the bar wants to verify if
    the value that refers to this variable has changed in the application. The <i>set</i>
    callback is a function that accepts an argument and returns nothing: It is
    called when the user modifies the value in the bar so the value of the
    variable in the application is synchronized. The <i>definition</i> defines
    some parameters related to the variable. This method returns a number that
    specifies the error status.</descr>
    </p>
  <li><com><i>number</i> <i>TweakBar</i>:<b>addEnumVar(</b><i>string</i> <b>name</b>,
    <i>table</i> <b>enums</b>, <i>function</i> <b>setCallback</b>, <i>function</i>
    <b>getCallback</b>, <i>string</i> <b>definition</b><b>)</b></com>
    <p><descr>adds a widget that manages the choice among a set of constants
    with the given name, enumeration definition, set/get callback functions and
    definition. The table of enumerations is a sequence of integer indexes and
    string names. The <i>get</i> callback is a function that does not accept
    arguments and returns the current variable value: It is called anytime when
    the bar wants to verify if the value that refers to this variable has
    changed in the application. The <i>set</i> callback is a function that
    accepts an argument and returns nothing: It is called when the user modifies
    the value in the bar so the value of the variable in the application is
    synchronized. The <i>definition</i> defines some parameters related to the
    variable. This method returns a number that specifies the error status.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="overlay">
<h4>3.1.2.1 Overlay</h4>
</a>The <b><class>Overlay</class></b> class has an unique implicit object that
contains all the 2D objects to be rendered on the screen over the 3D scene.
Since there is a single <b>Overlay</b> object, its methods are called without
specifying any object. They are:
<ul>
  <li><i><com>Font </i><b>getMainOverlayFont()</com></b>
    <p><descr>returns the font applied to the overlay layer.</descr>
    </p>
  <li><b><com>setMainOverlayFont(</b><i>Font</i> <b>font)</com></b>
    <p><descr>sets the font applied to the overlay layer.</descr>
    </p>
  <li><b><com>addToOverlay(</b><i>OverlayObject</i> <b>object)</com></b>
    <p><descr>adds a new object to the overlay layer.</descr>
    </p>
  <li><b><com>removeFromOverlay(</b><i>OverlayObject</i> <b>object)</com></b>
    <p><descr>removes an object from the overlay layer.</descr>
    </p>
  <li><b><com>emptyOverlay()</com></b>
    <p><descr>removes all the object form the overlay layer.</descr>
    </p>
  <li><b><com>setPointer(</b><i>OverlaySprite</i> <b>sprite)</com></b>
    <p><descr>sets the sprite used to render the pointer (an image, usually an
    arrow, used to interact with the GUI).</descr>
    </p>
  <li><b><com>showPointer()</com></b>
    <p><descr>shows the pointer.</descr>
    </p>
  <li><b><com>hidePointer()</com></b>
    <p><descr>hides the pointer.</descr>
    </p>
  <li><b><com>setPointerOffset(</b><i>number</i> <b>dx,</b> <i>number</i> <b>dy)</com></b>
    <p><descr>sets the offset of the pointer active point relative to the coordinates of the sprite center.</descr>
    </p>
  <li><b><com>setPointerLocation(</b><i>number</i> <b>x,</b> <i>number</i> <b>y)</com></b>
    <p><descr>sets the pointer location according to the coordinates <i>(x,y)</i>.</descr>
    </p>
  <li><i><com>number</i> x, <i>number</i> y = <b>getPointerLocation()</com></b>
    <p><descr>returns the coordinates of the current position of the pointer.</descr>
    </p>
  <li><b><com>movePointer(</b><i>number</i> <b>dx,</b> <i>number</i> <b>dy,</b> <i>number</i> <b>maxX</b>, <i>number</i> <b>maxY</b>, <i>number</i> <b>minX</b> = 0, <i>number</i> <b>minY</b> = 0<b>)</com></b>
    <p><descr>moves the pointer relative to the current position of displacement
    <i>(dx,dy)</i>, providing that the final position does not exceed the values
    given for maximum and minimum x, y coordinates.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="gui">
<h4>3.1.2.2 Gui</h4>
</a>The <b><class>Gui</class></b> class has an unique implicit object. It includes a collection of functions useful to interact with the GUI. These classes and functions are based on the <I>GLGooey</I> library.
<ul>
  <li><com><b>guiInitialize(</b><I>string</I> <B>fontFileName</B><b>)</b></com>
    <p><descr>initializes the GUI with the given file name of the default true type font.</descr>
    </p>
  <li><com><b>guiTerminate(</b><b>)</b></com>
    <p><descr>deinitializes the GUI.</descr>
    </p>
  <li><com><b>guiLoadScheme(</b><I>string</I> <B>xmlFileName</B><b>)</b></com>
    <p><descr>loads the specified XML skin.</descr>
    </p>
  <li><com><b>guiAddWindow(</b><I>GuiWindow</I> <B>window</B><b>)</b></com>
    <p><descr>adds a window to the GUI.</descr>
    </p>
  <li><com><b>guiRemoveWindow(</b><I>GuiWindow</I> <B>window</B><b>)</b></com>
    <p><descr>removes a window from the GUI.</descr>
    </p>
  <li><com><b>guiRemoveAllWindows(</b><b>)</b></com>
    <p><descr>removes all the windows from the GUI.</descr>
    </p>
  <li><com><b>guiSetPopUpWindow(</b><I>GuiWindow</I> <B>window</B><b>)</b></com>
    <p><descr>specifies the popup window.</descr>
    </p>
  <li><com><b>guiSetActiveWindow(</b><I>GuiWindow</I> <B>window</B><b>)</b></com>
    <p><descr>specifies the active (topmost and focused) window.</descr>
    </p>
  <li><com><b>guiCopyToClipboard(</b><I>string</I> <B>contants</B><b>)</b></com>
    <p><descr>copies the string to the clipboard.</descr>
    </p>
  <li><com><I>string</I> <b>guiGetClipboardContents(</b><b>)</b></com>
    <p><descr>returns the contents of the clipboard.</descr>
    </p>
  <li><com><b>guiConnectClipboardChanged(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>connects the clipboard changed slot to the given slot holder.</descr>
    </p>
  <li><com><b>guiDisconnectClipboardChanged(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>disconnects the clipboard changed slot from the given slot holder.</descr>
    </p>
  <li><com><b>guiAddTimer(</b><I>GuiTimer</I> <B>timer</B><b>)</b></com>
    <p><descr>adds a timer to the GUI.</descr>
    </p>
  <li><com><b>guiRemoveTimer(</b><I>GuiTimer</I> <B>timer</B><b>)</b></com>
    <p><descr>removes a timer from the GUI.</descr>
    </p>
</ul>
<p><B>GUI Render Functions</B> (useful in the <I>draw()</I> function of <I>GuiCustomWindow</I> instances)</p>
<ul>
  <li><com><b>guiDrawLine(</b><I>number</I> <B>startX</B>, <I>number</I> <B>startY</B>, <I>number</I> <B>endX</B>, <I>number</I> <B>endY</B><b>)</b></com>
    <p><descr>draws a line.</descr>
    </p>
  <li><com><b>guiDrawRectangle(</b><I>number</I> <B>bottomLeftX</B>, <I>number</I> <B>bottomLeftY</B>, <I>number</I> <B>topRightX</B>, <I>number</I> <B>topRightY</B>, <I>boolean</I> <B>filled</B><b>)</b></com>
    <p><descr>draws a rectangle.</descr>
    </p>
  <li><com><b>guiDrawGradientFilledRectangle(</b><I>number</I> <B>bottomLeftX</B>, <I>number</I> <B>bottomLeftY</B>, <I>number</I> <B>topRightX</B>, <I>number</I> <B>topRightY</B>, <I>number</I> <B>startRed</B>, <I>number</I> <B>startGreen</B>, <I>number</I> <B>startBlue</B>, <I>number</I> <B>startAlpha</B>, <I>number</I> <B>endRed</B>, <I>number</I> <B>endGreen</B>, <I>number</I> <B>endBlue</B>, <I>number</I> <B>endAlpha</B>, <I>boolean</I> <B>horizontal</B><b>)</b></com>
    <p><descr>draws a rectangle filled with a gradient pattern according to the given parameters.</descr>
    </p>
  <li><com><b>guiDrawCircleSegment(</b><I>number</I> <B>centerX</B>, <I>number</I> <B>centerY</B>, <I>number</I> <B>radius</B>, <I>number</I> <B>startAngle</B>, <I>number</I> <B>endAngle</B>, <I>number</I> <B>segmentsCount</B>, <I>boolean</I> <B>filled</B><b>)</b></com>
    <p><descr>draws an arc (or a sector, if filled). <I>SegmentsCount</I> specifies the number of segments the arc is approximated with.</descr>
    </p>
  <li><com><b>guiDrawCircle(</b><I>number</I> <B>centerX</B>, <I>number</I> <B>centerY</B>, <I>number</I> <B>radius</B>, <I>number</I> <B>segmentsCount</B>, <I>boolean</I> <B>filled</B><b>)</b></com>
    <p><descr>draws a circumference (or a circle, if filled). <I>SegmentsCount</I> specifies the number of segments the arc is approximated with.</descr>
    </p>
  <li><com><b>guiDrawRoundedRectangle(</b><I>number</I> <B>bottomLeftX</B>, <I>number</I> <B>bottomLeftY</B>, <I>number</I> <B>topRightX</B>, <I>number</I> <B>topRightY</B>, <I>number</I> <B>radius</B>, <I>boolean</I> <B>filled</B><b>)</b></com>
    <p><descr>draws a rectangle with rounded angles.</descr>
    </p>
  <li><com><b>guiDrawDroppedRectangle(</b><I>number</I> <B>bottomLeftX</B>, <I>number</I> <B>bottomLeftY</B>, <I>number</I> <B>topRightX</B>, <I>number</I> <B>topRightY</B>, <I>number</I> <B>fillRed</B>, <I>number</I> <B>fillGreen</B>, <I>number</I> <B>fillBlue</B>, <I>number</I> <B>fillAlpha</B>, <I>number</I> <B>borderRed</B>, <I>number</I> <B>borderGreen</B>, <I>number</I> <B>borderBlue</B>, <I>number</I> <B>borderAlpha</B><b>)</b></com>
    <p><descr>draws a sunken rectangle.</descr>
    </p>
  <li><com><b>guiDrawRaisedRectangle(</b><I>number</I> <B>bottomLeftX</B>, <I>number</I> <B>bottomLeftY</B>, <I>number</I> <B>topRightX</B>, <I>number</I> <B>topRightY</B>, <I>number</I> <B>fillRed</B>, <I>number</I> <B>fillGreen</B>, <I>number</I> <B>fillBlue</B>, <I>number</I> <B>fillAlpha</B>, <I>number</I> <B>borderRed</B>, <I>number</I> <B>borderGreen</B>, <I>number</I> <B>borderBlue</B>, <I>number</I> <B>borderAlpha</B><b>)</b></com>
    <p><descr>draws a raised rectangle.</descr>
    </p>
  <li><com><b>guiEnableClipRectangle(</b><I>number</I> <B>x1</B>, <I>number</I> <B>y1</B>, <I>number</I> <B>x2</B>, <I>number</I> <B>y2</B><b>)</b></com>
    <p><descr>specifies the clip rectangle.</descr>
    </p>
  <li><com><b>guiDisableClipRectangle(</b><b>)</b></com>
    <p><descr>removes the clip rectangle.</descr>
    </p>
  <li><com><b>guiSetCurrentColor(</b><I>number</I> <B>red</B>, <I>number</I> <B>green</B>, <I>number</I> <B>blue</B>, <I>number</I> <B>alpha</B><b>)</b></com>
    <p><descr>sets the current color.</descr>
    </p>
  <li><com><b>guiSetLineWidth(</b><I>number</I> <B>width</B><b>)</b></com>
    <p><descr>sets the line width.</descr>
    </p>
  <li><com><I>number</I> <b>guiGetLineWidth(</b><b>)</b></com>
    <p><descr>returns the line width.</descr>
    </p>
  <li><com><I>number</I> <b>guiGetMaximumLineWidth(</b><b>)</b></com>
    <p><descr>returns the maximum line width.</descr>
    </p>
  <li><com><b>guiDrawTriangle(</b><I>number</I> <B>x1</B>, <I>number</I> <B>y1</B>, <I>number</I> <B>x2</B>, <I>number</I> <B>y2</B>,  <I>number</I> <B>x3</B>, <I>number</I> <B>y3</B><b>)</b></com>
    <p><descr>draws a triangle.</descr>
    </p>
  <li><com><b>guiDrawImage(</b><I>GuiImage</I> <B>image</B>, <I>number</I> <B>x1</B>, <I>number</I> <B>y1</B>, <I>number</I> <B>x2</B>, <I>number</I> <B>y2</B>,  <I>boolean</I> <B>tiled</B>, <I>number</I> <B>minX</B>, <I>number</I> <B>minY</B>, <I>number</I> <B>maxX</B>, <I>number</I> <B>maxY</B><b>)</b></com>
    <p><descr>draws the specified image according to the given parameters.</descr>
    </p>
  <li><com><b>guiEnableTexturing(</b><I>GuiImage</I> <B>image</B><b>)</b></com>
    <p><descr>enables the texturing of primitives using the given image.</descr>
    </p>
  <li><com><b>guiDisableTexturing(</b><b>)</b></com>
    <p><descr>disables the texturing of primitives.</descr>
    </p>
  <li><com><b>guiRegisterImage(</b><I>GuiImage</I> <B>image</B><b>)</b></com>
    <p><descr>registers the image for subsequent use in the system.</descr>
    </p>
  <li><com><b>guiUnregisterImage(</b><I>GuiImage</I> <B>image</B><b>)</b></com>
    <p><descr>unregisters the image and frees all the relative resources.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiWindow">
<h5>3.1.2.2.1 GuiWindow</h5>
</a>The <b><class>GuiWindow</class></b> class is the parent of all the GUI components.
<ul>
  <li><com><I>GuiWindow</I>:<b>delete(</b><b>)</b></com>
    <p><descr>deletes a window. It's necessary to call this method only on global variables, because on local variables it is called automatically when the variable goes out of scope.</descr>
    </p>
  <li><com><I>string</I> <I>GuiWindow</I>:<b>getText(</b><b>)</b></com>
    <p><descr>returns the string associated with the window.</descr>
    </p>
  <li><com><I>GuiWindow</I>:<b>setText(</b><I>string</I> <B>text</B><b>)</b></com>
    <p><descr>sets the string associated with the window.</descr>
    </p>
  <li><com><I>number</I> <B>width</B>, <I>number</I> <B>height</B> = <I>GuiWindow</I>:<b>getSize(</b><b>)</b></com>
    <p><descr>returns the size of the window.</descr>
    </p>
  <li><com><I>GuiWindow</I>:<b>setSize(</b><I>number</I> <B>width</B>, <I>number</I> <B>height</B><b>)</b></com>
    <p><descr>sets the size of the window.</descr>
    </p>
  <li><com><I>number</I> <B>x</B>, <I>number</I> <B>y</B> = <I>GuiWindow</I>:<b>getPosition(</b><b>)</b></com>
    <p><descr>returns the position of the window.</descr>
    </p>
  <li><com><I>GuiWindow</I>:<b>setPosition(</b><I>number</I> <B>x</B>, <I>number</I> <B>y</B><b>)</b></com>
    <p><descr>sets the position of the window.</descr>
    </p>
  <li><com><I>boolean</I> <I>GuiWindow</I>:<b>isFocused(</b><b>)</b></com>
    <p><descr>returns true if the window has the focus.</descr>
    </p>
  <li><com><I>GuiWindow</I>:<b>setFocused(</b><I>boolean</I> <B>b</B> = true<b>)</b></com>
    <p><descr>specifies if the window has the focus or not.</descr>
    </p>
  <li><com><I>boolean</I> <I>GuiWindow</I>:<b>isVisible(</b><b>)</b></com>
    <p><descr>returns true if the window is visible.</descr>
    </p>
  <li><com><I>GuiWindow</I>:<b>setVisible(</b><I>boolean</I> <B>b</B> = true<b>)</b></com>
    <p><descr>specifies if the window is visible or not.</descr>
    </p>
  <li><com><I>boolean</I> <I>GuiWindow</I>:<b>isEnabled(</b><b>)</b></com>
    <p><descr>returns true if the window is enabled.</descr>
    </p>
  <li><com><I>GuiWindow</I>:<b>setEnabled(</b><I>boolean</I> <B>b</B> = true<b>)</b></com>
    <p><descr>specifies if the window is enabled or not.</descr>
    </p>
  <li><com><I>GuiWindow</I>:<b>setAsActive(</b><b>)</b></com>
    <p><descr>specifies that the window is the current active window.</descr>
    </p>
  <li><com><I>GuiWindow</I>:<b>loadAppearance(</b><I>string</I> <B>xmlFileName</B>, <I>string</I> <B>winName</B><b>)</b></com>
    <p><descr>loads the specified XML skin for the window.</descr>
    </p>
  <li><com><I>GuiWindow</I>:<b>addListener(</b><I>GuiListener</I> <B>listener</B><b>)</b></com>
    <p><descr>adds the specified listener to the window.</descr>
    </p>
  <li><com><I>GuiWindow</I>:<b>removeListener(</b><I>GuiListener</I> <B>listener</B><b>)</b></com>
    <p><descr>removes the specified listener from the window.</descr>
    </p>
  <li><com><I>GuiWindow</I>:<b>connectClosed(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>connects the closed slot to the given slot holder.</descr>
    </p>
  <li><com><I>GuiWindow</I>:<b>disconnectClosed(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>disconnects the closed slot from the given slot holder.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiBasicButton">
<h5>3.1.2.2.1.1 GuiBasicButton</h5>
</a>The <b><class>GuiBasicButton</class></b> class extends <b><parent>GuiWindow</parent></b>
and inherits all its methods. It is the parent of all the button-like components.
<ul>
  <li><com><I>number</I> <I>GuiBasicButton</I>:<b>getState(</b><b>)</b></com>
    <p><descr>returns the state of the button (0 = up; 1 = down; 2 = roll over; 3 = roll over on).</descr>
    </p>
  <li><com><I>GuiButton</I>:<b>connectPressed(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>connects the pressed slot to the given slot holder.</descr>
    </p>
  <li><com><I>GuiButton</I>:<b>disconnectPressed(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>disconnects the pressed slot to the given slot holder.</descr>
    </p>
  <li><com><I>GuiButton</I>:<b>connectReleased(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>connects the released slot to the given slot holder.</descr>
    </p>
  <li><com><I>GuiButton</I>:<b>disconnectReleased(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>disconnects the released slot to the given slot holder.</descr>
    </p>
  <li><com><I>GuiButton</I>:<b>connectClicked(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>connects the clicked slot to the given slot holder.</descr>
    </p>
  <li><com><I>GuiButton</I>:<b>disconnectClicked(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>disconnects the clicked slot to the given slot holder.</descr>
    </p>
  <li><com><I>GuiButton</I>:<b>connectToggled(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>connects the toggled slot to the given slot holder. The slot receives a <I>boolean</I> value as argument.</descr>
    </p>
  <li><com><I>GuiButton</I>:<b>disconnectToggled(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>disconnects the toggled slot to the given slot holder.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiButton">
<h5>3.1.2.2.1.1.1 GuiButton</h5>
</a>The <b><class>GuiButton</class></b> class extends <b><parent>GuiBasicButton</parent></b>
and inherits all its methods. It represents a button.
<ul>
  <li><com><I>GuiButton</I> <b>GuiButton(</b><I>string</I> <B>text</B><b>)</b></com>
    <p><descr>creates a button with the given text.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiCheckBox">
<h5>3.1.2.2.1.1.2 GuiCheckBox</h5>
</a>The <b><class>GuiCheckBox</class></b> class extends <b><parent>GuiBasicButton</parent></b>
and inherits all its methods. It represents a check box. 
<ul>
  <li><com><I>GuiCheckBox</I> <b>GuiCheckBox(</b><I>string</I> <B>text</B>, <I>GuiCheckBoxGroup</I> <B>cbg</B> = nil<b>)</b></com>
    <p><descr>creates a check box with the given text. If a check box group is specified, the check box belongs to a group and acts as a radio button.</descr>
    </p>
  <li><com><I>boolean</I> <I>GuiCheckBox</I>:<b>isChecked(</b><b>)</b></com>
    <p><descr>returns true if the check box is checked.</descr>
    </p>
  <li><com><I>GuiCheckBox</I>:<b>setChecked(</b><I>boolean</I> <B>b</B> = true<b>)</b></com>
    <p><descr>specifies if the check box is checked or not.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiCheckBoxGroup">
<h5>3.1.2.2.1.1.2.1 GuiCheckBoxGroup</h5>
</a>The <b><class>GuiCheckBoxGroup</class></b> class is used to group <I>GuiCheckBox</I> objects (so they act as radio buttons).
<ul>
  <li><com><I>GuiCheckBoxGroup</I> <b>GuiCheckBoxGroup(</b><b>)</b></com>
    <p><descr>creates a check box group.</descr>
    </p>
  <li><com><I>GuiCheckBoxGroup</I>:<b>select(</b><I>GuiCheckBox</I> <B>cb</B><b>)</b></com>
    <p><descr>selects the given check box in this group.</descr>
    </p>
  <li><com><I>number</I> <I>GuiCheckBoxGroup</I>:<b>getIndexOf(</b><I>GuiCheckBox</I> <B>cb</B><b>)</b></com>
    <p><descr>returns the index of the given check box in this group.</descr>
    </p>
  <li><com><I>number</I> <I>GuiCheckBoxGroup</I>:<b>getIndexOfSelected(</b><b>)</b></com>
    <p><descr>returns the index of the selected check box in this group.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiMultiTextButton">
<h5>3.1.2.2.1.1.3 GuiMultiTextButton</h5>
</a>The <b><class>GuiMultiTextButton</class></b> class extends <b><parent>GuiBasicButton</parent></b>
and inherits all its methods. It is a button with multiple texts associated.
<ul>
  <li><com><I>GuiMultiTextButton</I> <b>GuiMultiTextButton(</b><I>string</I> <B>text</B><b>)</b></com>
    <p><descr>creates a multi text button with the given text.</descr>
    </p>
  <li><com><I>GuiMultiTextButton</I>:<b>addString(</b><I>string</I> <B>text</B><b>)</b></com>
    <p><descr>adds a string.</descr>
    </p>
  <li><com><I>number</I> <I>GuiMultiTextButton</I>:<b>getStringsCount(</b><b>)</b></com>
    <p><descr>returns the number of strings.</descr>
    </p>
  <li><com><I>number</I> <I>GuiMultiTextButton</I>:<b>getStringAt(</b><I>number</I> <B>index</B><b>)</b></com>
    <p><descr>returns the string at the given index.</descr>
    </p>
  <li><com><I>GuiMultiTextButton</I>:<b>connectSelectionChanged(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>connects the selection changed slot to the given slot holder. The slot receives a <I>string</I> value as argument.</descr>
    </p>
  <li><com><I>GuiMultiTextButton</I>:<b>disconnectSelectionChanged(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>disconnects the selection changed slot to the given slot holder.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiComboBox">
<h5>3.1.2.2.1.2 GuiComboBox</h5>
</a>The <b><class>GuiComboBox</class></b> class extends <b><parent>GuiWindow</parent></b>
and inherits all its methods. It represent a combo box.
<ul>
  <li><com><I>GuiComboBox</I> <b>GuiComboBox(</b><I>number</I> <B>x</B>, <I>number</I> <B>y</B>, <I>number</I> <B>w</B>, <I>number</I> <B>h</B><b>)</b></com>
    <p><descr>creates a combo box with the given position and size.</descr>
    </p>
  <li><com><I>GuiComboBox</I>:<b>addString(</b><I>string</I> <B>text</B><b>)</b></com>
    <p><descr>adds a string.</descr>
    </p>
  <li><com><I>number</I> <I>GuiComboBox</I>:<b>getStringsCount(</b><b>)</b></com>
    <p><descr>returns the number of strings.</descr>
    </p>
  <li><com><I>number</I> <I>GuiComboBox</I>:<b>getStringAt(</b><I>number</I> <B>index</B><b>)</b></com>
    <p><descr>returns the string at the given index.</descr>
    </p>
  <li><com><I>string</I> <I>GuiComboBox</I>:<b>getSelectedString(</b><b>)</b></com>
    <p><descr>returns the selected string.</descr>
    </p>
  <li><com><I>GuiComboBox</I>:<b>removeStringAt(</b><I>number</I> <B>index</B><b>)</b></com>
    <p><descr>removes the string at the given index.</descr>
    </p>
  <li><com><I>GuiComboBox</I>:<b>removeAllStrings(</b><b>)</b></com>
    <p><descr>removes all the strings.</descr>
    </p>
  <li><com><I>number</I> <I>GuiComboBox</I>:<b>getSelectedIndex(</b><b>)</b></com>
    <p><descr>returns the index of the selected string.</descr>
    </p>
  <li><com><I>GuiComboBox</I>:<b>selectString(</b><I>string</I> <B>text</B><b>)</b></com>
    <p><descr>selects the given string.</descr>
    </p>
  <li><com><I>GuiComboBox</I>:<b>selectStringAt(</b><I>number</I> <B>index</B><b>)</b></com>
    <p><descr>selects the string at the given index.</descr>
    </p>
  <li><com><I>GuiComboBox</I>:<b>connectSelectionChanged(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>connects the selection changed slot to the given slot holder. The slot receives a <I>string</I> value as argument.</descr>
    </p>
  <li><com><I>GuiComboBox</I>:<b>disconnectSelectionChanged(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>disconnects the selection changed slot to the given slot holder.</descr>
    </p>
  <li><com><I>GuiComboBox</I>:<b>connectListOpened(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>connects the list opened slot to the given slot holder.</descr>
    </p>
  <li><com><I>GuiComboBox</I>:<b>disconnectListOpened(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>disconnects the list opened slot to the given slot holder.</descr>
    </p>
  <li><com><I>GuiComboBox</I>:<b>connectListClosed(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>connects the list closed slot to the given slot holder.</descr>
    </p>
  <li><com><I>GuiComboBox</I>:<b>disconnectListClosed(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>disconnects the list closed slot to the given slot holder.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiEditField">
<h5>3.1.2.2.1.3 GuiEditField</h5>
</a>The <b><class>GuiEditField</class></b> class extends <b><parent>GuiWindow</parent></b>
and inherits all its methods. It represents an edit field.
<ul>
  <li><com><I>GuiEditField</I> <b>GuiEditField(</b><I>string</I> <B>text</B><b>)</b></com>
    <p><descr>creates an edit field with the given text.</descr>
    </p>
  <li><com><I>number</I> <I>GuiEditField</I>:<b>getCaretPosition(</b><b>)</b></com>
    <p><descr>returns the caret position in the field.</descr>
    </p>
  <li><com><I>string</I> <I>GuiEditField</I>:<b>getSelectedText(</b><b>)</b></com>
    <p><descr>returns the selected text in the field.</descr>
    </p>
  <li><com><I>number</I> <B>start</B>, <I>number</I> <B>end</B> = <I>GuiEditField</I>:<b>getSelection(</b><b>)</b></com>
    <p><descr>returns the start and end positions of the selection in the field.</descr>
    </p>
  <li><com><I>GuiEditField</I>:<b>setSelection(</b><I>number</I> <B>start</B>, <I>number</I> <B>end</B><b>)</b></com>
    <p><descr>sets the start and end positions of the selection in the field.</descr>
    </p>
  <li><com><I>GuiEditField</I>:<b>removeSelection(</b><b>)</b></com>
    <p><descr>removes the selection.</descr>
    </p>
  <li><com><I>boolean</I> <I>GuiEditField</I>:<b>isSelectionValid(</b><b>)</b></com>
    <p><descr>returns true if the selection contains anything.</descr>
    </p>
  <li><com><I>GuiEditField</I>:<b>selectAll(</b><b>)</b></com>
    <p><descr>selects all the text in the field.</descr>
    </p>
  <li><com><I>GuiEditField</I>:<b>connectReturnPressed(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>connects the return pressed slot to the given slot holder.</descr>
    </p>
  <li><com><I>GuiEditField</I>:<b>disconnectReturnPressed(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>disconnects the return pressed slot to the given slot holder.</descr>
    </p>
  <li><com><I>GuiEditField</I>:<b>connectTextChanged(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>connects the text changed slot to the given slot holder. The slot receives a <I>string</I> value as argument.</descr>
    </p>
  <li><com><I>GuiEditField</I>:<b>disconnectTextChanged(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>disconnects the text changed slot to the given slot holder.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiFrameWindow">
<h5>3.1.2.2.1.4 GuiFrameWindow</h5>
</a>The <b><class>GuiFrameWindow</class></b> class extends <b><parent>GuiWindow</parent></b>
and inherits all its methods. It represents a top level window.
<ul>
  <li><com><I>GuiFrameWindow</I> <b>GuiFrameWindow(</b><I>number</I> <B>x1</B>, <I>number</I> <B>y1</B>, <I>number</I> <B>x2</B>, <I>number</I> <B>y2</B><b>)</b></com>
    <p><descr>creates a window with the specified corners.</descr>
    </p>
  <li><com><I>boolean</I> <I>GuiFrameWindow</I>:<b>isMovable(</b><b>)</b></com>
    <p><descr>returns true if the window is movable.</descr>
    </p>
  <li><com><I>GuiFrameWindow</I>:<b>setMovable(</b><I>boolean</I> <B>b</B> = true<b>)</b></com>
    <p><descr>specifies if the window is movable or not.</descr>
    </p>
  <li><com><I>GuiFrameWindow</I>:<b>setClientWindow(</b><I>GuiWindow</I> <B>window</B><b>)</b></com>
    <p><descr>specifies the client window of this frame.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiCustomWindow">
<h5>3.1.2.2.1.5 GuiCustomWindow</h5>
</a>The <b><class>GuiCustomWindow</class></b> class extends <b><parent>GuiWindow</parent></b>
and inherits all its methods. It represents an highly customizable window (the user can define all the sensible methods, in particular the <I>draw()</I> method using the <I>guiDraw*()</I> functions)
<ul>
  <li><com><I>GuiCustomWindow</I> <b>GuiCustomWindow(</b><I>string</I> <B>drawFunc</B> = nil, <I>string</I> <B>recommendedSizeFunc</B> = nil, <I>string</I> <B>onResizeFunc</B> = nil, <I>string</I> <B>onMoveFunc</B> = nil, <I>string</I> <B>onTextChangedFunc</B> = nil, <I>string</I> <B>onShowFunc</B> = nil, <I>string</I> <B>onHideFunc</B> = nil, <I>string</I> <B>onGainedFocusFunc</B> = nil, <I>string</I> <B>onLostFocusFunc</B> = nil<b>)</b></com>
    <p><descr>creates a custom window with the specified callback function names.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiListWindow">
<h5>3.1.2.2.1.6 GuiListWindow</h5>
</a>The <b><class>GuiListWindow</class></b> class extends <b><parent>GuiWindow</parent></b>
and inherits all its methods. It is the parent of all the components of the list kind.
<ul>
  <li><com><I>number</I> <I>GuiListWindow</I>:<b>getSelectedIndex(</b><b>)</b></com>
    <p><descr>returns the index of the selected item.</descr>
    </p>
  <li><com><I>number</I> <I>GuiListWindow</I>:<b>getHighlightedIndex(</b><b>)</b></com>
    <p><descr>returns the index of the highlighted item.</descr>
    </p>
  <li><com><I>GuiListWindow</I>:<b>select(</b><I>number</I> <B>index</B><b>)</b></com>
    <p><descr>seletct the item corresponding to index.</descr>
    </p>
  <li><com><I>number</I> <I>GuiListWindow</I>:<b>getEntriesCount(</b><b>)</b></com>
    <p><descr>returns the number of items in the list.</descr>
    </p>
  <li><com><I>GuiListWindow</I>:<b>setLineHeightFactor(</b><I>number</I> <B>factor</B><b>)</b></com>
    <p><descr>sets the line height factor.</descr>
    </p>
  <li><com><I>number</I> <I>GuiListWindow</I>:<b>getLineHeightFactor(</b><b>)</b></com>
    <p><descr>returns the line height factor.</descr>
    </p>
  <li><com><I>GuiListWindow</I>:<b>connectLeftClicked(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>connects the left clicked slot to the given slot holder.</descr>
    </p>
  <li><com><I>GuiListWindow</I>:<b>disconnectLeftClicked(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>disconnects the left clicked slot to the given slot holder.</descr>
    </p>
  <li><com><I>GuiListWindow</I>:<b>connectRightClicked(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>connects the right clicked slot to the given slot holder.</descr>
    </p>
  <li><com><I>GuiListWindow</I>:<b>disconnectRightClicked(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>disconnects the right clicked slot to the given slot holder.</descr>
    </p>
  <li><com><I>GuiListWindow</I>:<b>connectSelectionChanged(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>connects the selection changed slot to the given slot holder. The slot receives a <I>int</I> value as argument.</descr>
    </p>
  <li><com><I>GuiListWindow</I>:<b>disconnectSelectionChanged(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>disconnects the selection changed slot to the given slot holder.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiListBox">
<h5>3.1.2.2.1.6.1 GuiListBox</h5>
</a>The <b><class>GuiListBox</class></b> class extends <b><parent>GuiListWindow</parent></b>
and inherits all its methods. It represents a list box.
<ul>
  <li><com><I>GuiListBox</I> <b>GuiListBox(</b><I>number</I> <B>x1</B>, <I>number</I> <B>y1</B>, <I>number</I> <B>x2</B>, <I>number</I> <B>y2</B><b>)</b></com>
    <p><descr>creates a list box with the specified corners.</descr>
    </p>
  <li><com><I>GuiListBox</I>:<b>addString(</b><I>string</I> <B>text</B><b>)</b></com>
    <p><descr>adds a string.</descr>
    </p>
  <li><com><I>GuiListBox</I>:<b>removeStringAt(</b><I>number</I> <B>index</B><b>)</b></com>
    <p><descr>removes the string at the given index.</descr>
    </p>
  <li><com><I>GuiListBox</I>:<b>removeAllStrings(</b><b>)</b></com>
    <p><descr>removes all the strings.</descr>
    </p>
  <li><com><I>number</I> <I>GuiListBox</I>:<b>getStringAt(</b><I>number</I> <B>index</B><b>)</b></com>
    <p><descr>returns the string at the given index.</descr>
    </p>
  <li><com><I>number</I> <I>GuiListBox</I>:<b>getStringsCount(</b><b>)</b></com>
    <p><descr>returns the number of strings.</descr>
    </p>
  <li><com><I>boolean</I> <I>GuiListBox</I>:<b>contains(</b><I>string</I> <B>text</B><b>)</b></com>
    <p><descr>returns true if the string is contained in the list.</descr>
    </p>
  <li><com><I>number</I> <I>GuiListBox</I>:<b>getIndexOf(</b><I>string</I> <B>text</B><b>)</b></com>
    <p><descr>returns the index corresponding to the given string.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiListControl">
<h5>3.1.2.2.1.6.2 GuiListControl</h5>
</a>The <b><class>GuiListControl</class></b> class extends <b><parent>GuiListWindow</parent></b>
and inherits all its methods. It represents a list with multiple columns.
<ul>
  <li><com><I>GuiListControl</I> <b>GuiListControl(</b><I>number</I> <B>x1</B>, <I>number</I> <B>y1</B>, <I>number</I> <B>x2</B>, <I>number</I> <B>y2</B>, <I>number</I> <B>columnsCount</B><b>)</b></com>
    <p><descr>creates a list control with the specified corners and number of columns.</descr>
    </p>
  <li><com><I>GuiListControl</I>:<b>setColumnWidths(</b><I>table</I> <B>widths</B><b>)</b></com>
    <p><descr>sets the widths of the columns. The table must contain numbers.</descr>
    </p>
  <li><com><I>number</I> <I>GuiListControl</I>:<b>getColumnWidth(</b><I>number</I> <B>index</B><b>)</b></com>
    <p><descr>returns the width of the index-th column.</descr>
    </p>
  <li><com><I>GuiListControl</I>:<b>addRow(</b><I>table</I> <B>strings</B><b>)</b></com>
    <p><descr>adds a row of strings. The table must contain strings.</descr>
    </p>
  <li><com><I>GuiListControl</I>:<b>removeRowAt(</b><I>number</I> <B>index</B><b>)</b></com>
    <p><descr>removes the index-th row.</descr>
    </p>
  <li><com><I>number</I> <I>GuiListControl</I>:<b>getRowsCount(</b><b>)</b></com>
    <p><descr>returns the number of rows.</descr>
    </p>
  <li><com><I>GuiListControl</I>:<b>setStringAt(</b><I>number</I> <B>row</B>, <I>number</I> <B>column</B>, <I>string</I> <B>string</B><b>)</b></com>
    <p><descr>sets the string at the given row and column.</descr>
    </p>
  <li><com><I>string</I> <I>GuiListControl</I>:<b>getStringAt(</b><I>number</I> <B>row</B>, <I>number</I> <B>column</B><b>)</b></com>
    <p><descr>returns the string at the given row and column.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiPanel">
<h5>3.1.2.2.1.7 GuiPanel</h5>
</a>The <b><class>GuiPanel</class></b> class extends <b><parent>GuiWindow</parent></b>
and inherits all its methods. It represents a container of components.
<ul>
  <li><com><I>GuiPanel</I> <b>GuiPanel(</b><I>number</I> <B>x1</B>, <I>number</I> <B>y1</B>, <I>number</I> <B>x2</B>, <I>number</I> <B>y2</B><b>)</b></com>
    <p><descr>creates a panel with the specified corners.</descr>
    </p>
  <li><com><I>GuiPanel</I>:<b>addChildWindow(</b><I>GuiWindow</I> <B>window</B>, <I>number</I> <B>horizontalSpan</B> = nil, <I>number</I> <B>verticalSpan</B> = nil, <I>number</I> <B>columnIndex</B> = nil, <I>number</I> <B>rowIndex</B> = nil, <I>number</I> <B>horizontalSpacing</B> = nil, <I>number</I> <B>verticalSpacing</B> = nil<b>)</b></com>
    <p><descr>adds a window to the panel. The optional argument are necessary only when the panel has a complex grid layouter</descr>
    </p>
  <li><com><I>GuiPanel</I>:<b>removeChildWindow(</b><I>GuiWindow</I> <B>window</B><b>)</b></com>
    <p><descr>removes a window from the panel.</descr>
    </p>
  <li><com><I>GuiPanel</I>:<b>arrangeChildren(</b><b>)</b></com>
    <p><descr>arranges the children in the panel.</descr>
    </p>
  <li><com><I>GuiPanel</I>:<b>setLayouter(</b><I>GuiLayouter</I> <B>layouter</B><b>)</b></com>
    <p><descr>sets the layouter of the panel.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiLayouter">
<h5>3.1.2.2.1.7.1 GuiLayouter</h5>
</a>The <b><class>GuiLayouter</class></b> class specified the layout of components contained in a <I>GuiPanel</I>.
<ul>
  <li><com><I>GuiLayouter</I>:<b>delete(</b><b>)</b></com>
    <p><descr>deletes the layouter. It's necessary to call this method only on global variables, because on local variables it is called automatically when the variable goes out of scope.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiBoxLayouter">
<h5>3.1.2.2.1.7.1.1 GuiBoxLayouter</h5>
</a>The <b><class>GuiBoxLayouter</class></b> class extends <b><parent>GuiLayouter</parent></b>
and inherits all its methods. It represents a simple boxed layout.
<ul>
  <li><com><I>GuiBoxLayouter</I> <b>GuiBoxLayouter(</b><b>)</b></com>
    <p><descr>creates a box layouter.</descr>
    </p>
  <li><com><I>number</I> <I>GuiBoxLayouter</I>:<b>getJustification(</b><b>)</b></com>
    <p><descr>returns the justification of the layout.</descr>
    </p>
  <li><com><I>GuiBoxLayouter</I>:<b>setJustification(</b><I>number</I> <B>justification</B><b>)</b></com>
    <p><descr>sets the layout justification (0 = horizontal; 1 = vertical).</descr>
    </p>
  <li><com><I>number</I> <I>GuiBoxLayouter</I>:<b>getSpacing(</b><b>)</b></com>
    <p><descr>returns the spacing of the layout.</descr>
    </p>
  <li><com><I>GuiBoxLayouter</I>:<b>setSpacing(</b><I>number</I> <B>spacing</B><b>)</b></com>
    <p><descr>sets the layout spacing.</descr>
    </p>
  <li><com><I>boolean</I> <I>GuiBoxLayouter</I>:<b>isChildSizeRespected(</b><b>)</b></com>
    <p><descr>returns if the child size is respected.</descr>
    </p>
  <li><com><I>GuiBoxLayouter</I>:<b>setChildSizeRespected(</b><I>boolean</I> <B>b</B> = true<b>)</b></com>
    <p><descr>specifies if the child size is respected.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiComplexGridLayouter">
<h5>3.1.2.2.1.7.1.2 GuiComplexGridLayouter</h5>
</a>The <b><class>GuiComplexGridLayouter</class></b> class extends <b><parent>GuiLayouter</parent></b>
and inherits all its methods. It represents a complex grid layout.
<ul>
  <li><com><I>GuiComplexGridLayouter</I> <b>GuiComplexGridLayouter(</b><b>)</b></com>
    <p><descr>creates a complex grid layouter.</descr>
    </p>
  <li><com><I>GuiComplexGridLayouter</I>:<b>setColumnWidths(</b><I>table</I> <B>widths</B><b>)</b></com>
    <p><descr>sets the widths of the columns. The table must contain numbers.</descr>
    </p>
  <li><com><I>number</I> <I>GuiComplexGridLayouter</I>:<b>getColumnWidth(</b><I>number</I> <B>index</B><b>)</b></com>
    <p><descr>returns the width of the index-th column.</descr>
    </p>
  <li><com><I>GuiComplexGridLayouter</I>:<b>setRowHeights(</b><I>table</I> <B>heights</B><b>)</b></com>
    <p><descr>sets the heights of the rows. The table must contain numbers.</descr>
    </p>
  <li><com><I>number</I> <I>GuiComplexGridLayouter</I>:<b>getRowHeight(</b><I>number</I> <B>index</B><b>)</b></com>
    <p><descr>returns the height of the index-th row.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiFlowLayouter">
<h5>3.1.2.2.1.7.1.3 GuiFlowLayouter</h5>
</a>The <b><class>GuiFlowLayouter</class></b> class extends <b><parent>GuiLayouter</parent></b>
and inherits all its methods. It represents a flow layout.
<ul>
  <li><com><I>GuiFlowLayouter</I> <b>GuiFlowLayouter(</b><b>)</b></com>
    <p><descr>creates a flow layouter.</descr>
    </p>
  <li><com><I>number</I> <I>GuiFlowLayouter</I>:<b>getAlignment(</b><b>)</b></com>
    <p><descr>returns the justification of the layout.</descr>
    </p>
  <li><com><I>GuiFlowLayouter</I>:<b>setAlignment(</b><I>number</I> <B>alignment</B><b>)</b></com>
    <p><descr>sets the layout alignment (0 = left; 1 = right; 2 = center).</descr>
    </p>
  <li><com><I>number</I> <I>GuiFlowLayouter</I>:<b>getHorizontalSpacing(</b><b>)</b></com>
    <p><descr>returns the horizontal spacing of the layout.</descr>
    </p>
  <li><com><I>GuiFlowLayouter</I>:<b>setHorizontalSpacing(</b><I>number</I> <B>spacing</B><b>)</b></com>
    <p><descr>sets the horizontal spacing.</descr>
    </p>
  <li><com><I>number</I> <I>GuiFlowLayouter</I>:<b>getVerticalSpacing(</b><b>)</b></com>
    <p><descr>returns the vertical spacing of the layout.</descr>
    </p>
  <li><com><I>GuiFlowLayouter</I>:<b>setVerticalSpacing(</b><I>number</I> <B>spacing</B><b>)</b></com>
    <p><descr>sets the vertical spacing.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiGridLayouter">
<h5>3.1.2.2.1.7.1.4 GuiGridLayouter</h5>
</a>The <b><class>GuiGridLayouter</class></b> class extends <b><parent>GuiLayouter</parent></b>
and inherits all its methods. It represents a simple grid layout.
<ul>
  <li><com><I>GuiGridLayouter</I> <b>GuiGridLayouter(</b><b>)</b></com>
    <p><descr>creates a grid layouter.</descr>
    </p>
  <li><com><I>number</I> <I>GuiGridLayouter</I>:<b>getRowsCount(</b><b>)</b></com>
    <p><descr>returns the number of rows of the layout.</descr>
    </p>
  <li><com><I>GuiGridLayouter</I>:<b>setRowsCount(</b><I>number</I> <B>count</B><b>)</b></com>
    <p><descr>sets the number of rows.</descr>
    </p>
  <li><com><I>number</I> <I>GuiGridLayouter</I>:<b>getColumnsCount(</b><b>)</b></com>
    <p><descr>returns the number of columns of the layout.</descr>
    </p>
  <li><com><I>GuiGridLayouter</I>:<b>setColumnsCount(</b><I>number</I> <B>count</B><b>)</b></com>
    <p><descr>sets the number of columns.</descr>
    </p>
  <li><com><I>number</I> <I>GuiGridLayouter</I>:<b>getHorizontalSpacing(</b><b>)</b></com>
    <p><descr>returns the horizontal spacing of the layout.</descr>
    </p>
  <li><com><I>GuiGridLayouter</I>:<b>setHorizontalSpacing(</b><I>number</I> <B>spacing</B><b>)</b></com>
    <p><descr>sets the horizontal spacing.</descr>
    </p>
  <li><com><I>number</I> <I>GuiGridLayouter</I>:<b>getVerticalSpacing(</b><b>)</b></com>
    <p><descr>returns the vertical spacing of the layout.</descr>
    </p>
  <li><com><I>GuiGridLayouter</I>:<b>setVerticalSpacing(</b><I>number</I> <B>spacing</B><b>)</b></com>
    <p><descr>sets the vertical spacing.</descr>
    </p></ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiProgressBar">
<h5>3.1.2.2.1.8 GuiProgressBar</h5>
</a>The <b><class>GuiProgressBar</class></b> class extends <b><parent>GuiWindow</parent></b>
and inherits all its methods. It represents a progress bar.
<ul>
  <li><com><I>GuiProgressBar</I> <b>GuiProgressBar(</b><I>number</I> <B>x1</B>, <I>number</I> <B>y1</B>, <I>number</I> <B>x2</B>, <I>number</I> <B>y2</B><b>)</b></com>
    <p><descr>creates a progress bar with the specified corners.</descr>
    </p>
  <li><com><I>number</I> <I>GuiProgressBar</I>:<b>getOrientation(</b><b>)</b></com>
    <p><descr>returns the orientation.</descr>
    </p>
  <li><com><I>GuiProgressBar</I>:<b>setOrientation(</b><I>number</I> <B>orientation</B><b>)</b></com>
    <p><descr>sets the orientation (0 = horizontal; 1 = vertical).</descr>
    </p>
  <li><com><I>number</I> <I>GuiProgressBar</I>:<b>getPercentage(</b><b>)</b></com>
    <p><descr>returns the percentage.</descr>
    </p>
  <li><com><I>GuiProgressBar</I>:<b>setPercentage(</b><I>number</I> <B>percentage</B><b>)</b></com>
    <p><descr>sets the percentage.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiSlideable">
<h5>3.1.2.2.1.9 GuiSlideable</h5>
</a>The <b><class>GuiSlideable</class></b> class extends <b><parent>GuiWindow</parent></b>
and inherits all its methods. It is the parents of all the components of the slider kind.
<ul>
  <li><com><I>number</I> <I>GuiSlideable</I>:<b>getValue(</b><b>)</b></com>
    <p><descr>returns the value.</descr>
    </p>
  <li><com><I>GuiSlideable</I>:<b>setValue(</b><I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the value.</descr>
    </p>
  <li><com><I>number</I> <I>GuiSlideable</I>:<b>getMaximum(</b><b>)</b></com>
    <p><descr>returns the maximum value.</descr>
    </p>
  <li><com><I>GuiSlideable</I>:<b>setMaximum(</b><I>number</I> <B>maximum</B><b>)</b></com>
    <p><descr>sets the maximum value.</descr>
    </p>
  <li><com><I>number</I> <I>GuiSlideable</I>:<b>getMinimum(</b><b>)</b></com>
    <p><descr>returns the minimum value.</descr>
    </p>
  <li><com><I>GuiSlideable</I>:<b>setMinimum(</b><I>number</I> <B>minimum</B><b>)</b></com>
    <p><descr>sets the minimum value.</descr>
    </p>
  <li><com><I>number</I> <I>GuiSlideable</I>:<b>getUnitIncrement(</b><b>)</b></com>
    <p><descr>returns the unit increment.</descr>
    </p>
  <li><com><I>GuiSlideable</I>:<b>setUnitIncrement(</b><I>number</I> <B>increment</B><b>)</b></com>
    <p><descr>sets the unit increment.</descr>
    </p>
  <li><com><I>number</I> <I>GuiSlideable</I>:<b>getBlockIncrement(</b><b>)</b></com>
    <p><descr>returns the block increment.</descr>
    </p>
  <li><com><I>GuiSlideable</I>:<b>setBlockIncrement(</b><I>number</I> <B>increment</B><b>)</b></com>
    <p><descr>sets the block increment.</descr>
    </p>
  <li><com><I>GuiSlideable</I>:<b>connectValueChanged(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>connects the value changed slot to the given slot holder. The slot receives a <I>int</I> value as argument.</descr>
    </p>
  <li><com><I>GuiSlideable</I>:<b>disconnectValueChanged(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>disconnects the value changed slot to the given slot holder.</descr>
    </p>
  <li><com><I>GuiSlideable</I>:<b>connectValueChanged(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>connects the value changed slot to the given slot holder. The slot receives a <I>int</I> value as argument.</descr>
    </p>
  <li><com><I>GuiSlideable</I>:<b>disconnectValueChanged(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>disconnects the value changed slot to the given slot holder.</descr>
    </p>
  <li><com><I>GuiSlideable</I>:<b>connectSliderPressed(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>connects the slider pressed slot to the given slot holder.</descr>
    </p>
  <li><com><I>GuiSlideable</I>:<b>disconnectSliderPressed(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>disconnects the slider pressed slot to the given slot holder.</descr>
    </p>
  <li><com><I>GuiSlideable</I>:<b>connectSliderReleased(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>connects the slider released slot to the given slot holder.</descr>
    </p>
  <li><com><I>GuiSlideable</I>:<b>disconnectSliderReleased(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>disconnects the slider released slot to the given slot holder.</descr>
    </p>
  <li><com><I>GuiSlideable</I>:<b>connectSliderMoved(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>connects the slider moved slot to the given slot holder. The slot receives a <I>int</I> value as argument.</descr>
    </p>
  <li><com><I>GuiSlideable</I>:<b>disconnectSliderMoved(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>disconnects the slider moved slot to the given slot holder.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiScrollBar">
<h5>3.1.2.2.1.9.1 GuiScrollBar</h5>
</a>The <b><class>GuiScrollBar</class></b> class extends <b><parent>GuiSlideable</parent></b>
and inherits all its methods. It represents a scroll bar.
<ul>
  <li><com><I>GuiScrollBar</I> <b>GuiScrollBar(</b><I>number</I> <B>justification</B>, <I>number</I> <B>topLeftX</B>, <I>number</I> <B>topLeftY</B>, <I>number</I> <B>extent</B><b>)</b></com>
    <p><descr>creates a scroll bar with the specified justification (0 = horizontal; 1 = vertical), top left corner, and extent.</descr>
    </p>
  <li><com><I>number</I> <I>GuiScrollBar</I>:<b>getVisibleAmount(</b><b>)</b></com>
    <p><descr>returns the visible amount of the scroll bar.</descr>
    </p>
  <li><com><I>GuiSlideable</I>:<b>setVisibleAmount(</b><I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the visible amount of the scroll bar.</descr>
    </p>
  <li><com><I>number</I> <B>r</B>, <I>number</I> <B>g</B>, <I>number</I> <B>b</B>, <I>number</I> <B>a</B> = <I>GuiScrollBar</I>:<b>getTrackColor(</b><b>)</b></com>
    <p><descr>returns the color of the track.</descr>
    </p>
  <li><com><I>GuiScrollBar</I>:<b>setTrackColor(</b><I>number</I> <B>r</B>, <I>number</I> <B>g</B>, <I>number</I> <B>b</B>, <I>number</I> <B>a</B><b>)</b></com>
    <p><descr>sets the color of the track.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiSlider">
<h5>3.1.2.2.1.9.2 GuiSlider</h5>
</a>The <b><class>GuiSlider</class></b> class extends <b><parent>GuiSlideable</parent></b>
and inherits all its methods. It represents a slider.
<ul>
  <li><com><I>GuiSlider</I> <b>GuiSlider(</b><I>number</I> <B>justification</B>, <I>number</I> <B>x1</B>, <I>number</I> <B>y1</B>, <I>number</I> <B>x2</B>, <I>number</I> <B>y2</B><b>)</b></com>
    <p><descr>creates a slider with the specified corners and justification (0 = horizontal; 1 = vertical).</descr>
    </p>
  <li><com><I>number</I> <I>GuiSlider</I>:<b>getTickPlacement(</b><b>)</b></com>
    <p><descr>returns the tick placement.</descr>
    </p>
  <li><com><I>GuiSlideable</I>:<b>setTickPlacement(</b><I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the tick placement.</descr>
    </p>
  <li><com><I>number</I> <I>GuiSlider</I>:<b>getTickFrequency(</b><b>)</b></com>
    <p><descr>returns the tick frequency.</descr>
    </p>
  <li><com><I>GuiSlideable</I>:<b>setTickFrequency(</b><I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the tick frequency.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiSpinBox">
<h5>3.1.2.2.1.9.3 GuiSpinBox</h5>
</a>The <b><class>GuiSpinBox</class></b> class extends <b><parent>GuiSlideable</parent></b>
and inherits all its methods. It represents a spin box.
<ul>
  <li><com><I>GuiSpinBox</I> <b>GuiSpinBox(</b><b>)</b></com>
    <p><descr>creates a spin box.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiStaticText">
<h5>3.1.2.2.1.10 GuiStaticText</h5>
</a>The <b><class>GuiStaticText</class></b> class extends <b><parent>GuiWindow</parent></b>
and inherits all its methods. It represents a label.
<ul>
  <li><com><I>GuiStaticText</I> <b>GuiStaticText(</b><I>string</I> <B>text</B><b>)</b></com>
    <p><descr>creates a label with the given text.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiImage">
<h5>3.1.2.2.2 GuiImage</h5>
</a>The <b><class>GuiImage</class></b> class is a reference to PNG images used by the GUI.
<ul>
  <li><com><I>GuiImage</I> <b>GuiImage(</b><I>string</I> <B>imageFileName</B><b>)</b></com>
    <p><descr>creates an image from the specified file.</descr>
    </p>
  <li><com><I>GuiImage</I>:<b>delete(</b><b>)</b></com>
    <p><descr>deletes the image. It's necessary to call this method only on global variables, because on local variables it is called automatically when the variable goes out of scope.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiTimer">
<h5>3.1.2.2.3 GuiTimer</h5>
</a>The <b><class>GuiTimer</class></b> class represents a timer to generate timed events in the GUI.
<ul>
  <li><com><I>GuiTimer</I> <b>GuiTimer(</b><b>)</b></com>
    <p><descr>creates a timer.</descr>
    </p>
  <li><com><I>GuiTimer</I>:<b>delete(</b><b>)</b></com>
    <p><descr>deletes the timer. It's necessary to call this method only on global variables, because on local variables it is called automatically when the variable goes out of scope.</descr>
    </p>
  <li><com><I>number</I> <I>GuiTimer</I>:<b>getInterval(</b><b>)</b></com>
    <p><descr>returns the time interval.</descr>
    </p>
  <li><com><I>GuiTimer</I>:<b>setInterval(</b><I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the time interval.</descr>
    </p>
  <li><com><I>boolean</I> <I>GuiTimer</I>:<b>isStarted(</b><b>)</b></com>
    <p><descr>returns true if the timer is started.</descr>
    </p>
  <li><com><I>boolean</I> <I>GuiTimer</I>:<b>hasElapsed(</b><b>)</b></com>
    <p><descr>returns true if the timer has elapsed.</descr>
    </p>
  <li><com><I>GuiTimer</I>:<b>start(</b><b>)</b></com>
    <p><descr>starts the timer.</descr>
    </p>
  <li><com><I>GuiTimer</I>:<b>stop(</b><b>)</b></com>
    <p><descr>stops the timer.</descr>
    </p>
  <li><com><I>GuiTimer</I>:<b>connectTrigger(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>connects the trigger slot to the given slot holder.</descr>
    </p>
  <li><com><I>GuiTimer</I>:<b>disconnectTrigger(</b><I>GuiSlotHolder</I> <B>holder</B><b>)</b></com>
    <p><descr>disconnects the trigger slot to the given slot holder.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiSlotHolder">
<h5>3.1.2.2.4 GuiSlotHolder</h5>
</a>The <b><class>GuiSlotHolder</class></b> class associates the GUI signal slots to the name of callback functions.
<ul>
  <li><com><I>GuiSlotHolder</I> <b>GuiSlotHolder(</b><I>string</I> <B>functionName</B><b>)</b></com>
    <p><descr>creates slot holder.</descr>
    </p>
  <li><com><I>GuiSlotHolder</I>:<b>delete(</b><b>)</b></com>
    <p><descr>deletes the slot holder. It's necessary to call this method only on global variables, because on local variables it is called automatically when the variable goes out of scope.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiListener">
<h5>3.1.2.2.5 GuiListener</h5>
</a>The <b><class>GuiListener</class></b> class associates GUI events to the name of callback functions.
<ul>
  <li><com><I>GuiListener</I>:<b>delete(</b><b>)</b></com>
    <p><descr>deletes the listener. It's necessary to call this method only on global variables, because on local variables it is called automatically when the variable goes out of scope.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiKeyListener">
<h5>3.1.2.2.5.1 GuiKeyListener</h5>
</a>The <b><class>GuiKeyListener</class></b> class extends <b><parent>GuiListener</parent></b>
and inherits all its methods. It listens to key events.
<ul>
  <li><com><I>GuiKeyListener</I> <b>GuiKeyListener</b>(</b><I>string</I> <B>onCharacterFunc</B> = nil, <I>string</I> <B>onPressedFunc</B> = nil, <I>string</I> <B>onReleasedFunc</B> = nil<b>)</b></com>
    <p><descr>creates a key listener with the given strings as callback function names. <I>OnCharacter</I> is called when a character is typed, the other functions when a key is pressed or released. All the functions receive a <I>number</I> argument (the character typed or the code of the key pressed) and must return <I>true</I> if they processed the message.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiMouseListener">
<h5>3.1.2.2.5.2 GuiMouseListener</h5>
</a>The <b><class>GuiMouseListener</class></b> class extends <b><parent>GuiListener</parent></b>
and inherits all its methods. It listens to mouse events.
<ul>
  <li><com><I>GuiMouseListener</I> <b>GuiMouseListener</b>(</b><I>string</I> <B>onClickedFunc</B> = nil, <I>string</I> <B>onEnteredFunc</B> = nil, <I>string</I> <B>onExitedFunc</B> = nil, <I>string</I> <B>onMoveFunc</B> = nil, <b>)</b></com>
    <p><descr>creates a mouse listener with the given strings as callback function names. <I>OnClicked</I> is called when the mouse is clicked, the other functions when the mouse enters, exits or simply moves on the component. All the functions receive two <I>number</I> arguments (the position of the mouse pointer when the event occurred) and must return <I>true</I> if they processed the message.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="guiTextRenderer">
<h5>3.1.2.2.6 GuiTextRenderer</h5>
</a>The <b><class>GuiTextRenderer</class></b> class renders true type font texts in GUI components. It's used to draw text in the <I>draw()</I> method of <I>GuiCustomWindows</I>.
<ul>
  <li><com><I>GuiTextRenderer</I> <b>GuiTextRenderer(</b><I>string</I> <B>fontFileName</B>, <I>number</I> <B>pointSize</B><b>)</b></com>
    <p><descr>creates the renderer from the given true type font file name and the given point size.</descr>
    </p>
  <li><com><I>GuiTextRenderer</I>:<b>delete(</b><b>)</b></com>
    <p><descr>deletes the renderer. It's necessary to call this method only on global variables, because on local variables it is called automatically when the variable goes out of scope.</descr>
    </p>
  <li><com><I>string</I> <I>GuiTextRenderer</I>:<b>getFontName(</b><b>)</b></com>
    <p><descr>returns the name of the font.</descr>
    </p>
  <li><com><I>number</I> <I>GuiTextRenderer</I>:<b>getPointSize(</b><b>)</b></com>
    <p><descr>returns the point size.</descr>
    </p>
  <li><com><I>number</I> <I>GuiTextRenderer</I>:<b>getWidth(</b><I>string</I> <B>text</B><b>)</b></com>
    <p><descr>returns the width of the rendered string.</descr>
    </p>
  <li><com><I>number</I> <I>GuiTextRenderer</I>:<b>getHitCharacterIndex(</b><I>string</I> <B>text</B>, <I>number</I> <B>offset</B><b>)</b></com>
    <p><descr>returns the index of the character located at the given offset.</descr>
    </p>
  <li><com><I>GuiTextRenderer</I>:<b>render(</b><I>string</I> <B>text</B>, <I>number</I> <B>x1</B>, <I>number</I> <B>y1</B>, <I>number</I> <B>x2</B>, <I>number</I> <B>y2</B>, <I>number</I> <B>horizAlign</B> = 1, <I>number</I> <B>vertAlign</B> = 1, <I>boolean</I> <B>multiLine</B> = false<b>)</b></com>
    <p><descr>renders the given text in the specified rectangle, with the given alignment (horizontal: 0 = left, 1 = center, 2 = right; vertical: 0 = top, 1 = center, 2 = bottom) and <I>multiLine</I> parameters.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="underlay">
<h4>3.1.2.3 Underlay</h4>
</a>The <b><class>Underlay</class></b> class has an unique implicit object. It
represents an hidden layer used to render scenes to textures. Since there is a
single <b>Underlay</b> object, its methods are called without specifying any
object. They are:
<ul>
  <li><b><com>addToUnderlay(</b><i>UnderlayObject</i> <b>object)</com></b>
    <p><descr>adds a new object to the underlay layer.</descr>
    </p>
  <li><b><com>removeFromUnderlay(</b><i>UnderlayObject</i> <b>object)</com></b>
    <p><descr>removes an object from the underlay layer.</descr>
    </p>
  <li><b><com>emptyUnderlay()</com></b>
    <p><descr>removes all the object form the underlay layer.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="filesystem">
<h4>3.1.3 FileSystem</h4>
</a>The <b><class>FileSystem</class></b> class defines the methods to access the
file system. Since there is a single <b>FileSystem</b> object, its methods are
called without specifying any object. They are:
<ul>
  <li><i><com>boolean</i> <b>fileExists(</b><i>string</i> <b>fileName)</com></b>
    <p><descr>returns <i>false</i> if the file named <i>fileName</i> does not
    exists.</descr>
  <li><i><com>table</i> <b>listFiles(</b><i>string</i> <b>filter</b> =
    &quot;*.*&quot;)</com>
    <p><descr>returns a table containing the names of all the files that satisfy
    the filter.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="textfile">3.1.3.1 TextFile</a></h5>
The <b><class>TextFile</class></b> class represents a text file in the file
system. For security reasons no way is provided to access binary files, or to
write files outsite the folder of the program, or to write files without the
&quot;<i>.txt</i>&quot; extension.<br>
<b>Note</b>: <i>Security reasons on the LUA interface where dropped and moved to
other interfaces. In fact in the current version, LUA scripts can read and write
files using standard IO functions.</i>
<ul>
  <li><i><com>TextFile</i> <b>ReadableTextFile(</b><i>string</i> <b>fileName)</com></b>
    <p><descr>opens a text file for reading. If any error occurs, <i>nil</i> is
    returned.</descr></p>
  <li><i><com>TextFile</i> <b>WritableTextFile(</b><i>string</i> <b>fileName)</com></b>
    <p><descr>creates a text file for writing. If the file exists, it is
    overwritten. If any error occurs, <i>nil</i> is returned.</descr></p>
  <li><i><com>TextFile</i> <b>AppendableTextFile(</b><i>string</i> <b>fileName)</com></b>
    <p><descr>opens a text file for appending. If the file does not exist, it is
    created. If any error occurs, <i>nil</i> is returned.</descr></p>
  <li><i><com>TextFile</i>:<b>delete()</com><br>
    <br>
    </b><descr>deletes the file from memory and closes it. Called automatically
    when the local variable that holds the object goes out of scope.</descr>
  <li><i><com>boolean TextFile</i>:<b>write(</b><i>string</i> <b>text)</com><br>
    <br>
    </b><descr>writes the specified <i>text</i> to the file. If any error
    occurs, <i>false</i> is returned.</descr>
  <li><i><com>string TextFile</i>:<b>read()</com></b><br>
    <br>
    </descr>reads a string from the file. If any error occurs, <i>nil</i> is
    returned.</descr>
  <li><i><com>TextFile</i>:<b>close()</com><br>
    <br>
    </b><descr>closes the file. The object is no longer valid.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="meshfile">3.1.3.2 MeshFile</a></h5>
The <b><class>MeshFile</class></b> class represents a file in the file system
from which one or more meshes, with related materials, can be loaded.
<ul>
  <li><i><com>MeshFile</i> <b>MeshFile(</b><i>string</i> <b>fileName)</com></b>
    <p><descr>opens a mesh file for reading. If any error occurs, <i>nil</i> is
    returned.</descr>
    <p>&nbsp;
  <li><i><com>MeshFile</i>:<b>delete()</com></b>
    <p><descr>deletes the file from memory (only the object, not the physical
    file in the file system) and closes it. Called automatically when the local
    variable that holds the object goes out of scope.
    <p>deletes the file from memory (only the object, not the physical file in
    the file system) and closes it. Called automatically when the local variable
    that holds the object goes out of scope.</descr>
    <p>&nbsp;
  <li><i><com>Objects</i> <i>MeshFile</i>:<b>getMeshes()</com></b>
    <p><descr>returns a collection of meshes.</descr>
    <p>&nbsp;
  <li><i><com>Mesh</i> <i>MeshFile</i>:<b>getMesh()</com></b>
    <p><descr>returns a mesh..</descr>
    <p>&nbsp;
  <li><i><com>Objects</i> <i>MeshFile</i>:<b>getShaderMeshes()</com></b>
    <p><descr>returns a collection of meshes (with a <i>shaderShape</i>
    attached).</descr>
    <p>&nbsp;
  <li><i><com>ShaderMesh</i> <i>MeshFile</i>:<b>getShaderMesh()</com></b>
    <p><descr>returns a mesh (with a <i>shaderShape</i> attached).</descr>
    <p>&nbsp;
  <li><i><com>Objects</i> <i>MeshFile</i>:<b>getBumpedMeshes()</com></b>
    <p><descr>returns a collection of bumped meshes.</descr>
    <p>&nbsp;
  <li><i><com>BumpedMesh</i> <i>MeshFile</i>:<b>getBumpedMesh()</com></b>
    <p><descr>returns a bumped mesh.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="samplefile">3.1.3.3 SampleFile</a></h5>
The <b><class>SampleFile</class></b> class represents a file in the file system
from which a sound sample (2D or 3D) can be loaded.
<ul>
  <li><i><com>SampleFile</i> <b>SampleFile(</b><i>string</i> <b>fileName)</com></b>
    <p><descr>opens a sound sample file for reading. If any error occurs, <i>nil</i>
    is returned.</descr>
    <p>&nbsp;
  <li><i><com>SampleFile</i>:<b>delete()</com></b>
    <p><descr>deletes the file from memory (only the object, not the physical
    file in the file system) and closes it. Called automatically when the local
    variable that holds the object goes out of scope.</descr>
    <p>&nbsp;
  <li><i><com>Sample</i> <i>SampleFile</i>:<b>getSample()</com></b>
    <p><descr>returns a sound sample.</descr>
    <p>&nbsp;
  <li><i><com>Sample3D</i> <i>SampleFile</i>:<b>getSample3D()</com></b>
    <p><descr>returns a 3d sound sample.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="joystick">
<h4>3.1.4 Joystick</h4>
</a>The <b><class>Joystick</class></b> class defines the methods to access the
joysticks connected to the system.
<ul>
  <li><com><i>number</i> <b>getJoysticksCount()</b></com>
    <p><descr>returns the number of joysticks connected to the system.</descr>
    <p>&nbsp;
  <li><com><i>string</i> <b>getJoystickName(</b><i>number</i> <b>index</b><b>)</b></com>
    <p><descr>returns the system name of the joystick corresponding to <i>index</i>.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <b>isJoystickOpened(</b><i>number</i> <b>index</b><b>)</b></com>
    <p><descr>returns true if the joystick corresponding to <i>index</i> is
    already opened.</descr>
    <p>&nbsp;
  <li><com><i>Joystick</i> <b>Joystick(</b><i>number</i> <b>index)</b></com>
    <p><descr>initializes and opens the joystick number <i>index</i> returning
    its reference.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>Joystick</i>:<b>getIndex(</b><b>)</b></com>
    <p><descr>returns the index of this joystick.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>Joystick</i>:<b>getAxesCount(</b><b>)</b></com>
    <p><descr>returns the number of axes of this joystick.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>Joystick</i>:<b>getBallsCount(</b><b>)</b></com>
    <p><descr>returns the number of trackballs of this joystick.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>Joystick</i>:<b>getHatsCount(</b><b>)</b></com>
    <p><descr>returns the number of hats of this joystick.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>Joystick</i>:<b>getButtonsCount(</b><b>)</b></com>
    <p><descr>returns the number of buttons of this joystick.</descr>
    <p>&nbsp;
  <li><com><b>updateJoysticks(</b><b>)</b></com>
    <p><descr>must be called to update the input status of all the opened
    joysticks.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>Joystick</i>:<b>getAxis(</b><i>number</i> <b>index</b><b>)</b></com>
    <p><descr>returns the absolute value of the axis corresponding to <i>index</i>.<br>
    <i><b>SDL manual says:</b> On most modern joysticks the X axis is usually
    represented by axis 0 and the Y axis by axis 1. The value returned by
    SDL_JoystickGetAxis is a signed integer (-32768 to 32768) representing the
    current position of the axis, it maybe necessary to impose certain
    tolerances on these values to account for jitter. It is worth noting that
    some joysticks use axes 2 and 3 for extra buttons</i>
    </descr>
    <p>&nbsp;
  <li><com><i>boolean</i> up, <i>boolean</i> right, <i>boolean</i> down, <i>boolean</i>
    left = <i>Joystick</i>:<b>getHat(</b><i>number</i> <b>index</b><b>)</b></com>
    <p><descr>returns the direction of the hat corresponding to <i>index</i>.
    More than one of the returned values may be set.
    <p>&nbsp;
  <li><com><i>boolean</i> <i>Joystick</i>:<b>isButtonPressed(</b><i>number</i> <b>index</b><b>)</b></com>
    <p><descr>returns true if the button corresponding to <i>index</i> is
    pressed.
    <p>&nbsp;
  <li><com><i>number</i> dx, <i>number</i> dy = <i>Joystick</i>:<b>getBall(</b><i>number</i>
    <b>index</b><b>)</b></com>
    <p><descr>returns the relative movement of the trackball corresponding to <i>index</i>
    since the last call to this function.
    <p>&nbsp;
  <li><com><i>Joystick</i>:<b>delete()</b></com>
    <p><descr>closes the joystick and deletes its reference.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="audiocd">
<h4>3.1.5 AudioCd</h4>
</a>The <b><class>AudioCd</class></b> class defines the methods to access the CD
drives available.
<ul>
  <li><com><i>number</i> <b>getCdDrivesCount()</b></com>
    <p><descr>returns the number of CD drives available.</descr>
    <p>&nbsp;
  <li><com><i>string</i> <b>getCdName(</b><i>number</i> <b>index</b><b>)</b></com>
    <p><descr>returns the system name of the CD corresponding to <i>index</i>.</descr>
    <p>&nbsp;
  <li><com><i>AudioCd</i> <b>AudioCd(</b><i>number</i> <b>index)</b></com>
    <p><descr>initializes and opens the CD number <i>index</i> returning its
    reference.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>AudioCd</i>:<b>isEmpty(</b><b>)</b></com>
    <p><descr>returns true if the CD drive is empty.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>AudioCd</i>:<b>isPlaying(</b><b>)</b></com>
    <p><descr>returns true if the CD drive is playing.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>AudioCd</i>:<b>isPaused(</b><b>)</b></com>
    <p><descr>returns true if the CD drive is paused.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>AudioCd</i>:<b>getTracksCount(</b><b>)</b></com>
    <p><descr>returns the number of tracks on the CD.</descr>
    <p>&nbsp;
  <li><com><i>number</i> track, <i>number</i> frame = <i>AudioCd</i>:<b>getCurrentTrack(</b><b>)</b></com>
    <p><descr>returns the current track and the current frame in the track.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> isAudioTrack, <i>number</i> length, <i>number</i>
    offset = <i>AudioCd</i>:<b>getTrackInfo(</b><i>number</i> <b>index</b><b>)</b></com>
    <p><descr>returns information about the track corresponding to <i>index</i>.
    The <i>isAudioTrack</i> soecifies if the track is audio or data, <i>length</i>
    gives its length is frames (there are 75 frames per second) and <i>offset</i>
    its offset in frames.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>AudioCd</i>:<b>play(</b><i>number</i> <b>start</b>,
    <i>number</i> <b>length</b><b>)</b></com>
    <p><descr>plays the CD from frame <i>start</i> for <i>length</i> frames.
    Returns true on success.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>AudioCd</i>:<b>playTracks(</b><i>number</i> <b>startTrack</b>,
    <i>number</i> <b>tracksCount</b>, <i>number</i> <b>startFrame</b> = 0, <i>number</i>
    <b>framesCount</b> = 0<b>)</b></com>
    <p><descr><i><b>SDL manual says:</b> plays the given CD starting at track 'startTrack',
    for 'tracksCount' tracks. 'startFrame' is the frame offset, from the
    beginning of the 'startTrack', at which to start. 'framesCount' is the frame
    offset, from the beginning of the last track (startTrack+tracksCount), at
    which to end playing.</i> Returns true on success.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>AudioCd</i>:<b>pause(</b><b>)</b></com>
    <p><descr>pauses the CD while playing. Returns true on success.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>AudioCd</i>:<b>resume(</b><b>)</b></com>
    <p><descr>resumes the CD after a pause. Returns true on success.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>AudioCd</i>:<b>stop(</b><b>)</b></com>
    <p><descr>stops the CD while playing. Returns true on success.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>AudioCd</i>:<b>eject(</b><b>)</b></com>
    <p><descr>ejects the CD. Returns true on success.</descr>
    <p>&nbsp;
  <li><com><i>AudioCd</i>:<b>delete()</b></com>
    <p><descr>closes the CD-Rom drive and deletes its reference.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="background">
<h3>3.2 Background</h3>
</a>The <b><class>Background</class></b> class extends <b><parent>Reference</parent></b>
and inherits all its methods. It groups all the objects used to render the sky
of the application. There are several constructors that create different kinds
of sky, but all of them is of type <b>Background</b>: They are <b>Sky</b>, <b>MirroredSky</b>
and <b>StarField</b>, while <b>HalfSky</b> and <b>SkyDome</b> extends this class
to add other methods.
<ul>
  <li><i><com>Background</i>:<b>setColor(</b><i>number</i> <b>red, </b><i>number</i>
    <b>green, </b><i>number</i> <b>blue)</com></b>
    <p><descr>changes the color of the background (color components range from 0
    to 1).</descr>
    <p>&nbsp;
  <li><i><com>Background</i>:<b>delete()</com></b>
    <p><descr>deletes the background from memory. Normally the programmer does
    not need to call this function, in fact the background is owned by the world
    and it is its responsibility to delete it when necessary. This method is
    useful only when the programmer sets the background using the function <i>setBackground()</i>
    with a <i>false</i> as second argument.</descr>
    <p>&nbsp;
  <li><i><com>Background</i> <b>Sky(</b><i>table</i> <b>texturesTable)</com></b>
    <p><descr>creates a background of the sky box genre. It needs 6 textures to
    map the 6 faces of a cube in the order top, left, front, right, back,
    bottom.</descr>
    <p>&nbsp;
  <li><i><com>Background</i> <b>MirroredSky(</b><i>table</i> <b>texturesTable)</com></b>
    <p><descr>creates a background of the sky box genre. The top of the box is
    mirrored at the bottom. It needs 5 textures to map the 5 (half)-faces of a
    cube in the order top, left, front, right, back. Useful to simulate
    reflective terrains.</descr>
    <p>&nbsp;
  <li><i><com>Background</i> <b>StarField(</b><i><br>
&nbsp;&nbsp;&nbsp; number</i> <b>radius, </b><i>number</i> <b>starsCount, </b><i>Texture</i>
    <b>skyObjectsTexture </b>= nil<b>,<br>
&nbsp;&nbsp;&nbsp;&nbsp; </b><i>number</i> <b>skyObjectsSize </b>= 0<b>, </b><i>boolean</i>
    <b>blend </b>= false<b><br>
    )</com></b>
    <p><descr>creates a background of the star field genre. The stars are
    rendered as points primitives and, if a texture is specified, a series of 16
    sky objects (nebulae, galaxies etc.) are taken from a texture and rendered
    casually. The <i>radius</i> is the distance of the points from the camera; <i>starsCount</i>
    in the number of stars rendered; <i>skyObjectSize</i> is the lenght of the
    side of the 16 sky objects; <i>blend</i> means that the star field must be
    blended with other backgrounds (the latter argument is considered <b>false</b>
    if omitted).</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="halfsky">
<h4>3.2.0 HalfSky</h4>
</a>The <b><class>HalfSky</class></b> class extends <b><parent>Background</parent></b>
and inherits all its methods. It's the same as The <b>MirroredSky</b>
class, but the mirror effect is replaced by a uniform ground color.
<ul>
  <li><i><com>HalfSky</i> <b>HalfSky(</b><i>table</i> <b>texturesTable)</com></b>
    <p><descr>creates a background of the sky box genre. The top of the box is
    textured, while the bottom side is rendered using a uniform color. It needs
    5 textures to map the 5 (half)-faces of a cube in the order front, left,
    back, right, top. Useful to simulate transparent terrains.</descr>
    <p>&nbsp;
  <li><i><com>HalfSky</i>:<b>setGroundColor(</b><i>number</i> <b>red,</b> <i>number</i>
    <b>green,</b> <i>number</i> <b>blue)</com></b>
    <p><descr>sets the current ground color of the <i>HalfSky</i> (color
    components range from 0 to 1).</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="skydome">
<h4>3.2.1 SkyDome</h4>
</a>The <b><class>SkyDome</class></b> class extends <b><parent>Background</parent></b>
and inherits all its methods. It is rendered like an emisphere with color
gradients based on atmospheric effects.
<ul>
  <li><i><com>SkyDome</i> <b>SkyDome(</b><i>number</i> <b>meridians</b> = 24, <i>number</i>
    <b>parallels</b> = 6, <i>number</i> <b>radius</b> = 100<b>)</com></b>
    <p><descr>creates a background of the sky dome genre. The dome is rendered
    as an emisphere subdivided in meridians and parallels.</descr>
    <p>&nbsp;
  <li><i><com>SkyDome</i>:<b>setAtmosphere(</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>red,</b> <i>number</i> <b>green,</b> <i>number</i>
    <b>blue</b>,<br>
    <i>number</i> <b>height</b>, <i>number</i> <b>density</b>,<br>
    <i>number</i> <b>minDegrees</b>, <i>number</i> <b>maxDegrees</b><br>
    <b>)</com></b>
    <p><descr>sets the atmosphere parameters (color, height - normalized at 1 -
    and density). The <i>minDegrees</i> and <i>maxDegrees</i> are referred to
    the angle in degrees of the sun over the horizon: At <i>minDegrees</i> the
    atmosphere intensity has a minimum, while at <i>maxDegrees</i> has a
    maximum. Default is (0.125,0.125,1, 1, 0.9, 0,10).</descr>
    <p>&nbsp;
  <li><i><com>SkyDome</i>:<b>setHaze(</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>red,</b> <i>number</i> <b>green,</b><br>
    <i>number</i> <b>blue</b>, <i>number</i> <b>height</b>, <i>number</i> <b>density</b>,<br>
    <i>number</i> <b>minDegrees</b>, <i>number</i> <b>maxDegrees</b><br>
    <b>)</com></b>
    <p><descr>sets the haze parameters (color, height - normalized at 1 - and
    density). The <i>minDegrees</i> and <i>maxDegrees</i> are referred to the
    angle in degrees of the sun over the horizon: At <i>minDegrees</i> the haze
    intensity has a minimum, while at <i>maxDegrees</i> has a maximum. Default
    is (0.9,0.9,0.9, 0.2,0.8, -1,3).</descr>
    <p>&nbsp;
  <li><i><com>SkyDome</i>:<b>setRedShift(</b><i>number</i> <b>minDegrees</b>, <i>number</i>
    <b>maxDegrees)</com></b>
    <p><descr>sets the red shift parameters. The <i>minDegrees</i> and <i>maxDegrees</i>
    are referred to the angle in degrees of the sun over the horizon: At <i>minDegrees</i>
    the red shift intensity has a maximum (the opposite of haze and atmosphere),
    while at <i>maxDegrees</i> has a minimum. Default is (-8,8).</descr>
    <p>&nbsp;
  <li><i><com>SkyDome</i>:<b>setSun(</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>red,</b> <i>number</i> <b>green,</b> <i>number</i>
    <b>blue</b>, <i>number</i> <b>intensity</b>,<br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>dirX</b>, <i>number</i> <b>dirY</b>, <i>number</i>
    <b>dirZ</b><br>
    )</com>
    <p><descr>sets the sun parameters (color, intensity and direction). Default
    is (1,1,1, 1, 0,0.707,0.707).</descr>
    <p>&nbsp;
  <li><i><com>number</i> red, <i>number</i> green, <i>number</i> blue = <i>SkyDome</i>:<b>getSunColor()</com></b>
    <p><descr>returns the current color of the sun.</descr>
    <p>&nbsp;
  <li><i><com>number</i> red, <i>number</i> green, <i>number</i> blue = <i>SkyDome</i>:<b>getFogColor()</com></b>
    <p><descr>returns the color of the fog.</descr>
    <p>&nbsp;
  <li><i><com>number</i> red, <i>number</i> green, <i>number</i> blue = <i>SkyDome</i>:<b>getCloudColor()</com></b>
    <p><descr>returns the color of the clouds.</descr>
    <p>&nbsp;
  <li><i><com>SkyDome</i>:<b>setMirrored(</b><i>boolean</i> <b>mirrored</b> =
    true<b>)</com></b>
    <p><descr>specifies if the sky dome must be rendered with a mirrored image.</descr>
    <p>&nbsp;
  <li><i><com>SkyDome</i>:<b>update(</b><b>)</com></b>
    <p><descr>updates the parameters of this sky dome.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="stellarium">
<h4>3.2.2 Stellarium</h4>
</a>The <b><class>Stellarium</class></b> class extends <b><parent>Background</parent></b>
and inherits all its methods. It is a realistic day/night sky renderer that uses the real position of planet and stars. This planetarium is implemented thanks to the "<i>Stellarium 0.4.7</i>" library.
<br>Because of the particularities of the library, it's possible to create only an instance of this class at a time. Also different viewports will show the same view of the sky instead of different views as expected.
<ul>
  <li><com><i>Stellarium</i> <b>Stellarium(</b><b>)</b></com>
    <p><descr>creates a background of the <I>Stellarium</I> genre. It includes a lot of features available through the following functions.</descr></p>
  <li><com><I>number</I> <i>Stellarium</i>:<b>getSkyBrightness(</b><b>)</b></com>
    <p><descr>returns the brightness of the sky.</descr></p>
  <li><com><I>number</I> dirX, <I>number</I> dirY, <I>number</I> dirZ = <i>Stellarium</i>:<b>getSunDirection(</b><b>)</b></com>
    <p><descr>returns the direction of the sun.</descr></p>
  <li><com><i>Stellarium</i>:<b>setStarTwinkleAmount(</b><I>number</I> <B>ta</B><b>)</b></com>
    <p><descr>sets the star twinkle amount. The default value is 1.5.</descr></p>
  <li><com><i>Stellarium</i>:<b>setStarScale(</b><I>number</I> <B>s</B><b>)</b></com>
    <p><descr>sets the star scaling factor. The default value is 3.8.</descr></p>
  <li><com><i>Stellarium</i>:<b>setShowStars(</b><I>boolean</I> <B>s</B> = true<b>)</b></com>
    <p><descr>sets the display settings of stars. If true the stars are shown. The default value is true.</descr></p>
  <li><com><i>Stellarium</i>:<b>setShowStarsName(</b><I>boolean</I> <B>s</B> = true<b>)</b></com>
    <p><descr>sets the display settings of the name of stars. If true the names are shown. The default value is false.</descr></p>
  <li><com><i>Stellarium</i>:<b>setMaxMagnitudeStarsName(</b><I>number</I> <B>mag</B><b>)</b></com>
    <p><descr>sets the maximum magnitude of stars the name of which is shown. The default value is 1.5.</descr></p>
  <li><com><i>Stellarium</i>:<b>setShowPlanets(</b><I>boolean</I> <B>s</B> = true<b>)</b></com>
    <p><descr>sets the display settings of planets. If true the planets are shown. The default value is true.</descr></p>
  <li><com><i>Stellarium</i>:<b>setShowPlanetsHint(</b><I>boolean</I> <B>s</B> = true<b>)</b></com>
    <p><descr>sets the display settings of the name of planets. If true the names are shown. The default value is false.</descr></p>
  <li><com><i>Stellarium</i>:<b>setShowGround(</b><I>boolean</I> <B>s</B> = true<b>)</b></com>
    <p><descr>sets the display settings of the ground. If true the ground is shown. The default value is false.</descr></p>
  <li><com><i>Stellarium</i>:<b>setShowHorizon(</b><I>boolean</I> <B>s</B> = true<b>)</b></com>
    <p><descr>sets the display settings of the horizon. If true the horizon is shown. The default value is false.</descr></p>
  <li><com><i>Stellarium</i>:<b>setShowFog(</b><I>boolean</I> <B>s</B> = true<b>)</b></com>
    <p><descr>sets the display settings of the fog. If true the fog is shown. The default value is false.</descr></p>
  <li><com><i>Stellarium</i>:<b>setShowAtmosphere(</b><I>boolean</I> <B>s</B> = true<b>)</b></com>
    <p><descr>sets the display settings of the atmosphere. If true the atmosphere is shown. The default value is true.</descr></p>
  <li><com><i>Stellarium</i>:<b>setShowConstellations(</b><I>boolean</I> <B>s</B> = true<b>)</b></com>
    <p><descr>sets the display settings of the constellations. If true the constellations are shown. The default value is false.</descr></p>
  <li><com><i>Stellarium</i>:<b>setShowConstellationsName(</b><I>boolean</I> <B>s</B> = true<b>)</b></com>
    <p><descr>sets the display settings of the names of constellations. If true names are shown. The default value is false.</descr></p>
  <li><com><i>Stellarium</i>:<b>setShowAzimutalGrid(</b><I>boolean</I> <B>s</B> = true<b>)</b></com>
    <p><descr>sets the display settings of the azimutal grid. If true the azimutal grid is shown. The default value is false.</descr></p>
  <li><com><i>Stellarium</i>:<b>setShowEquatorialGrid(</b><I>boolean</I> <B>s</B> = true<b>)</b></com>
    <p><descr>sets the display settings of the equatorial grid. If true the equatorial grid is shown. The default value is false.</descr></p>
  <li><com><i>Stellarium</i>:<b>setShowEquator(</b><I>boolean</I> <B>s</B> = true<b>)</b></com>
    <p><descr>sets the display settings of the equator. If true the equator shown. The default value is false.</descr></p>
  <li><com><i>Stellarium</i>:<b>setShowEcliptic(</b><I>boolean</I> <B>s</B> = true<b>)</b></com>
    <p><descr>sets the display settings of the ecliptic. If true the ecliptic is shown. The default value is false.</descr></p>
  <li><com><i>Stellarium</i>:<b>setShowCardinalPoints(</b><I>boolean</I> <B>s</B> = true<b>)</b></com>
    <p><descr>sets the display settings of the cardinal points. If true the cardinal points are shown. The default value is false.</descr></p>
  <li><com><i>Stellarium</i>:<b>setShowMilkyWay(</b><I>boolean</I> <B>s</B> = true<b>)</b></com>
    <p><descr>sets the display settings of the milky way. If true the milky way is shown. The default value is true.</descr></p>
  <li><com><i>Stellarium</i>:<b>setLocation(</b><I>number</I> <B>longitude</B>, <I>number</I> <B>latitude</B>, <I>number</I> <B>altitude</B>, <I>number</I> <B>timeZone</B><b>)</b></com>
    <p><descr>sets the location of the view point. The default value is latitude 6.45, longitude 48.5, altitude 60 meters, time zone 2 (Paris).</descr></p>
  <li><com><I>number</I> <i>Stellarium</i>:<b>setDate(</b><I>number</I> <B>year</B>, <I>number</I> <B>month</B>, <I>number</I> <B>day</B>, <I>number</I> <B>hour</B> = 0, <I>number</I> <B>min</B> = 0, <I>number</I> <B>sec</B> = 0<b>)</b></com>
    <p><descr>sets the current date and returns the corresponding julian date (in days and fraction of day). The default value is the current date.</descr></p>
  <li><com><i>Stellarium</i>:<b>setTime(</b><I>number</I> <B>t</B><b>)</b></com>
    <p><descr>sets the julian date (in days and fraction of day). The default value is the current time.</descr></p>
  <li><com><i>Stellarium</i>:<b>addTime(</b><I>number</I> <B>t</B><b>)</b></com>
    <p><descr>adds the given time (in fraction of day) to the current julian date.</descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="cloudlayer">
<h4>3.2.3 CloudLayer</h4>
</a>The <b><class>CloudLayer</class></b> class extends <b><parent>Void</parent></b>
and groups all the planes used to render and animated one or more cloud layers.
<ul>
  <li><i><com>CloudLayer</i> <b>CloudLayer(</b><br>
&nbsp;&nbsp;&nbsp;<i>Material</i> <b>material,</b> <i>number</i> <b>size,</b>
    <i>number</i> <b>height,</b> <i>number</i> <b>tiles</b> = 1<br>
    <b>)</com></b>
    <p><descr>creates a cloud layer given its material, size, height and
    (optionally) the number of repetitions of the applied texture.</descr>
    <p>&nbsp;
  <li><i><com>CloudLayer</i>:<b>setColor(</b><i>number</i> <b>red,</b> <i>number</i>
    <b>green,</b> <i>number</i> <b>blue,</b> <i>number</i> <b>alpha</b> = 1<b>)</com></b>
    <p><descr>changes the color of the cloud layer (color components range from
    0 to 1). This function affects the emissive component of the material
    attached to the object and the material should have the enlighted property
    set to false, to be really effective.</descr>
    <p>&nbsp;
  <li><i><com>CloudLayer</i>:<b>setSpeed(</b><i>number</i> <b>speedX,</b> <i>number</i>
    <b>speedZ)</com></b>
    <p><descr>sets the components of the velocity of the cloud layer.</descr>
    <p>&nbsp;
  <li><i><com>CloudLayer</i>:<b>delete()</com></b>
    <p><descr>deletes the cloud layer from memory. Normally the programmer does
    not need to call this function, in fact the clod layer is owned by the world
    and it is its responsibility to delete it when necessary. This method is
    useful only when the programmer sets the cloud layer using the function <i>setCloudLayer()</i>
    with a <i>false</i> as second argument.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="terrain">
<h3>3.3 Terrain</h3>
</a>The <b><class>Terrain</class></b> class extends <b><parent>Shadowed</parent></b>
and inherits all its methods. It is used to render a world ground. There are
several constructors that create different kinds of terrain. Some of them are of
type <b>Terrain</b> and their constructors are listed here: They are <b>FlatTerrain</b>
and <b>Ocean</b>.&nbsp;
<ul>
  <li><i><com>Terrain</i>:<b>setReflective(</b><i>boolean</i><b> r</b> = true<b>)</com></b>
    <p><descr>makes the terrain reflective (objects above the terrain are
    replicated underneath it to simulate reflections).</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Terrain</i>:<b>isReflective()</com></b>
    <p><descr>returns <b>nil</b> if the terrain is not reflective.</descr>
    <p>&nbsp;
  <li><i><com>Terrain</i>:<b>setTransparent(</b><i>boolean</i><b> t</b> = true<b>)</com></b>
    <p><descr>makes the terrain transparent (objects underneath the terrain are
    visible in transparency).</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Terrain</i>:<b>isTransparent()</com></b>
    <p><descr>returns <b>nil</b> if the terrain is not transparent.</descr>
    <p>&nbsp;
  <li><i><com>Terrain</i>:<b>setOpaque()</com></b>
    <p><descr>removes the reflective or transparent attribute from the terrain.</descr>
    </p>
  <li><i><com>Terrain</i> <b>FlatTerrain(</b><i>Material</i> <b>material,</b> <i>number</i>
    <b>size,</b> <i>number</i> <b>tiles)</com></b>
    <p><descr>creates a flat terrain with the given material, size (the length
    of the side) and number of tiles (repetitions of the main texture of the
    material). This type of terrain support a simplified kind of shadows.</descr>
    <p>&nbsp;
  <li><i><com>Terrain</i> <b>Ocean(</b><br>
&nbsp;&nbsp;&nbsp;<i>Material</i> <b>material,</b> <i>number</i> <b>waveAmplitude,</b>
    <i>number</i> <b>waveDisplacement,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>windVelocityX,</b> <i>number</i> <b>windVelocityZ,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>surfaceTileSide,</b> <i>number</i> <b>gridSize,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>surfaceTilesCount,</b> <i>number</i> <b>textureTilesCount</b><br>
    <b>)</com></b>
    <p><descr>creates a wavy surface using FFT techniques with the given
    material, wave amplitude (maximum height of a single wave component), wave
    displacement (maximum distance of the real vertex compared to a regular
    grid), wind velocity (only X and Z components are relevant), surface tile
    side (length od the side of a single tile to be repeated multiple times),
    grid size (number of grid points that makes up a single tile - must be a
    power of 2), surface tiles count (number of tiles that makes a complete side
    of the surface) and texture tiles count (number of repetition of the main
    texture of the material). This terrain does not support shadows yet.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<h4><a name="tiledterrain">3.3.1 TiledTerrain</a></h4>
The <b><class>TiledTerrain</class></b> class represents a flat terrain with
square tiles attached. It extends <b><parent>Terrain</parent></b> and inherits all its methods.
<ul>
  <li><i><com>TiledTerrain</i> <b>TiledTerrain(</b><i>Material</i> <b>material</b>,
    <i>number</i> <b>tilesInTextureSide</b>, <i>Image</i> <b>tilesImage</b>, <i>number</i>
    <b>patchSideLength</b>, <i>number</i> <b>tilesInPatchSide</b> = 1, <i>number</i>
    <b>defaultTile</b> = -1<b>)</com></b>
    <p><descr>creates a tiled terrain with the given <i>material</i> (its
    diffuse texture stores the tiles in a square grid of a maximum of 8x8
    different tiles), <i>tilesInTextureSide</i> (the number of tiles stored
    along a side of the material diffuse texture - 64 is the maximum value), <i>tileImage</i>
    (a grayscale image that specifies the tile at each region of the terrain:
    the first 6 least significative bits specify one of the 8x8 tiles, while to
    2 most significative bits select one of 4 rotations - 0, 90, 180, 270
    degrees), <i>patchSideLength</i> (the length of the side of one patch of
    terrain after which it may repeat periodically), <i>tilesInPatchSide</i>
    (the number of tiles along the side of a patch), <i>defaultTile</i> (the
    tile that is used outside the tiles mapping - if the value is negative, the
    mapping repeats periodically).</descr>
    <p>&nbsp;
  <li><i><com>TiledTerrain</i>:<b>setMaterial(</b><i>Material</i> <b>material)</com></b>
    <p><descr>sets the material of the terrain.</descr>
    <p>&nbsp;
  <li><i><com>Material</i> <i>TiledTerrain</i>:<b>getMaterial()</com></b>
    <p><descr>returns the material of the terrain.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>TiledTerrain</i>:<b>getTilesWidth()</com></b>
    <p><descr>returns the number of tiles along the X direction of the terrain.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>TiledTerrain</i>:<b>getTilesHeight()</com></b>
    <p><descr>returns the number of tiles along the Z direction of the terrain.</descr>
    <p>&nbsp;
  <li><i><com>number</i> tileX, <i>number</i> tileY, <i>number</i> rotaz = <i>TiledTerrain</i>:<b>getTileAtGrid(</b><i>number</i>
    <b>x,</b> <i>number</i> <b>z)</com></b>
    <p><descr>returns the tile at the <i>(x,z)</i> position in the grid of
    tiles. The values <i>tileX</i> and <i>tileY</i> specify the type of the tile
    (position in the texture), while <i>rotaz</i> specifies one of 4 rotations
    of 90 degrees.</descr>
    <p>&nbsp;
  <li><i><com>TiledTerrain</i>:<b>setTileAtGrid(</b><i>number</i> <b>x,</b> <i>number</i>
    <b>z</b>, <i>number</i> <b>tileX</b>, <i>number</i> <b>tileY</b>, <i>number</i>
    <b>rotaz)</com></b>
    <p><descr>sets the tile at the <i>(x,z)</i> position in the grid of tiles.
    The values <i>tileX</i> and <i>tileY</i> specify the type of the tile
    (position in the texture), while <i>rotaz</i> specifies one of 4 rotations
    of 90 degrees.</descr>
    <p>&nbsp;
  <li><i><com>Image</i> <i>TiledTerrain</i>:<b>getImageFromTiles()</com></b>
    <p><descr>returns a grayscale image with the tiles encoded.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h4><a name="patches">3.3.2 Patches</a></h4>
The <b><class>Patches</class></b> class represents a particular kind of terrain,
more complex than <b>FlatTerrain</b> or <b>Ocean</b>, in fact it extends <b><parent>Terrain</parent></b>
and inherits all its methods, but also adds new ones. It is similar to an height
field, but it is tiled, so it should be designed with matching opposite
boundaries.
<ul>
<li><I><com>Patches</i> <b>Patches(</b><i>Image</i> <b>heightMap</b>, <i>Image</i>
  <b>colorMap</b>, <i>Material</i> <b>material</b>,<br>
  &nbsp;&nbsp; <i>number</i>  <b>sideLength</b>, <i>number</i> <b>height</b>, <i>number</i> <b>patchesCount</b> = 1<br>
  &nbsp;&nbsp; <i>number</i> <b>coarseRepeatsCount</b> = 1, <i>number</i> <b>detailRepeatsCount</b> = 1<br>
  &nbsp;&nbsp; <i>boolean</i> <b>dynamic</b> = false, number</i> <b>heightRepeatsCount</b> = 1<br>
  <b>)</com></b>
  <p><descr>creates a terrain with the given <i>heightMap</i> (a grayscale image that specifies
  the heights of the terrain on a regular square grid), <i>colorMap</i> (the RGB 
  color of the terrain at every point of the previous grid), <i>material</i>
  (the diffuse texture defines a 2D texture that is tiled over all the terrain
  with small random displacements to make it appear less regular and the
  gloss texture specifies another 2D texture that gives more detail to the terrain),
  <i>sideLength</i> (the length of the
  side of the terrain after which it repeats periodically), <i>height</i> (the
  maximum distance from the lowest point of the terrain to the highest), <i>patchesCount</i>
  (the number of different squares that made up the complete terrain),  <i>coarseRepeatsCount</i>
  (the number of times that the coarse texture is repeated on the whole terrain), <i>detailRepeatsCount</i>
  (the number of times that the detail texture is repeated on the whole terrain) and <i>heightRepeatsCount</i>
  (valid only when <i>Texture3D</i> are attached: It is the number of times that the 3D texture is cycled along height).
  If the terrain is <I>dynamic</I>, the meshes are not statically compiled and heights and colors may be changed. Some of the functions below have no effect or return <I>nil</I> if the terrain is not dynamic.</descr>
<p><li><i><com>Patches</i>:<b>setMaterial(</b><i>Material</i> <b>material)</com></b>
<p><descr>sets the material of the patches.</descr>
<p><li><i><com>Material</i>  <i>Patches</i>:<b>getMaterial()</com></b>
  <p><descr>returns the material of the patches.</descr>
<p><li><i><com>number</i> <i>Patches</i>:<b>getHeightAt(</b><i>number</i> <b>x,</b> <i>number</i> <b>z)</com></b>
<p><descr>returns the height of the terrain at the <i>(x,z)</i> position (in the world coordinates).</descr>
<p><li><i><com>number</i> <i>Patches</i>:<b>getGridCount()</com></b>
<p><descr>returns the number of points in the grid of vertexes.</descr>
<p><li><i><com>number</i> <i>Patches</i>:<b>getHeightAtGrid(</b><i>number</i> <b>x,</b> <i>number</i> <b>z)</com></b>
<p><descr>returns the height at the <i>(x,z)</i> position in the grid of heights. The value belongs to the interval 0-255.</descr>
<p><li><i><com>Patches</i>:<b>setHeightAtGrid(</b><i>number</i> <b>x,</b> <i>number</i> <b>z</b>, <i>number</i> <b>h)</com></b>
<p><descr>sets the height at the <i>(x,z)</i> position in the grid of heights. The value must belong to the interval 0-255.</descr>
<p><li><i><com>number</i> r, <i>number</i> g, <i>number</i> b = <i>Patches</i>:<b>getColorAtGrid(</b><i>number</i> <b>x,</b> <i>number</i> <b>z)</com></b>
<p><descr>returns the color at the <i>(x,z)</i> position in the grid of colors. The values belongs to the interval 0-255.</descr>
<p><li><i><com>Patches</i>:<b>setColorAtGrid(</b><i>number</i> <b>x,</b> <i>number</i> <b>z</b>, <i>number</i> <b>r</b>, <i>number</i> <b>g</b>, <i>number</i> <b>b)</com></b>
<p><descr>sets the color at the <i>(x,z)</i> position in the grid of colors. The values must belong to the interval 0-255.</descr>
<p><li><i><com>number</i> nx, <i>number</i> ny, <i>number</i> nz, <i>number</i> dist =  <i>Patches</i>:<b>getLastNormal()</com></b>
<p><descr>returns the last normal (<i>nx, ny, nz</i>) computed during the last <i>getHeightAt()</i> call and the offset of the plane at that point from the origin (<i>dist</i>).</descr>
<p><li><i><com>Image</I> <i>Patches</i>:<b>getImageFromHeights()</com></b>
<p><descr>returns a grayscale image with the heights encoded.</descr>
<p><li><i><com>Image</I> <i>Patches</i>:<b>getImageFromColors()</com></b>
<p><descr>returns a color image with the lightmap colors encoded.</descr>
</p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h4><a name="scenery">3.3.3 Scenery</a></h4>
The <b><class>Scenery</class></b> class extends <b><parent>Shadowed</parent></b>
and inherits all its methods. It represents a scenery that can be added to the
world. The only subclass of <i>Scenery</i> is the <b>Bsp</b> class. To know more
about the <i>BSP</i>s and the format of the files needed to load them (the Quake
III <i>BSP</i> format), read the source code and the data files of the demos.
<ul>
  <li><i><com>Scenery</i>:<b>addFurniture(</b><i>Furniture </i><b>furniture)</com></b>
    <p><descr>adds a furniture to this scenery.</descr><br>
  <li><i></com>Scenery</i>:<b>removeFurniture(</b><i>Furniture </i><b>furniture)</com></b>
    <p><descr>removes a furniture from this scenery.</descr><br>
  <li><i></com>Scenery</i>:<b>empty()</com></b>
    <p><descr>removes all the furnitures from this scenery.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="furniture">3.3.3.0 Furniture</a></h5>
The <b><class>Furniture</class></b> class extends <b><parent>Void</parent></b>
and represents an object that can be added to a <b>Scenery</b>. No functions are
currently defined.
<p><a href="#index">Index</a>
<hr>
<h5><a name="teams">3.3.3.0.1 Teams</a></h5>
The <b><class>Teams</class></b> class represents several teams of bots with all
the necessary objects to fill a <b>Bsp</b> level. This class extends <b><parent>Furniture</parent>
 </b>and can be added to a <b>Scenery</b> container like a <b>Bsp</b> is. If
shadows are enabled for the scenery and a texture with alpha channel is
provided, a simplified kind of shadow appears under the bots.
<ul>
  <li><i><com>Teams </i><b>Teams(<br>
&nbsp;&nbsp;&nbsp; </b><i>number</i> <b>teamsCount,</b><i> number </i><b>teamMatesCount,
    </b><i>Bot</i><b> bot,<br>
&nbsp;&nbsp;&nbsp; </b><i>table </i><b>bodyMaterials, </b><i>table </i><b>torsoMaterials<i>,<br>
&nbsp;&nbsp;&nbsp; </i></b><i>Model</i> <b>sign, </b><i>number </i><b>weaponsCount,
    </b><i>table </i><b>weaponModels,<br>
&nbsp;&nbsp;&nbsp; </b><i>table </i><b>flashModels, </b><i>number</i> <b>lod,
    </b><i>Texture</i> <b>shadowTexture</b> = nil<b>,<br>
    </b>&nbsp;&nbsp; <i>number</i><b> shadowWidth</b> = 0<b>,</b><i> number </i><b>shadowHeight</b>
    = 0<b><br>
    )</com></b>
    <p><descr>creates several teams of bots given: the teams number (<i>teamsCount</i>);
    the number of bots for each team (<i>teamMatesCount</i>); the model of the <i>bot</i>
    (the same for all the teams); the materials to be applied to the body of the
    bots (<i>bodyMaterials</i> - the table must contain a different material for
    every team); the materials to be applied to the torso of the bots (<i>torsoMaterials</i>
    - the table must contain a different material for every team, but the
    argument could be <i>nil</i> if the materials in <i>bodyMaterials</i> must
    be used for torso too); the model for <i>signs</i>; the number of different
    weapons (<i>weaponsCount</i>); the models of the weapons (<i>weaponModels</i>
    - the table must contain a model for every weapon); the models of the
    flashes of the weapons (<i>flashModels</i> - the table must contain a model
    for every weapon); the value of the <i>lod</i> (level of detail) distance
    (if the bot is distant from the camera more than <i>lod</i>, animations are
    no more interpolated); the texture to be used as bots' shadow (<i>shadowTexture</i>
    - value is <i>nil</i> by default, that means no shadow) and the width and
    the height of the shadow (<i>shadowWidth</i> and <i>shadowHeight</i>).</descr>
    </p>
  <li><i><com>number</i> <i>Teams</i>:<b>getTeamsCount()</com></b>
    <p><descr>returns the number of teams.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Teams</i>:<b>getTeamMatesCount()</com></b>
    <p><descr>returns the number of team mates for each team.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Teams</i>:<b>getWeaponsTypeCount()</com></b>
    <p><descr>returns the number of different weapon types available for bots.</descr>
    <p>&nbsp;
  <li><i><com>Bot</i> <i>Teams</i>:<b>getBot()</com></b>
    <p><descr>returns the model of the bot owned by the teams.</descr>
    <p>&nbsp;
  <li><i><com>TeamMate</i> <i>Teams</i>:<b>getTeamMate(</b><i>number </i><b>team,
    </b><i>number </i><b>mate)</com></b>
    <p><descr>returns the team mate corresponding to the given <i>team</i> and <i>mate</i>
    indexes.</descr>
    </p>
  <li><i><com>Teams</i>:<b>setWeaponData(</b><i>WeaponData</i><b> weaponData)</com></b>
    <p><descr>sets the <i>weaponData</i> associated with this team necessary to
    find the positions and status of all the dropped weapons in the level and
    render them. The <i>Teams</i> object does not own the <i>weaponData</i> and
    this must be deleted, when it is no more needed, with a call to its <i>delete()</i>
    method.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="teammate">3.3.3.0.1.1 TeamMate</a></h5>
The <b><class>TeamMate</class></b> class represents a single team mate contained
in a <b>Teams</b> container.
<ul>
  <li><i><com>TeamMate</i>:<b>setStatus(</b><i>number</i> <b>status)</com><br>
    </b><br>
    <descr>sets the status of this team mate (0: normal; 1: has sign; 2: has
    weapon).</descr>
  </li>
  <p>&nbsp;
  <li><i><com>number TeamMate</i>:<b>getStatus()</com><br>
    </b><br>
    <descr>returns the status of this team mate (0: normal; 1: has sign; 2: has
    weapon).</descr>
  </li>
  <p>&nbsp;
  <li><i><com>TeamMate</i>:<b>setDead(</b><i>boolean</i> <b>dead</b> = true<b>)</com><br>
    </b><br>
    <descr>sets the status of this team mate to dead.</descr>
  </li>
  <p>&nbsp;
  <li><i><com>boolean TeamMate</i>:<b>isDead()</com><br>
    </b><br>
    <descr>returns the dead status of this team mate.</descr>
  </li>
  <p>&nbsp;
  <li><i><com>TeamMate</i>:<b>setFlashShown(</b><i>boolean</i> <b>shown</b> =
    true<b>)</com><br>
    </b><br>
    <descr>sets the status of this team mate's weapon flash .</descr>
  </li>
  <p>&nbsp;
  <li><i><com>boolean TeamMate</i>:<b>isDead()</com><br>
    </b><br>
    <descr>returns the status of this team mate's weapon flash.</descr>
  </li>
  <p>&nbsp;
  <li><i><com>number </i>yaw, <i>number </i>pitch =<i> TeamMate</i>:<b>getHeadAngles()</com><br>
    </b><br>
    <descr>returns the yaw and pitch angles of the head.</descr>
  </li>
  <p>&nbsp;
  <li><i><com>TeamMate</i>:<b>setHeadAngles(</b><i>number </i><b>yaw, </b><i>number</i>
    <b>pitch)</com><br>
    </b><br>
    <descr>sets the yaw and pitch angles of the head.</descr>
  </li>
  <p>&nbsp;
  <li><i><com>TeamMate</i>:<b>addHeadAngles(<br>
&nbsp;&nbsp;&nbsp; </b><i>number </i><b>yaw, </b><i>number</i> <b>pitch, </b><i>number</i>
    <b>maxYaw</b> = 0<b>, </b><i>number</i> <b>minYaw</b> = 0<b>,<br>
&nbsp;&nbsp;&nbsp; </b><i>number</i> <b>maxPitch</b>= 0<b>, </b><i>number</i>
    <b>minPitch</b> = 0<b><br>
    )</com><br>
    </b><br>
    <descr>adds the given values to the yaw and pitch angles of the head
    providing that the final values don't exceed the given maximum and minimum
    values.</descr>
  </li>
  <p>&nbsp;
  <li><i><com>number </i>yaw, <i>number </i>pitch =<i> TeamMate</i>:<b>getTorsoAngles()</com><br>
    </b><br>
    <descr>returns the yaw and pitch angles of the torso.</descr>
  </li>
  <p>&nbsp;
  <li><i><com>TeamMate</i>:<b>setTorsoAngles(</b><i>number </i><b>yaw, </b><i>number</i>
    <b>pitch)</com><br>
    </b><br>
    <descr>sets the yaw and pitch angles of the torso.</descr>
  </li>
  <p>&nbsp;
  <li><i><com>TeamMate</i>:<b>addTorsoAngles(<br>
&nbsp;&nbsp;&nbsp; </b><i>number </i><b>yaw, </b><i>number</i> <b>pitch, </b><i>number</i>
    <b>maxYaw</b> = 0<b>, </b><i>number</i> <b>minYaw</b> = 0<b>,<br>
&nbsp;&nbsp;&nbsp; </b><i>number</i> <b>maxPitch</b>= 0<b>, </b><i>number</i>
    <b>minPitch</b> = 0<b><br>
    )</com><br>
    </b><br>
    <descr>adds the given values to the yaw and pitch angles of the torso
    providing that the final values don't exceed the given maximum and minimum
    values.</descr>
  </li>
  <p>&nbsp;
  <li><i><com>TeamMate</i>:<b>setTorsoAnimation(</b><i>Bot </i><b>bot, </b><i>number</i>
    <b>animation)</com><br>
    </b><br>
    <descr>sets the current torso animation given the <i>bot</i> that represents
    this team mate and the integer animation identifier.</descr>
  </li>
  <p>&nbsp;
  <li><i><com>TeamMate</i>:<b>setLastTorsoAnimation(</b><i>number</i> <b>animation)</com><br>
    </b><br>
    <descr>sets the last torso animation given the integer animation identifier.</descr>
  </li>
  <p>&nbsp;
  <li><i><com>number TeamMate</i>:<b>getCurrentTorsoAnimation()</com><br>
    </b><br>
    <descr>returns the current torso animation identifier.</descr>
  </li>
  <p>&nbsp;
  <li><i><com>number TeamMate</i>:<b>getLastTorsoAnimation()</com><br>
    </b><br>
    <descr>returns the last torso animation identifier.</descr>
  </li>
  <p>&nbsp;
  <li><i><com>number TeamMate</i>:<b>getStoppedTorsoAnimation()</com><br>
    </b><br>
    <descr>returns the identifier of the torso animation that last stopped.</descr>
  </li>
  <p>&nbsp;
  <li><i><com>TeamMate</i>:<b>setLegsAnimation(</b><i>Bot </i><b>bot, </b><i>number</i>
    <b>animation)</com><br>
    </b><br>
    <descr>sets the current legs animation given the <i>bot</i> that represents
    this team mate and the integer animation identifier.</descr>
  </li>
  <p>&nbsp;
  <li><i><com>number TeamMate</i>:<b>getCurrentLegsAnimation()</com><br>
    </b><br>
    <descr>returns the current legs animation identifier.</descr>
  </li>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="weapondata">3.3.3.0.1.2 WeaponData</a></h5>
The <b><class>WeaponData</class></b> class is used to find the positions and the
status of all the dropped weapons or dropped signs in the level and render them.
<ul>
  <li><i><com>WeaponData</i> <b>WeaponData(</b><i>function</i> <b>getWeaponStatus)</com><br>
    </b><br>
    <descr>creates the <i>WeaponData</i> object. Its argument is a (callback)
    function that is defined as follows:<br>
    <ul>
      <li><i>number</i> index, <i>number</i> posX, <i>number</i> posY, <i>number</i>
        posZ,<br>
        <i>number</i> type, <i>number</i> attrib = <b>getWeaponStatus(</b><i>number</i>
        <b>index)<br>
        </b><br>
        the <i>getWeaponStatus()</i> function accept an <i>index</i> identifier
        (integer) to retrieve the status of the corresponding dropped weapon (or
        dropped sign) in the level. The first weapon, it it exists, corresponds
        to 0, while subsequent weapons are obtained using the <i>index</i> value
        returned by the function. In fact, the first returned value is <i>index</i>
        (the index of the next possible weapon), while <i>posX, posY, posZ</i>
        give the position of the current weapon. The other values returned are: <i>type</i>,
        that is the actual type of the weapon found (its possible values are 0
        for the sign, 1 first kind of weapon, 2 for the second kind of weapon
        and so on); <i>attrib</i>, that is a particular attribute for the weapon
        (for every type it is always an integer indicating the size of the
        weapon).</descr><br>
    </ul>
  </li>
  <p>&nbsp;
  <li><i>WeaponData</i>:<b>delete()</com><br>
    </b><br>
    <descr>deletes this <i>WeaponData</i> object.</descr>
  </li>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="powerups">3.3.3.0.2 Powerups</a></h5>
The <b><class>Powerups</class></b> class represents (and includes the models of)
several powerup items that fill The <b>Bsp</b> level. This class extends <b><parent>Furniture</parent>
 </b>and can be added to a <b>Scenery</b> container like a <b>Bsp</b> is. If
shadows are enabled for the scenery and a texture with alpha channel is
provided, a simplified kind of shadow appears under the poserups.
<ul>
  <li><i><com>Powerups </i><b>Powerups(<br>
&nbsp;&nbsp;&nbsp; </b><i>Model</i><b> medikit, </b><i>Model</i><b> food, </b><i>Model</i><b>
    armor, </b><i>Model</i><b> bullets<br>
&nbsp;&nbsp;&nbsp; </b><i>Model</i><b> grenades, </b><i>Model</i><b> target,
    </b><i>PowerupData</i><b> powerupData,<br>
&nbsp;&nbsp;&nbsp; </b><i>Texture<b> shadowTexture</b> </i>= nil<b><br>
    )</com></b>
    <p><descr>creates an object given: the model for <i>medikit</i>s powerups;
    the model for <i>food </i>powerups; the model for <i>armor</i>s powerups;
    the model for <i>bullets</i> recharges; the model for <i>grenades</i>
    recharges; the model for <i>targets</i>; the <i>weaponData</i> associated
    with this object necessary to find the positions and status of all the
    powerups in the level and render them; the optional <i>shadow texture</i>
    used to render shadows under the powerups.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Powerups</i>:<b>setPowerupData(</b><i>PowerupData</i><b>
    powerupData)</com></b>
    <p><descr>sets the <i>powerupData</i> associated with this object necessary
    to find the positions and status of all the powerups in the level and render
    them. The <i>Powerups</i> object does not own the <i>powerupData</i> and
    this must be deleted, when it is no more needed, with a call to its <i>delete()</i>
    method.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="powerupdata">3.3.3.0.2.1 PowerupData</a></h5>
The <b><class>PowerupData</class></b> class is used to find the positions and
the status of all the powerups in the level and render them.
<ul>
  <li><i><com>PowerupData</i> <b>PowerupData(</b><i>function</i> <b>getPowerupStatus)</com><br>
    </b><br>
    <descr>creates the <i>PowerupData</i> object. Its argument is a (callback)
    function that is defined as follows:<br>
    <ul>
      <li><i>number</i> index, <i>number</i> posX, <i>number</i> posY, <i>number</i>
        posZ,<br>
        <i>number</i> type, <i>number</i> attrib = <b>getPowerupStatus(</b><i>number</i>
        <b>index)<br>
        </b><br>
        the <i>getPowerupStatus()</i> function accept an <i>index</i> identifier
        (integer) to retrieve the status of the corresponding powerup in the
        level. The first powerup, it it exists, corresponds to 0, while
        subsequent powerups are obtained using the <i>index</i> value returned
        by the function. In fact, the first returned value is <i>index</i> (the
        index of the next possible powerup), while <i>posX, posY, posZ</i> give
        the position of the current powerup. The other values returned are: <i>type</i>,
        that is the actual type of the powerup found (its possible values are 0
        for medikits, 1 for food, 2 for armor, 3 for bullets, 4 for grenades, 5
        for targets); <i>attrib</i>, that is a particular attribute for the
        powerup (for every type it is always an integer indicating the size of
        the powerup).</descr><br>
    </ul>
  </li>
  <p>&nbsp;
  <li><com><i>PowerupData</i>:<b>delete()</com><br>
    </b><br>
    <descr>deletes this <i>PowerupData</i> object.</descr>
  </li>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="ammo">3.3.3.0.3 Ammo</a></h5>
The <b><class>Ammo</class></b> class represents (and includes the description
of) the flying projectiles (not the static recharges - see <b>Powerups</b> for
them) around the <b>Bsp</b> level. This class extends <b><parent>Furniture</parent> 
 </b>and can be added to a <b>Scenery</b> container like a <b>Bsp</b> is.
<ul>
  <li><i><com>Ammo </i><b>Ammo(<br>
&nbsp;&nbsp;&nbsp; </b><i>number</i><b> weaponTypesCount, </b><i>table</i><b>
    halfSizes, </b><i>table</i><b> textures,<br>
&nbsp;&nbsp;&nbsp; </b><i>table</i><b> halfExplSizes, </b><i>table</i><b>
    explTextures, </b><i>table</i><b> explSamples,<br>
&nbsp;&nbsp;&nbsp; </b><i>AmmoData</i><b> ammoData</b><b><br>
    )</com></b>
    <p><descr>creates an object given: the number of different weapon types (<i>weaponTypesCount</i>);
    the table of the half sizes of the projectiles (one for each weapon type,
    the same for bullets and grenades); the table of the textures of the
    projectiles (one for each weapon type, the same for bullets and grenades);
    the table of the half sizes of the grenades explosions (one for each weapon
    type); the table of the textures of the grenades explosions (one for each
    weapon type - the texture must contain 16 frames for the animated
    explosion); the table of the 3D sound samples of the explosions (one for
    each weapon type); the <i>ammoData</i> associated with this object necessary
    to find the positions and status of all the projectiles in the level and
    render them.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Powerups</i>:<b>setBulletColor(</b><i>number</i><b> weaponType, </b><i>number</i><b>
    red, </b><i>number</i><b> green, </b><i>number</i><b> blue)</com></b>
    <p><descr>sets the color of the bullet for the specified weapon type (color
    components range from 0 to 1).</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Powerups</i>:<b>setGrenadeColor(</b><i>number</i><b> weaponType, </b><i>number</i><b>
    red, </b><i>number</i><b> green, </b><i>number</i><b> blue)</com></b>
    <p><descr>sets the color of the grenade for the specified weapon type (color
    components range from 0 to 1).</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Powerups</i>:<b>setPowerupData(</b><i>PowerupData</i><b>
    powerupData)</com></b>
    <p><descr>sets the <i>powerupData</i> associated with this object necessary
    to find the positions and status of all the powerups in the level and render
    them. The <i>Powerups</i> object does not own the <i>powerupData</i> and
    this must be deleted, when it is no more needed, with a call to its <i>delete()</i>
    method.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="ammodata">3.3.3.0.3.1 AmmoData</a></h5>
The <b><class>AmmoData</class></b> class is used to find the positions and the
status of all the flying projectiles in the level (not static recharges, see <b>PowerupData</b>
for them) and render them.
<ul>
  <li><i><com>AmmoData</i> <b>AmmoData(</b><i>function</i> <b>getAmmoStatus)</com><br>
    </b><br>
    <descr>creates the <i>AmmoData</i> object. Its argument is a ( callback)
    function that is defined as follows:<br>
    <ul>
      <li><i>number</i> index, <i>number</i> posX, <i>number</i> posY, <i>number</i>
        posZ,<br>
        <i>number</i> type, <i>number</i> attrib = <b>getAmmoStatus(</b><i>number</i>
        <b>index)<br>
        </b><br>
        the <i>getAmmoStatus()</i> function accept an <i>index</i> identifier
        (integer) to retrieve the status of the corresponding projectile in the
        level. The first projectile, it it exists, corresponds to 0, while
        subsequent projectile are obtained using the <i>index</i> value returned
        by the function. In fact, the first returned value is <i>index</i> (the
        index of the next possible projectile), while <i>posX, posY, posZ</i>
        give the position of the current projectile. The other values returned
        are: <i>type</i>, that is the actual type of the projectile found (its
        possible values are 0 for bullets of the first weapon, 1 for grenades of
        the first weapon, 2 for bullets of the second weapon, 3 for grenades of
        the second weapon and so on); <i>attrib</i>, that is a particular
        attribute for the projectile (it has no meaning for bullets; for
        grenades, 0 means that the grenade hasn't exploded yet, while a positive
        value up to 16 gives the animation frame of the animated explosion that
        must be shown and, finally, a negative value means that the grenade
        effectively exploded).</descr>
    </ul>
  </li>
  <li><i>AmmoData</i>:<b>delete()</com><br>
    </b><br>
    <descr>deletes this <i>AmmoData</i> object.</descr>
  </li>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="bsp">
<h5>3.3.3.1 Bsp</h5>
</a>The <b><class>Bsp</class></b> class extends <b><parent>Scenery</parent></b>
and inherits all its methods. It represents a game level with a number of
features. The format of the level resources follows the Quake III <i>BSP</i>
format: read the source code and the data files of the demos for more details.
This type of scenery supports a simplified kind of shadow.
<ul>
  <li><i><com>Bsp</i> <b>Bsp(</b><i>string</i> <b>fileName</b>, <i>string</i> <b>path</b>
    = nil, <i>number</i> <b>gammaCorrection</b> = 1<b>)</com></b>
    <p><descr>loads the complete level from a BSP file with the given path. A
    gamma correction for the scene may be specified (1 is no gamma correction
    for default).</descr>
    <p>&nbsp;
  <li><i><com>Bsp</i>:<b>setUseFastRendering(</b><i>boolean</i> <b>b</b> = true<b>)</com></b>
    <p><descr>selects fast rendering for this level. Not all the levels are
    compatible with this mode: If you can see missing triangles in your level,
    don't use it (typically levels created with <i>Q3Radiant</i> are compatible
    by default, while levels made with <i>GtkRadiant</i> are not).</descr>
    <p>&nbsp;
  <li><i><com>Bsp</i>:<b>setShowTransparencies(</b><i>boolean</i> <b>show</b> =
    true<b>)</com></b>
    <p><descr>applies alpha blending to textures with an alpha channel (false by
    default).</descr>
    <p>&nbsp;
  <li><i><com>Bsp</i>:<b>setShowUntexturedMeshes()</com></b>
    <p><descr>shows the meshes without a valid texture (using the default
    texture).</descr>
    <p>&nbsp;
  <li><i><com>Bsp</i>:<b>setShowUntexturedPatches()</com></b>
    <p><descr>shows the patches without a valid texture (using the default
    texture).</descr>
    <p>&nbsp;
  <li><i><com>Bsp</i>:<b>setDefaultTexture(</b><i>Texture</i> <b>texture)</com></b>
    <p><descr>defines the texture to be used when no valid textures are found.</descr>
    <p>&nbsp;
  <li><i><com>string</i> <i>Bsp</i>:<b>getEntitiesString()</com></b>
    <p><descr>returns a string containing a list of the entities in this level
    with their properties.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Bsp</i>:<b>getStartingPositionsCount()</com></b>
    <p><descr>returns the number of starting positions available in the level
    for a character.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>Bsp</i>:<b>getStartingPosition(</b><i>number</i>
    <b>index</b> = 0<b>)</com></b>
    <p><descr>returns the coordinates of the starting position numbered by <i>index</i>
    available in the level for a character.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Bsp</i>:<b>getMedikitPositionsCount()</com></b>
    <p><descr>returns the number of medikits available in the level for a
    character.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>Bsp</i>:<b>getMedikitPosition(</b><i>number</i>
    <b>index</b> = 0<b>)</com></b>
    <p><descr>returns the coordinates of the medikit numbered by <i>index</i>
    available in the level for a character.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Bsp</i>:<b>getFoodPositionsCount()</com></b>
    <p><descr>returns the number of food items available in the level for a
    character.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>Bsp</i>:<b>getFoodPosition(</b><i>number</i>
    <b>index</b> = 0<b>)</com></b>
    <p><descr>returns the coordinates of the food item numbered by <i>index</i>
    available in the level for a character.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Bsp</i>:<b>getArmorPositionsCount()</com></b>
    <p><descr>returns the number of armors available in the level for a
    character.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>Bsp</i>:<b>getArmorPosition(</b><i>number</i>
    <b>index</b> = 0<b>)</com></b>
    <p><descr>returns the coordinates of the armor numbered by <i>index</i>
    available in the level for a character.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Bsp</i>:<b>getBulletsPositionsCount()</com></b>
    <p><descr>returns the number of bullets recharges available in the level for
    a character.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>Bsp</i>:<b>getBulletsPosition(</b><i>number</i>
    <b>index</b> = 0<b>)</com></b>
    <p><descr>returns the coordinates of the bullets recharge numbered by <i>index</i>
    available in the level for a character.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Bsp</i>:<b>getGrenadesPositionsCount()</com></b>
    <p><descr>returns the number of grenades recharges available in the level
    for a character.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>Bsp</i>:<b>getGrenadesPosition(</b><i>number</i>
    <b>index</b> = 0<b>)</com></b>
    <p><descr>returns the coordinates of the grenades recharge numbered by <i>index</i>
    available in the level for a character.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Bsp</i>:<b>getWeaponPositionsCount()</com></b>
    <p><descr>returns the number of weapons available in the level for a
    character.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>Bsp</i>:<b>getWeaponPosition(</b><i>number</i>
    <b>index</b> = 0<b>)</com></b>
    <p><descr>returns the coordinates of the weapon numbered by <i>index</i>
    available in the level for a character.</descr>
    <p>&nbsp;
  <li><i><com>number</i> posX, <i>number</i> posY, <i>number</i> posZ, <i>boolean</i>
    collided = <i>Bsp</i>:<b>slideCollision(</b><br>
    <i>&nbsp;&nbsp; number</i> <b>posX,</b> <i>number</i> <b>posY,</b> <i>number</i>
    <b>posZ,</b><br>
    &nbsp;&nbsp; <i>number</i> <b>velX,</b> <i>number</i> <b>velY,</b> <i>number</i>
    <b>velZ,</b><br>
    &nbsp;&nbsp; <i>number</i> <b>extentX,</b> <i>number</i> <b>extentY,</b> <i>number</i>
    <b>extentZ</b><br>
    <b>)</com></b>
    <p><descr>move the box, the dimensions of which are given by the <i>extent</i>
    vector, from the <i>pos</i> vector with velocity <i>vel</i>. If the box
    collide with the <i>BSP</i> geometry, it is slided along the brushes.
    Returns the final position and the <i>collided</i> flag indicating if the
    box collided or not with the geometry.</descr>
    <p>&nbsp;
  <li><i><com>number</i> posX, <i>number</i> posY, <i>number</i> posZ, <i>boolean</i>
    collided = <i>Bsp</i>:<b>checkCollision(</b><br>
    &nbsp;&nbsp; <i>number</i> <b>posX,</b> <i>number</i> <b>posY,</b> <i>number</i>
    <b>posZ,</b><br>
    &nbsp;&nbsp; <i>number</i> <b>velX,</b> <i>number</i> <b>velY,</b> <i>number</i>
    <b>velZ,</b><br>
    &nbsp;&nbsp; <i>number</i> <b>extentX,</b> <i>number</i> <b>extentY,</b> <i>number</i>
    <b>extentZ</b><br>
    <b>)</com></b>
    <p><descr>move the box, the dimensions of which are given by the <i>extent</i>
    vector, from the <i>pos</i> vector with velocity <i>vel</i>. If the box
    collide with the <i>BSP</i> geometry, it is stopped there without sliding
    along the brushes. Returns the final position and the <i>collided</i> flag
    indicating if the box collided or not with the geometry.</descr></p>
    <p>&nbsp;
  <li><i><com>number</i> normalX, <i>number</i> normalY, <i>number</i> normalZ =
    <i>Bsp</i>:<b>getCollisionNormal()</com></b>
    <p><descr>returns the normal of the brush at the collision point. The
    returned value is valid only after a successful call to <i>checkCollision()</i>.</descr></p>
    <p>&nbsp;
  <li><i><com>number</i> textureID, <i>number</i> textureContent <i>Bsp</i>:<b>getCollisionTexture()</com></b>
    <p><descr>returns the texture index of the brush at the collision point and
    also the texture content (an integer the bits of which have specific
    meanings). The returned value is valid only after a successful call to <i>checkCollision()</i>.</descr></p>
  <li><i><com>number</i> cluster = <i>Bsp</i>:<b>getCluster(</b><br>
    &nbsp;&nbsp; <i>number</i> <b>posX,</b> <i>number</i> <b>posY,</b> <i>number</i>
    <b>posZ</b><br>
    <b>)</com></b>
    <p><descr>returns the identifier of the cluster that the specified point
    belongs to.</descr></p>
  <li><i><com>boolean</i> <i>Bsp</i>:<b>checkVisibility(</b><i>number</i> <b>clusterA,</b>
    <i>number</i> <b>clusterB)</com></b>
    <p><descr>returns <i>true</i> if the cluster identified by <i>clusterA</i>
    is visible from the cluster identified by <i>clusterB</i> (and vice-versa),
    returns <i>false</i> otherwise.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="image">
<h3>3.4 Image</h3>
</a>The <b><class>Image</class></b> class extends <b><parent>Void</parent></b>
and is used by image resources. When no more needed, images must be explicitly
released using the <i>delete()</i> function to free the occupied memory.
<ul>
  <li><i><com>Image</i> <b>Image(</b><i>string</i> <b>fileName)</com></b>
    <p><descr>loads an image from the specified file.</descr>
    <p>&nbsp;
  <li><i><com>Image</i> <b>ImageGrayscale(</b><i>number</i> <b>w</b>, <i>number</i>
    <b>h)</com></b>
    <p><descr>creates a grayscale image with the given width and height. Default
    color is black.</descr>
    <p>&nbsp;
  <li><i><com>Image</i> <b>ImageRGB(</b><i>number</i> <b>w</b>, <i>number</i> <b>h)</com></b>
    <p><descr>creates an RGB image with the given width and height. Default
    color is black.</descr>
    <p>&nbsp;
  <li><i><com>Image</i> <b>ImageRGBA(</b><i>number</i> <b>w</b>, <i>number</i> <b>h)</com></b>
    <p><descr>creates an RGBA image with the given width and height. Default
    color is black with full transparency.</descr>
    <p>&nbsp;
  <li><i><com>Image</i> <b>ImageFromGdImage(</b><i>GdImage</i> <b>gdImage</b><b>)</com></b>
    <p><descr>creates an RGBA image from the given <I>gdImage</I> (the latter must be a true color image).</descr>
    <p>&nbsp;
  <li><i><com>Image</i> <b>ImageFromNoiseImage(</b><i>NoiseImage</i> <b>noiseImage</b><b>)</com></b>
    <p><descr>creates an RGBA image from the given <I>noiseImage</I>.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Image</i>:<b>isGrayscale()</com></b>
    <p><descr>returns <b>nil</b> if the image has not a single gray channel.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Image</i>:<b>hasAlpha()</com></b>
    <p><descr>returns <b>nil</b> if the image has not an alpha channel.</descr>
    <p>&nbsp;
  <li><i><com>number</i> w, <i>number</i> h = <i>Image</i>:<b>getDimension()</com></b>
    <p><descr>returns the size (width and height) of the image.</descr>
    <p>&nbsp;
  <li><i><com>number</i> r, <i>number</i> g, <i>number</i> b, <i>number</i> a = <i>Image</i>:<b>getPixel(</b><i>number</i>
    <b>x</b>, <i>number</i> <b>y)</com></b>
    <p><descr>returns the color of the pixel at coordinates x and y. Color
    components are in the range 0 to 255. If some component is not available, as
    in grayscale images, the returned value is <i>nil</i>.</descr>
    <p>&nbsp;
  <li><i><com>Image</i>:<b>setPixel(</b><i>number</i> <b>x</b>, <i>number</i> <b>y</b>,
    <i>number</i> <b>r</b>, <i>number</i> <b>g</b> = 0, <i>number</i> <b>b</b> =
    0, <i>number</i> <b>a</b> = 0<b>)</com></b>
    <p><descr>sets the color of the pixel at coordinates x and y. Color
    components are in the range 0 to 255. If some component is not available, as
    in grayscale images, the given value is ignored.</descr>
    <p>&nbsp;
  <li><i><com>Image</i>:<b>addAlpha(</b><i>Image</i> <b>alphaImage</b>, <i>number</i>
    <b>threshold</b> = -1, <i>number</i> <b>cutoff</b> = 0<b>)</com></b>
    <p><descr>gets the alpha channel from <i>alphaImage</i> and adds it to the
    image. The <i>threshold</i> and <i>cutoff</i> arguments gives respectively a
    value above which the alpha channel is fully opaque and a value below which
    the alpha channel is fully transparent. Values in between get proportional
    values of transparency. Both the arguments accept values between 0 and 255
    (not 0 to 1 as usual). A negative value for <i>threshold</i> pass the
    original alpha values as they are.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Image</i>:<b>resample(</b><i>number</i> <b>newWidth</b>,
    <i>number</i> <b>newHeight)</com></b>
    <p><descr>resamples the image converting it to the <i>newWidth</i> and <i>newHeight</i>
    dimensions. The function works only for RGB images. The function returns <i>true</i>
    on success.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Image</i>:<b>saveAsPng(</b><i>string</i> <b>fileName</b>,
    <i>boolean</i> <b>useFilters</b> = false<b>)</com></b>
    <p><descr>saves the image in the specified file. The function returns <i>true</i>
    on success. If the <i>useFilters</i> argument is true, the compression is
    better but the time required to save the image is longer.</descr>
    <p>&nbsp;
  <li><i><com>Image</i>:<b>convertTo111A(</b><i>number</i><b> grayShade</b> = 1<b>)</com></b>
    <p><descr>converts a gray scale image to 111A format (the gray shade is
    copied to the alpha component; red, green and blue are set to 1 by default
    or to the value specified by <i>grayShade</i>).</descr>
    <p>&nbsp;
  <li><i><com>Image</i>:<b>convertToRGB()</com></b>
    <p><descr>converts a gray scale image to RGB format (the gray shade is
    copied to the red, green and blue components).</descr>
    <p>&nbsp;
  <li><i><com>Image</i>:<b>convertToRGBA()</com></b>
    <p><descr>converts a gray scale image to RGBA format (the gray shade is
    copied to the red, green, blue and alpha components).</descr>
    <p>&nbsp;
  <li><i><com>Image</i>:<b>convertToRGBmA()</com></b>
    <p><descr>converts a gray scale image to RGBA format (the gray shade is
    copied to the red, green and blue components, while one minus gray shade is
    copied in the alpha component).</descr>
    <p>&nbsp;
  <li><i><com>Image</i>:<b>convertToGray()</com></b>
    <p><descr>converts a color image to gray (if an alpha layer is present, it
    is copied in the final image).</descr>
    <p>&nbsp;
  <li><i><com>Image</i>:<b>convertToBump(</b><i>number</i> <b>scaleSide</b>, <i>number</i>
    <b>scaleHeight)</com></b>
    <p><descr>converts a gray scale image to a bump image encoded in RGB format.
    The gray scale image is interpreted as an height field with white as the
    maximum height and black as the minimum height. The <i>scaleHeight</i>
    argument is the distance between two adiacent values in the gray scale,
    while <i>scaleSide</i> in the distance between adiacent pixels. The normal
    vector computed by the calculation is encoded in RGB (x value in the red
    component and so on).</descr>
    <p>&nbsp;
  <li><i><com>Image</i>:<b>delete()</com></b>
    <p><descr>deletes the image from memory.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="texture">
<h4>3.4.1 Texture</h4>
</a>The <b><class>Texture</class></b> class extends <b><parent>Void</parent></b>
and is used to represent texture resources.
<ul>
  <li><i><com>Texture</i> <b>Texture(</b><i><br>
&nbsp;&nbsp;&nbsp; Image</i> <b>image,</b> <i>boolean</i> <b>repeat</b> =
    false<b>,</b> <i>boolean</i> <b>doMipmaps</b> = true<b>,</b><i><br>
    </i>&nbsp;&nbsp;&nbsp; <i>boolean</i> <b>is1D</b> = false<b><br>
    )</com></b>
    <p><descr>creates a texture given an image, optional <i>repeat</i> and <i>doMipmaps</i>
    parameters and a <i>is1D </i>dimensional specifier. The <i>repeat</i>
    parameter must be specified when the texture is repeated several times over
    a surface; its default value is <b>false</b>. The <i>doMipmaps</i> parameter
    requests the generation of texture mipmaps; its default value is <b>true</b>.
    The last parameter specifies the dimensionality of the texture; if set, the
    texture is 1D, otherwise it is 2D.</descr>
    <p>&nbsp;
  <li><i><com>Texture</i>:<b>delete()</com></b>
    <p><descr>deletes the texture from memory. Its reference could be still
    owned by other objects, but the use of this method is safe.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="bumpedtexture">
<h5>3.4.1.1 BumpedTexture</h5>
</a>The <b><class>BumpedTexture</class></b> class extends <b><parent>Texture</parent></b>
and inherits all its methods. It is used by texture resources of bumped objects.
This class has no methods.
<p><a href="#index">Index</a>
<hr>
<p><a name="animatedtexture">
<h5>3.4.1.2 AnimatedTexture</h5>
</a>The <b><class>AnimatedTexture</class></b> class extends <b><parent>Texture</parent></b>
and inherits all its methods. It may be attached to materials in place of static
textures to display short animations. This class has no methods, only a
constructor.
<ul>
  <li><i><com>AnimatedTexture</i> <b>AnimatedTexture(</b><i>table</i> <b>imagesTable,</b>
    <i>number</i> <b>duration,</b> <i>boolean</i> <b>repeat</b> = false)</com>
    <p><descr>creates an animated texture given a table containing <b>Image</b>
    objects, a time <i>duration</i> in seconds for the animation loop and a
    optional <i>repeat</i> parameter. The latter must be specified when the
    texture must be repeated several times over a surface; its default value is <b>false</b>.</descr>
    </p>
  <li><com><i>AnimatedTexture</i>:<b>setAnimated(</b><i>boolean</i> <b>animated</b> = true<b>)</b></com>
    <p><descr>starts or stops the animation.</descr>
    </p>
  <li><com><I>boolean</I> <i>AnimatedTexture</i>:<b>isAnimated(</b><b>)</b></com>
    <p><descr>returns true if the texture is animated.</descr>
    </p>
  <li><com><i>AnimatedTexture</i>:<b>setFrame(</b><i>number</i> <b>frame</b><b>)</b></com>
    <p><descr>specifies the current frame when the animation is stopped.</descr>
    </p>
  <li><com><I>number</I> <i>AnimatedTexture</i>:<b>getFrame(</b><b>)</b></com>
    <p><descr>returns the current frame of the animation.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="texture3d">
<h5>3.4.1.3 Texture3D</h5>
</a>The <b><class>Texture3D</class></b> class extends <b><parent>Texture</parent></b>
and inherits all its methods. It represents a 3D texture. This class has no
methods, only a constructor.
<ul>
  <li><i><com>Texture3D</i> <b>Texture3D(</b><i>table</i> <b>imagesTable</b>, <i>boolean</i>
    <b>repeatST</b> = false, <i>boolean</i> <b>repeatR</b> = false<b>)</b></com>
    <p><descr>creates a 3D texture given a table containing <b>Image</b>
    objects, a optional <i>repeatST</i> parameter (to specify repeat along the
    first two dimensions) and <i>repeatR</i> (to specify repeat along the third
    and last dimension).</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="texsynth">
<h4>3.4.2 TexSynth</h4>
</a>The <b><class>TexSynth</class></b> class owns an unique implicit object that
represents a procedural image generator performed by the &quot;<i>TxSynth</i>&quot;
library. Since there is a single <b>TexSynth</b> object, its methods are called
without specifying any object. They are:
<ul>
  <li><com><b>TexImageSetSeed(</b><i>number</i> <b>seed</b><b>)</b></com>
    <p><descr>sets the seed of the random number generator used by the <i>TexSynth</i>
    singleton.</descr>
    <p>&nbsp;
  <li><com><i>TexImage</i> <b>TexImageFlat(</b><i>number</i> <b>width</b>, <i>number</i>
    <b>height</b>, <i>number</i> <b>value</b><b>)</b></com>
    <p><descr>generates a flat image with the given width, height and uniform
    grayscale color in the range 0-255.</descr>
    <p>&nbsp;
  <li><com><i>TexImage</i> <b>TexImageNoise(</b><i>number</i> <b>width</b>, <i>number</i>
    <b>height</b><b>)</b></com>
    <p><descr>generates a noisy image with the given width and height.</descr>
    <p>&nbsp;
  <li><com><i>TexImage</i> <b>TexImagePerlin(</b> <i>number</i> <b>width</b>, <i>number</i>
    <b>height</b>, <i>number</i> <b>persistence</b>, <i>number</i> <b>octaves</b><b>)</b></com>
    <p><descr>generates an image using perlin noise with the given width,
    height, persistence and octaves parameters.</descr>
    <p>&nbsp;
  <li><com><i>TexImage</i> <b>TexImageMarble(</b> <i>number</i> <b>width</b>, <i>number</i>
    <b>height</b>, <i>number</i> <b>persistence</b>, <i>number</i> <b>octaves</b>,
    <i>number</i> <b>scale</b><b>)</b></com>
    <p><descr>generates a marble image with the given width, height, scale,
    persistence and octaves parameters.</descr>
    <p>&nbsp;
  <li><com><i>TexImage</i> <b>TexImageBricks(</b><i>number</i> <b>width</b>, <i>number</i>
    <b>height</b>, <i>number</i> <b>shift</b><b>)</b></com>
    <p><descr>generates a bricks image with the given width, height and shift.</descr>
    <p>&nbsp;
  <li><com><i>TexImage</i> <b>TexImageMandel(</b> <i>number</i> <b>width</b>, <i>number</i>
    <b>height</b>, <i>number</i> <b>iterations</b>, <i>number</i> <b>x1</b>, <i>number</i>
    <b>y1</b>, <i>number</i> <b>x2</b>, <i>number</i> <b>y2</b><b>)</b></com>
    <p><descr>generates a mandelbrot set image with the given width, height and
    number of iterations in the region given by (x1,y1) and (x2,y2) points.</descr>
    <p>&nbsp;
  <li><com><i>TexImage</i> <b>TexImageWood(</b> <i>number</i> <b>width</b>, <i>number</i>
    <b>height</b>, <i>number</i> <b>scale</b>, <i>number</i> <b>tilt</b>, <i>number</i>
    <b>offset</b> <b>)</b></com>
    <p><descr>generates a wood image with the given width, height, scale, offset
    and tilt (the latter in the range 0-255).</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="teximage">
<h5>3.4.2.1 TexImage</h5>
</a>The <b><class>TexImage</class></b> class represents a procedural image
generated by the <i>TexSynth</i> singleton.
<ul>
  <li><com><i>TexImage</i> <i>TexImage</i>:<b>clone()</b></com>
    <p><descr>clones the image.</descr>
    <p>&nbsp;
  <li><i><com>TexImage</i>:<b>delete()</com></b>
    <p><descr>deletes the image from memory.</descr>
    <p>&nbsp;
  <li><com><i>TexImage</i>:<b>colorize(</b><i>number</i> <b>components</b>, <i>table</i>
    <b>palette</b><b>)</b></com>
    <p><descr>applies colors to a grayscale image according to the values given
    in palette. The <i>components</i> argument specifies the number of color
    components specified for each entry in the palette (3 means RGB color, while
    4 meabs RGBA color). The <i>palette</i> argument is a table of numbers that
    lists for each entry an index and the corresponding color components. The
    index must be in the range 0-255 while the number of color components must
    correspond to the given <i>components</i> argument. The color of the gray
    shade is computed interpolating the colors corresponding to the indexes
    between which falls the gray shade.</descr>
    <p>&nbsp;
  <li><com><i>TexImage</i>:<b>soften(</b><i>number</i> <b>strenght</b><b>)</b></com>
    <p><descr>soften the image averaging using a low-pass filter with a simple
    box-filter, according to the given integer <i>strength</i>.</descr>
    <p>&nbsp;
  <li><com><i>TexImage</i>:<b>balance(</b><i>number</i> <b>brightness</b>, <i>number</i>
    <b>contrast</b><b>)</b></com>
    <p><descr>changes brightness and contrast of the image (values fall in the
    range 0-255).</descr>
    <p>&nbsp;
  <li><com><i>TexImage</i>:<b>clamp(</b><i>number</i> <b>min</b>, <i>number</i> <b>mox</b><b>)</b></com>
    <p><descr>clamps the values of the image (values fall in the range 0-255).</descr>
    <p>&nbsp;
  <li><com><i>TexImage</i>:<b>invert(</b><b>)</b></com>
    <p><descr>inverts the image.</descr>
    <p>&nbsp;
  <li><com><i>TexImage</i> <i>TexImage</i>:<b>combine(</b><i>TexImage</i> <b>other</b>,
    <i>number</i> <b>op</b><b>)</b></com>
    <p><descr>combines two images into one according to the operation specified
    in <i>op</i> (1=ADD; 2=SIGNED_ADD; 3=MODULATE; 4=TILE).</descr>
    <p>&nbsp;
  <li><com><i>Image</i> <i>TexImage</i>:<b>getImage(</b><b>)</b></com>
    <p><descr>returns an object of type <i>Image</i> using the data of this <i>TexImage</i>.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="noisemodule">
<h4>3.4.3 NoiseModule</h4>
</a>The <b><class>NoiseModule</class></b> is the base class of several procedural noise generators
that can be connected to elaborate complex images. Read the documentation of <I>libNoise</I> at
<A HREF="http://libnoise.sourceforge.net">http://libnoise.sourceforge.net</A> for more details about
this library.
<ul>
  <li><com><I>NoiseModule</I>:<b>delete(</b><b>)</b></com>
    <p><descr>deletes this module.</descr></p>
  <li><com><I>number</I> <I>NoiseModule</I>:<b>getSourceCount(</b><b>)</b></com>
    <p><descr>returns the number of sources accepted.</descr></p>
  <li><com><I>number</I> <I>NoiseModule</I>:<b>getValue(</b><I>number</I> <B>x</B>, <I>number</I> <B>y</B>, <I>number</I> <B>z</B><b>)</b></com>
    <p><descr>returns the value of noise at the specified location.</descr></p>
  <li><com><I>NoiseModule</I>:<b>setSource(</b><I>number</I> <B>index</B>, <I>NoiseModule</I> <B>module</B><b>)</b></com>
    <p><descr>sets the source at the given slot index.  Every module may accept zero or more sources
depending on the purpose of the module itself. It's an unrecoverable error to attach more sources than
accepted by the module. 
</descr></p>
  <li><com><I>NoiseModule</I> <b>NoiseAbs(</b><b>)</b></com>
    <p><descr>creates the <I>Abs</I> noise module.
Noise module that outputs the absolute value of the output value from a source module.
This noise module requires one source module.
    </descr></p>
  <li><com><I>NoiseModule</I> <b>NoiseAdd(</b><b>)</b></com>
    <p><descr>creates the <I>Add</I> noise module.
Noise module that outputs the sum of the two output values from two source modules.
This noise module requires two source modules.
    </descr></p>
  <li><com><I>NoiseModule</I> <b>NoiseBlend(</b><b>)</b></com>
    <p><descr>creates the <I>Blend</I> noise module.
Unlike most other noise modules, the index value assigned to a source module determines its role in the blending operation: 
<ul>
<li>Source module 0 outputs one of the values to blend.
<li>Source module 1 outputs one of the values to blend. 
<li>Source module 2 is known as the control module. The control module determines the weight of the blending operation. 
</ul>
Negative values weigh the blend towards the output value from the source module with an index value of 0. Positive values weigh the blend towards the output value from the source module with an index value of 1. 
This noise module uses linear interpolation to perform the blending operation.
This noise module requires three source modules. 
    </descr></p>
  <li><com><I>NoiseModule</I> <b>NoiseCache(</b><b>)</b></com>
    <p><descr>creates the <I>Cache</I> noise module.
Noise module that caches the last output value generated by a source module. 
Caching a noise module is useful if it is used as a source module for multiple noise modules. If a source module is not cached, the source module will redundantly calculate the same output value once for each noise module in which it is included. 
This noise module requires one source module. 
    </descr></p>
  <li><com><I>NoiseModule</I> <b>NoiseCheckerboard(</b><b>)</b></com>
    <p><descr>creates the <I>Checkerboard</I> noise module.
Noise module that outputs a checkerboard pattern. 
This noise module outputs unit-sized blocks of alternating values. The values of these blocks alternate between -1.0 and +1.0. 
This noise module is not really useful by itself, but it is often used for debugging purposes. 
This noise module does not require any source modules. 
    </descr></p>
  <li><com><I>NoiseModule</I> <b>NoiseDisplace(</b><b>)</b></com>
    <p><descr>creates the <I>Displace</I> noise module.
Noise module that uses three source modules to displace each coordinate of the input value before returning the output value from a source module. 
Unlike most other noise modules, the index value assigned to a source module determines its role in the displacement operation: 
<ul>
<li>Source module 0 outputs a value. 
<li>Source module 1 specifies the offset to apply to the x coordinate of the input value. 
<li>Source module 2 specifies the offset to apply to the y coordinate of the input value. 
<li>Source module 3 specifies the offset to apply to the z coordinate of the input value.
</ul>
The module modifies the ( x, y, z ) coordinates of the input value using the output values from the three displacement modules before retrieving the output value from the source module. 
This noise module requires four source modules. 
    </descr></p>
  <li><com><I>NoiseModule</I> <b>NoiseInvert(</b><b>)</b></com>
    <p><descr>creates the <I>Invert</I> noise module.
Noise module that inverts the output value from a source module. 
This noise module requires one source module. 
    </descr></p>
  <li><com><I>NoiseModule</I> <b>NoiseMax(</b><b>)</b></com>
    <p><descr>creates the <I>Max</I> noise module.
Noise module that outputs the larger of the two output values from two source modules. 
This noise module requires two source modules. 
    </descr></p>
  <li><com><I>NoiseModule</I> <b>NoiseMin(</b><b>)</b></com>
    <p><descr>creates the <I>Min</I> noise module.
Noise module that outputs the smaller of the two output values from two source modules. 
This noise module requires two source modules. 
    </descr></p>
  <li><com><I>NoiseModule</I> <b>NoiseMultiply(</b><b>)</b></com>
    <p><descr>creates the <I>Multiply</I> noise module.
Noise module that outputs the product of the two output values from two source modules. 
This noise module requires two source modules. 
    </descr></p>
  <li><com><I>NoiseModule</I> <b>NoisePower(</b><b>)</b></com>
    <p><descr>creates the <I>Power</I> noise module.
Noise module that raises the output value from a first source module to the power of the output value from a second source module. 
This noise module requires two source modules. 
    </descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="noiseperlin">
<h5>3.4.3.1 NoisePerlin, NoiseBillow, NoiseRidgedMulti</h5>
</a>The <b><class>NoisePerlin</class></b> extends <b><parent>NoiseModule</parent></b>
and inherits all its methods. It generates a Perlin noise.
<ul>
  <li><com><I>NoisePerlin</I> <b>NoisePerlin(</b><b>)</b></com>
    <p><descr>creates the <I>Perlin</I> noise module.
Noise module that outputs 3-dimensional Perlin noise. 
<br>Perlin noise is the sum of several coherent-noise functions of ever-increasing frequencies and ever-decreasing amplitudes. 
An important property of Perlin noise is that a small change in the input value will produce a small change in the output value, while a large change in the input value will produce a random change in the output value. 
This noise module outputs Perlin-noise values that usually range from -1.0 to +1.0, but there are no guarantees that all output values will exist within that range.
<ul>
<li><I>Octaves</I> 
<br>The number of octaves control the amount of detail of the Perlin noise. Adding more octaves increases the detail of the Perlin noise, but with the drawback of increasing the calculation time. 
These coherent-noise functions are called octaves because each octave has, by default, double the frequency of the previous octave. 
<li><I>Frequency</I>
<br>An application may specify the frequency of the first octave. 
<li><I>Persistence</I>
<br>The persistence value controls the roughness of the Perlin noise. Larger values produce rougher noise. 
The persistence value determines how quickly the amplitudes diminish for successive octaves. The amplitude of the first octave is 1.0. The amplitude of each subsequent octave is equal to the product of the previous octave's amplitude and the persistence value. So a persistence value of 0.5 sets the amplitude of the first octave to 1.0; the second, 0.5; the third, 0.25; etc. 
<li><I>Lacunarity</I>
<br>The lacunarity specifies the frequency multipler between successive octaves. 
The effect of modifying the lacunarity is subtle; you may need to play with the lacunarity value to determine the effects. For best results, set the lacunarity to a number between 1.5 and 3.5.
</ul>
This noise module does not require any source modules.
    </descr></p>
  <li><com><I>NoisePerlin</I> <b>NoiseBillow(</b><b>)</b></com>
    <p><descr>creates the <I>Billow</I> noise module.
Noise module that outputs three-dimensional "billowy" noise suitable for clouds and rocks. 
This noise module is nearly identical to NoisePerlin except this noise module modifies each octave with an absolute-value function. 
    </descr></p>
  <li><com><I>NoisePerlin</I> <b>NoiseRidgedMulti(</b><b>)</b></com>
    <p><descr>creates the <I>RidgedMulti</I> noise module.
Noise module that outputs 3-dimensional ridged-multifractal noise. 
This noise module, heavily based on the Perlin-noise module, generates ridged-multifractal noise. Ridged-multifractal noise is generated in much of the same way as Perlin noise, except the output of each octave is modified by an absolute-value function. Modifying the octave values in this way produces ridge-like formations. 
Ridged-multifractal noise does not use a persistence value. This is because the persistence values of the octaves are based on the values generated from from previous octaves, creating a feedback loop (or that's what it looks like after reading the code.) 
This noise module outputs ridged-multifractal-noise values that usually range from -1.0 to +1.0, but there are no guarantees that all output values will exist within that range (for ridged-multifractal noise generated with only one octave, the output value ranges from -1.0 to 0.0).
Ridged-multifractal noise is often used to generate craggy mountainous terrain or marble-like textures. 
This noise module does not require any source modules.
    </descr></p>
  <li><com><I>number</I> <I>NoisePerlin</I>:<b>getFrequency(</b><b>)</b></com>
    <p><descr>returns the frequency.</descr></p>
  <li><com><I>NoisePerlin</I>:<b>setFrequency(</b><I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the frequency.</descr></p>
  <li><com><I>number</I> <I>NoisePerlin</I>:<b>getLacunarity(</b><b>)</b></com>
    <p><descr>returns the lacunarity.</descr></p>
  <li><com><I>NoisePerlin</I>:<b>setLacunarity(</b><I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the lacunarity.</descr></p>
  <li><com><I>number</I> <I>NoisePerlin</I>:<b>getQuality(</b><b>)</b></com>
    <p><descr>returns the quality index.</descr></p>
  <li><com><I>NoisePerlin</I>:<b>setQuality(</b><I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the quality index (integer value from 0 to 2, from worst to better).</descr></p>
  <li><com><I>number</I> <I>NoisePerlin</I>:<b>getOctaves(</b><b>)</b></com>
    <p><descr>returns the octaves count.</descr></p>
  <li><com><I>NoisePerlin</I>:<b>setOctaves(</b><I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the octaves count.</descr></p>
  <li><com><I>number</I> <I>NoisePerlin</I>:<b>getPersistence(</b><b>)</b></com>
    <p><descr>returns the persistence.</descr></p>
  <li><com><I>NoisePerlin</I>:<b>setPersistence(</b><I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the persistence.</descr></p>
  <li><com><I>number</I> <I>NoisePerlin</I>:<b>getSeed(</b><b>)</b></com>
    <p><descr>returns the of the pseudo-random number generator.</descr></p>
  <li><com><I>NoisePerlin</I>:<b>setSeed(</b><I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the integer seed of the pseudo-random number generator.</descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="noiseclamp">
<h5>3.4.3.2 NoiseClamp</h5>
</a>The <b><class>NoiseClamp</class></b> extends <b><parent>NoiseModule</parent></b>
and inherits all its methods.
<ul>
  <li><com><I>NoiseClamp</I> <b>NoiseClamp(</b><b>)</b></com>
    <p><descr>creates the <I>Clamp</I> noise module.
Noise module that clamps the output value from a source module to a range of values. 
The range of values in which to clamp the output value is called the clamping range. 
If the output value from the source module is less than the lower bound of the clamping range, this noise module clamps that value to the lower bound. If the output value from the source module is greater than the upper bound of the clamping range, this noise module clamps that value to the upper bound. 
This noise module requires one source module. 
    </descr></p>
  <li><com><I>number</I> lower, <I>number</I> upper = <I>NoiseClamp</I>:<b>getBounds(</b><b>)</b></com>
    <p><descr>returns the bounds of the module.
    </descr></p>
  <li><com><I>NoiseClamp</I>:<b>setBounds(</b><I>number</I> <B>lower</B>, <I>number</I> <B>upper</B><b>)</b></com>
    <p><descr>sets the bounds of the module.
    </descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="noiseconst">
<h5>3.4.3.3 NoiseConst</h5>
</a>The <b><class>NoiseConst</class></b> extends <b><parent>NoiseModule</parent></b>
and inherits all its methods.
<ul>
  <li><com><I>NoiseConst</I> <b>NoiseConst(</b><b>)</b></com>
    <p><descr>creates the <I>Const</I> noise module.
Noise module that outputs a constant value.
This noise module is not useful by itself, but it is often used as a source module for other noise modules. 
This noise module does not require any source modules. 
    </descr></p>
  <li><com><I>number</I> <I>NoiseConst</I>:<b>getConstValue(</b><b>)</b></com>
    <p><descr>returns the value of the module.
    </descr></p>
  <li><com><I>NoiseClamp</I>:<b>setConstValue(</b><I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the value of the module.
    </descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="noisecurve">
<h5>3.4.3.4 NoiseCurve</h5>
</a>The <b><class>NoiseCurve</class></b> extends <b><parent>NoiseModule</parent></b>
and inherits all its methods.
<ul>
  <li><com><I>NoiseCurve</I> <b>NoiseCurve(</b><b>)</b></com>
    <p><descr>creates the <I>Curve</I> noise module.
Noise module that maps the output value from a source module onto an arbitrary function curve. 
This noise module maps the output value from the source module onto an application-defined curve. This curve is defined by a number of control points; each control point has an input value that maps to an output value. 
Since this curve is a cubic spline, an application MUST add a minimum of four control points to the curve. Each control point can have any input and output value, although no two control points can have the same input value. There is no limit to the number of control points that can be added to the curve. 
This noise module requires one source module. 
    </descr></p>
  <li><com><I>NoiseCurve</I>:<b>addControlPoint(</b><I>number</I> <B>input</B>, <I>number</I> <B>output</B><b>)</b></com>
    <p><descr>adds a control point.
    </descr></p>
  <li><com><I>NoiseCurve</I>:<b>clearAllControlPoints(</b><b>)</b></com>
    <p><descr>clears all control points.
    </descr></p>
  <li><com><I>number</I> <I>NoiseCurve</I>:<b>getControlPointCount(</b><b>)</b></com>
    <p><descr>returns the number of control points.
    </descr></p>
  <li><com><I>number</I> input, <I>number</I> output = <I>NoiseCurve</I>:<b>getControlPoint(</b><I>number</I> <B>index</B><b>)</b></com>
    <p><descr>returns the number input and output values of the control point corresponding to index.
    </descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="noisespheres">
<h5>3.4.3.5 NoiseSpheres, NoiseCylinders</h5>
</a>The <b><class>NoiseSpheres</class></b> extends <b><parent>NoiseModule</parent></b>
and inherits all its methods.
<ul>
  <li><com><I>NoiseSpheres</I> <b>NoiseSpheres(</b><b>)</b></com>
    <p><descr>creates the <I>Spheres</I> noise module.
Noise module that outputs concentric spheres. 
This noise module outputs concentric spheres centered on the origin like the concentric rings of an onion. 
The first sphere has a radius of 1.0. Each subsequent sphere has a radius that is 1.0 unit larger than the previous sphere. 
The output value from this noise module is determined by the distance between the input value and the the nearest spherical surface. The input values that are located on a spherical surface are given the output value 1.0 and the input values that are equidistant from two spherical surfaces are given the output value -1.0. 
An application can change the frequency of the concentric spheres. Increasing the frequency reduces the distances between spheres.
This noise module, modified with some low-frequency, low-power turbulence, is useful for generating agate-like textures. 
This noise module does not require any source modules. 
    </descr></p>
  <li><com><I>NoiseSpheres</I> <b>NoiseCylinders(</b><b>)</b></com>
    <p><descr>creates the <I>Cylinders</I> noise module.
Noise module that outputs concentric cylinders. 
This noise module outputs concentric cylinders centered on the origin. These cylinders are oriented along the y axis similar to the concentric rings of a tree. Each cylinder extends infinitely along the y axis. 
The first cylinder has a radius of 1.0. Each subsequent cylinder has a radius that is 1.0 unit larger than the previous cylinder. 
The output value from this noise module is determined by the distance between the input value and the the nearest cylinder surface. The input values that are located on a cylinder surface are given the output value 1.0 and the input values that are equidistant from two cylinder surfaces are given the output value -1.0. 
An application can change the frequency of the concentric cylinders. Increasing the frequency reduces the distances between cylinders.
This noise module, modified with some low-frequency, low-power turbulence, is useful for generating wood-like textures. 
This noise module does not require any source modules. 
    </descr></p>
  <li><com><I>NoiseSpheres</I>:<b>setFrequency(</b><I>number</I> <B>frequency</B><b>)</b></com>
    <p><descr>sets the frequency.
    </descr></p>
  <li><com><I>number</I> <I>NoiseSpheres</I>:<b>getFrequency(</b><b>)</b></com>
    <p><descr>returns the frequency.
    </descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="noiseexponent">
<h5>3.4.3.6 NoiseExponent</h5>
</a>The <b><class>NoiseExponent</class></b> extends <b><parent>NoiseModule</parent></b>
and inherits all its methods.
<ul>
  <li><com><I>NoiseExponent</I> <b>NoiseExponent(</b><b>)</b></com>
    <p><descr>creates the <I>Exponent</I> noise module.
Noise module that maps the output value from a source module onto an exponential curve. 
Because most noise modules will output values that range from -1.0 to +1.0, this noise module first normalizes this output value (the range becomes 0.0 to 1.0), maps that value onto an exponential curve, then rescales that value back to the original range. 
This noise module requires one source module. 
    </descr></p>
  <li><com><I>NoiseExponent</I>:<b>setExponent(</b><I>number</I> <B>exponent</B><b>)</b></com>
    <p><descr>sets the exponent.
    </descr></p>
  <li><com><I>number</I> <I>NoiseExponent</I>:<b>getExponent(</b><b>)</b></com>
    <p><descr>returns the exponent.
    </descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="noiserotatepoint">
<h5>3.4.3.7 NoiseRotatePoint</h5>
</a>The <b><class>NoiseRotatePoint</class></b> extends <b><parent>NoiseModule</parent></b>
and inherits all its methods.
<ul>
  <li><com><I>NoiseRotatePoint</I> <b>NoiseRotatePoint(</b><b>)</b></com>
    <p><descr>creates the <I>RotatePoint</I> noise module.
Noise module that rotates the input value around the origin before returning the output value from a source module. 
It rotates the coordinates of the input value around the origin before returning the output value from the source module. The coordinate system of the input value is assumed to be "left-handed" (x increases to the right, y increases upward, and z increases inward).
This noise module requires one source module. 
    </descr></p>
  <li><com><I>NoiseRotatePoint</I>:<b>setAngles(</b><I>number</I> <B>angleX</B>, <I>number</I> <B>angleY</B>, <I>number</I> <B>angleZ</B><b>)</b></com>
    <p><descr>sets the rotation angles.
    </descr></p>
  <li><com><I>number</I> angleX, <I>number</I> angleY, <I>number</I> angleZ = <I>NoiseRotatePoint</I>:<b>getAngles(</b><b>)</b></com>
    <p><descr>returns the rotation angles.
    </descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="noisescalebias">
<h5>3.4.3.7 NoiseScaleBias</h5>
</a>The <b><class>NoiseScaleBias</class></b> extends <b><parent>NoiseModule</parent></b>
and inherits all its methods.
<ul>
  <li><com><I>NoiseScaleBias</I> <b>NoiseScaleBias(</b><b>)</b></com>
    <p><descr>creates the <I>ScaleBias</I> noise module.
Noise module that applies a scaling factor and a bias to the output value from a source module. 
It retrieves the output value from the source module, multiplies it with a scaling factor, adds a bias to it, then outputs the value. 
This noise module requires one source module. 
    </descr></p>
  <li><com><I>NoiseScaleBias</I>:<b>setScale(</b><I>number</I> <B>scale</B><b>)</b></com>
    <p><descr>sets the scale.
    </descr></p>
  <li><com><I>number</I> <I>NoiseScaleBias</I>:<b>getScale(</b><b>)</b></com>
    <p><descr>returns the scale.
    </descr></p>
  <li><com><I>NoiseScaleBias</I>:<b>setBias(</b><I>number</I> <B>bias</B><b>)</b></com>
    <p><descr>sets the bias.
    </descr></p>
  <li><com><I>number</I> <I>NoiseScaleBias</I>:<b>getBias(</b><b>)</b></com>
    <p><descr>returns the bias.
    </descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="noisescalepoint">
<h5>3.4.3.9 NoiseScalePoint</h5>
</a>The <b><class>NoiseScalePoint</class></b> extends <b><parent>NoiseModule</parent></b>
and inherits all its methods.
<ul>
  <li><com><I>NoiseScalePoint</I> <b>NoiseScalePoint(</b><b>)</b></com>
    <p><descr>creates the <I>ScalePoint</I> noise module.
Noise module that scales the coordinates of the input value before returning the output value from a source module. 
It multiplies the coordinates of the input value with a scaling factor before returning the output value from the source module. This noise module requires one source module. 
    </descr></p>
  <li><com><I>NoiseScalePoint</I>:<b>setScales(</b><I>number</I> <B>scaleX</B>, <I>number</I> <B>scaleY</B>, <I>number</I> <B>scaleZ</B><b>)</b></com>
    <p><descr>sets the scales.
    </descr></p>
  <li><com><I>number</I> scaleX, <I>number</I> scaleY, <I>number</I> scaleZ = <I>NoiseScalePoint</I>:<b>getScales(</b><b>)</b></com>
    <p><descr>returns the scales.
    </descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="noiseselect">
<h5>3.4.3.10 NoiseSelect</h5>
</a>The <b><class>NoiseSelect</class></b> extends <b><parent>NoiseModule</parent></b>
and inherits all its methods.
<ul>
  <li><com><I>NoiseSelect</I> <b>NoiseSelect(</b><b>)</b></com>
    <p><descr>creates the <I>Select</I> noise module.
Noise module that outputs the value selected from one of two source modules chosen by the output value from a control module. 
Unlike most other noise modules, the index value assigned to a source module determines its role in the selection operation: 
<ul>
<li>Source module 0 outputs a value. 
<li>Source module 1 outputs a value. 
<li>Source module 2 is known as the control module. The control module determines the value to select. If the output value from the control module is within a range of values known as the selection range, this noise module outputs the value from the source module with an index value of 1. Otherwise, this noise module outputs the value from the source module with an index value of 0.
</ul>
By default, there is an abrupt transition between the output values from the two source modules at the selection-range boundary. To smooth the transition, pass a non-zero value to the SetEdgeFalloff() method. Higher values result in a smoother transition. 
This noise module requires three source modules. 
    </descr></p>
  <li><com><I>NoiseSelect</I>:<b>setBounds(</b><I>number</I> <B>lower</B>, <I>number</I> <B>upper</B><b>)</b></com>
    <p><descr>sets the bounds.
    </descr></p>
  <li><com><I>number</I> lower, <I>number</I> upper = <I>NoiseSelect</I>:<b>getBounds(</b><b>)</b></com>
    <p><descr>returns the bounds.
    </descr></p>
  <li><com><I>NoiseSelect</I>:<b>setEdgeFalloff(</b><I>number</I> <B>edge</B><b>)</b></com>
    <p><descr>sets the edge.
    </descr></p>
  <li><com><I>number</I> <I>NoiseSelect</I>:<b>getEdgeFalloff(</b><b>)</b></com>
    <p><descr>returns the edge.
    </descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="noiseterrace">
<h5>3.4.3.11 NoiseTerrace</h5>
</a>The <b><class>NoiseTerrace</class></b> extends <b><parent>NoiseModule</parent></b>
and inherits all its methods.
<ul>
  <li><com><I>NoiseTerrace</I> <b>NoiseTerrace(</b><b>)</b></com>
    <p><descr>creates the <I>Terrace</I> noise module.
Noise module that maps the output value from a source module onto a terrace-forming curve. 
This noise module maps the output value from the source module onto a terrace-forming curve. The start of this curve has a slope of zero; its slope then smoothly increases. This curve also contains control points which resets the slope to zero at that point, producing a "terracing" effect. An application must add a minimum of two control points to the curve. The control points can have any value, although no two control points can have the same value. There is no limit to the number of control points that can be added to the curve. 
This noise module clamps the output value from the source module if that value is less than the value of the lowest control point or greater than the value of the highest control point. 
This noise module is often used to generate terrain features such as your stereotypical desert canyon. 
This noise module requires one source module. 
    </descr></p>
  <li><com><I>NoiseTerrace</I>:<b>addControlPoint(</b><I>number</I> <B>input</B>, <I>number</I> <B>output</B><b>)</b></com>
    <p><descr>adds a control point.
    </descr></p>
  <li><com><I>NoiseTerrace</I>:<b>clearAllControlPoints(</b><b>)</b></com>
    <p><descr>clears all control points.
    </descr></p>
  <li><com><I>number</I> <I>NoiseTerrace</I>:<b>getControlPointCount(</b><b>)</b></com>
    <p><descr>returns the number of control points.
    </descr></p>
  <li><com><I>number</I> input, <I>number</I> output = <I>NoiseTerrace</I>:<b>getControlPoint(</b><I>number</I> <B>index</B><b>)</b></com>
    <p><descr>returns the number input and output values of the control point corresponding to index.
    </descr></p>
  <li><com><I>boolean</I> <I>NoiseTerrace</I>:<b>isTerraceInverted(</b><b>)</b></com>
    <p><descr>returns true if the terrace is inverted.
    </descr></p>
  <li><com><I>NoiseTerrace</I>:<b>setTerraceInverted(</b><I>boolean</I> <B>inverted</B> = true<b>)</b></com>
    <p><descr>sets if the terrace is inverted or not.
    </descr></p>
  <li><com><I>NoiseTerrace</I>:<b>makeControlsPoints(</b><I>number</I> <B>count</B><b>)</b></com>
    <p><descr>creates equally spaced control points.
    </descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="noisetranslatepoint">
<h5>3.4.3.12 NoiseTranslatePoint</h5>
</a>The <b><class>NoiseTranslatePoint</class></b> extends <b><parent>NoiseModule</parent></b>
and inherits all its methods.
<ul>
  <li><com><I>NoiseTranslatePoint</I> <b>NoiseTranslatePoint(</b><b>)</b></com>
    <p><descr>creates the <I>TranslatePoint</I> noise module.
Noise module that moves the coordinates of the input value before returning the output value from a source module.
It moves the coordinates of the input value by a translation amount before returning the output value from the source module. This noise module requires one source module. 
    </descr></p>
  <li><com><I>NoiseTranslatePoint</I>:<b>setTranslation(</b><I>number</I> <B>x</B>, <I>number</I> <B>y</B>, <I>number</I> <B>z</B><b>)</b></com>
    <p><descr>sets the translation.
    </descr></p>
  <li><com><I>number</I> x, <I>number</I> y, <I>number</I> z = <I>NoiseTranslatePoint</I>:<b>getTranslation(</b><b>)</b></com>
    <p><descr>returns the translation.
    </descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="noiseturbulence">
<h5>3.4.3.13 NoiseTurbulence</h5>
</a>The <b><class>NoiseTurbulence</class></b> extends <b><parent>NoiseModule</parent></b>
and inherits all its methods.
<ul>
  <li><com><I>NoiseTurbulence</I> <b>NoiseTurbulence(</b><b>)</b></com>
    <p><descr>creates the <I>Turbulence</I> noise module.
Noise module that randomly displaces the input value before returning the output value from a source module. 
Turbulence is the pseudo-random displacement of the input value. It randomly displaces the coordinates of the input value before retrieving the output value from the source module. To control the turbulence, an application can modify its frequency, its power, and its roughness. 
<ul>
<li> The frequency of the turbulence determines how rapidly the displacement amount changes.
<li> The power of the turbulence determines the scaling factor that is applied to the displacement amount.
<li> The roughness of the turbulence determines the roughness of the changes to the displacement amount. Low values smoothly change the displacement amount. High values roughly change the displacement amount, which produces more "kinky" changes.
</ul>
Use of this noise module may require some trial and error. Assuming that you are using a generator module as the source module, you should first: 
Set the frequency to the same frequency as the source module. 
Set the power to the reciprocal of the frequency.
From these initial frequency and power values, modify these values until this noise module produce the desired changes in your terrain or texture. For example: 
<ul>
<li> Low frequency (1/8 initial frequency) and low power (1/8 initial power) produces very minor, almost unnoticeable changes. 
<li> Low frequency (1/8 initial frequency) and high power (8 times initial power) produces "ropey" lava-like terrain or marble-like textures. 
<li> High frequency (8 times initial frequency) and low power (1/8 initial power) produces a noisy version of the initial terrain or texture. 
<li> High frequency (8 times initial frequency) and high power (8 times initial power) produces nearly pure noise, which isn't entirely useful.
</ul>
Displacing the input values result in more realistic terrain and textures. If you are generating elevations for terrain height maps, you can use this noise module to produce more realistic mountain ranges or terrain features that look like flowing lava rock. If you are generating values for textures, you can use this noise module to produce realistic marble-like or "oily" textures. 
Internally, there are three Perlin noise modules that displace the input value; one for the x, one for the y, and one for the z coordinate. 
This noise module requires one source module. 
    </descr></p>
  <li><com><I>NoiseTurbulence</I>:<b>setFrequency(</b><I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the value.
    </descr></p>
  <li><com><I>number</I> <I>NoiseTurbulence</I>:<b>getFrequency(</b><b>)</b></com>
    <p><descr>returns the value.
    </descr></p>
  <li><com><I>NoiseTurbulence</I>:<b>setPower(</b><I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the value.
    </descr></p>
  <li><com><I>number</I> <I>NoiseTurbulence</I>:<b>getPower(</b><b>)</b></com>
    <p><descr>returns the value.
    </descr></p>
  <li><com><I>NoiseTurbulence</I>:<b>setRoughness(</b><I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the value.
    </descr></p>
  <li><com><I>number</I> <I>NoiseTurbulence</I>:<b>getRoughness(</b><b>)</b></com>
    <p><descr>returns the value.
    </descr></p>
  <li><com><I>NoiseTurbulence</I>:<b>setSeed(</b><I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the integer value.
    </descr></p>
  <li><com><I>number</I> <I>NoiseTurbulence</I>:<b>getSeed(</b><b>)</b></com>
    <p><descr>returns the integer value.
    </descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="noisevoronoi">
<h5>3.4.3.14 NoiseVoronoi</h5>
</a>The <b><class>NoiseVoronoi</class></b> extends <b><parent>NoiseModule</parent></b>
and inherits all its methods.
<ul>
  <li><com><I>NoiseVoronoi</I> <b>NoiseVoronoi(</b><b>)</b></com>
    <p><descr>creates the <I>Voronoi</I> noise module.
Noise module that outputs Voronoi cells. 
In mathematics, a Voronoi cell is a region containing all the points that are closer to a specific seed point than to any other seed point. These cells mesh with one another, producing polygon-like formations. 
By default, this noise module randomly places a seed point within each unit cube. By modifying the frequency of the seed points, an application can change the distance between seed points. The higher the frequency, the closer together this noise module places the seed points, which reduces the size of the cells.
This noise module assigns each Voronoi cell with a random constant value from a coherent-noise function. The displacement value controls the range of random values to assign to each cell. The range of random values is +/- the displacement value.
This noise module can optionally add the distance from the nearest seed to the output value. This causes the points in the Voronoi cells to increase in value the further away that point is from the nearest seed point. 
Voronoi cells are often used to generate cracked-mud terrain formations or crystal-like textures 
This noise module requires no source modules. 
    </descr></p>
  <li><com><I>NoiseVoronoi</I>:<b>setDistanceEnabled(</b><I>boolean</I> <B>value</B> = true<b>)</b></com>
    <p><descr>sets the boolean value.
    </descr></p>
  <li><com><I>boolean</I> <I>NoiseVoronoi</I>:<b>isDistanceEnabled(</b><b>)</b></com>
    <p><descr>returns the boolean value.
    </descr></p>
  <li><com><I>NoiseVoronoi</I>:<b>setDisplacement(</b><I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the value.
    </descr></p>
  <li><com><I>number</I> <I>NoiseVoronoi</I>:<b>getDisplacement(</b><b>)</b></com>
    <p><descr>returns the value.
    </descr></p>
  <li><com><I>NoiseVoronoi</I>:<b>setFrequency(</b><I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the value.
    </descr></p>
  <li><com><I>number</I> <I>NoiseVoronoi</I>:<b>getFrequency(</b><b>)</b></com>
    <p><descr>returns the value.
    </descr></p>
  <li><com><I>NoiseVoronoi</I>:<b>setSeed(</b><I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the integer value.
    </descr></p>
  <li><com><I>number</I> <I>NoiseVoronoi</I>:<b>getSeed(</b><b>)</b></com>
    <p><descr>returns the integer value.
    </descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="noisemapbuilder">
<h4>3.4.4 NoiseMapBuilder</h4>
</a>The <b><class>NoiseMapBuilder</class></b> is used to generate noise maps from noise modules.
<ul>
  <li><com><I>NoiseMapBuilder</I> <b>NoiseMapBuilderPlane(</b><I>number</I> <B>lowX</B>, <I>number</I> <B>upX</B>, <I>number</I> <B>lowZ</B>, <I>number</I> <B>upZ</B>, <I>boolean</I> <B>seamless</B> = true<b>)</b></com>
    <p><descr>creates a map builder that follows a plane shape with the given bounds. If <I>seamless</I> is true, the generated map is periodic (useful for tiles).</descr></p>
  <li><com><I>NoiseMapBuilder</I> <b>NoiseMapBuilderSphere(</b><I>number</I> <B>southLat</B>, <I>number</I> <B>northLat</B>, <I>number</I> <B>westLon</B>, <I>number</I> <B>eastLon</B><b>)</b></com>
    <p><descr>creates a map builder that follows a spherical shape with the given bounds.</descr></p>
  <li><com><I>NoiseMapBuilder</I> <b>NoiseMapBuilderCylinder(</b><I>number</I> <B>lowAngle</B>, <I>number</I> <B>upAngle</B>, <I>number</I> <B>lowHeight</B>, <I>number</I> <B>upHeight</B><b>)</b></com>
    <p><descr>creates a map builder that follows a cylindrical shape with the given bounds.</descr></p>
  <li><com><I>NoiseMapBuilder</I>:<b>delete(</b><b>)</b></com>
    <p><descr>deletes this object.</descr></p>
  <li><com><I>NoiseMapBuilder</I>:<b>setDestMap(</b><I>NoiseMap</I> <B>map</B><b>)</b></com>
    <p><descr>sets the destination map.</descr></p>
  <li><com><I>NoiseMapBuilder</I>:<b>setDestSize(</b><I>number</I> <B>w</B>, <I>number</I> <B>h</B><b>)</b></com>
    <p><descr>sets the destination map size.</descr></p>
  <li><com><I>NoiseMapBuilder</I>:<b>setSourceModule(</b><I>NoiseModule</I> <B>module</B><b>)</b></com>
    <p><descr>sets the source module.</descr></p>
  <li><com><I>NoiseMapBuilder</I>:<b>build(</b><b>)</b></com>
    <p><descr>builds the map.</descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="noisenormalmaprenderer">
<h5>3.4.4.1 NoiseNormalMapRenderer</h5>
</a>The <b><class>NoiseNormalMapRenderer</class></b> is used to generate noise normal images (used to create normal textures) from noise maps.
<ul>
  <li><com><I>NoiseNormalMapRenderer</I> <b>NoiseNormalMapRenderer(</b><b>)</b></com>
    <p><descr>creates a normal map renderer.</descr></p>
  <li><com><I>NoiseNormalMapRenderer</I>:<b>delete(</b><b>)</b></com>
    <p><descr>deletes this object.</descr></p>
  <li><com><I>NoiseNormalMapRenderer</I>:<b>setDestImage(</b><I>NoiseImage</I> <B>image</B><b>)</b></com>
    <p><descr>sets the destination image.</descr></p>
  <li><com><I>NoiseNormalMapRenderer</I>:<b>setSourceMap(</b><I>NoiseMap</I> <B>map</B><b>)</b></com>
    <p><descr>sets the source map.</descr></p>
  <li><com><I>NoiseNormalMapRenderer</I>:<b>render(</b><b>)</b></com>
    <p><descr>renders the image.</descr></p>
  <li><com><I>NoiseNormalMapRenderer</I>:<b>setBumpHeight(</b><I>number</I> <B>height</B><b>)</b></com>
    <p><descr>sets the bump height.</descr></p>
  <li><com><I>NoiseNormalMapRenderer</I>:<b>setWrapEnabled(</b><I>boolean</I> <B>wrap</B> = true<b>)</b></com>
    <p><descr>enables (or disables) wrapping.</descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="noisecolormaprenderer">
<h5>3.4.4.2 NoiseColorMapRenderer</h5>
</a>The <b><class>NoiseColorMapRenderer</class></b> is used to generate noise images (used to create color textures) from noise maps.
<ul>
  <li><com><I>NoiseColorMapRenderer</I> <b>NoiseColorMapRenderer(</b><b>)</b></com>
    <p><descr>creates a color map renderer.</descr></p>
  <li><com><I>NoiseColorMapRenderer</I>:<b>delete(</b><b>)</b></com>
    <p><descr>deletes this object.</descr></p>
  <li><com><I>NoiseColorMapRenderer</I>:<b>setDestImage(</b><I>NoiseImage</I> <B>image</B><b>)</b></com>
    <p><descr>sets the destination image.</descr></p>
  <li><com><I>NoiseColorMapRenderer</I>:<b>setSourceMap(</b><I>NoiseMap</I> <B>map</B><b>)</b></com>
    <p><descr>sets the source map.</descr></p>
  <li><com><I>NoiseColorMapRenderer</I>:<b>render(</b><b>)</b></com>
    <p><descr>renders the image.</descr></p>
  <li><com><I>NoiseColorMapRenderer</I>:<b>setWrapEnabled(</b><I>boolean</I> <B>wrap</B> = true<b>)</b></com>
    <p><descr>enables (or disables) wrapping.</descr></p>
  <li><com><I>NoiseColorMapRenderer</I>:<b>clearGradient(</b><b>)</b></com>
    <p><descr>clears the color gradient. Remember that a grayscale gradient is defined by default, so you must clear it before specifying another one.</descr></p>
  <li><com><I>NoiseColorMapRenderer</I>:<b>buildGrayscaleGradient(</b><b>)</b></com>
    <p><descr>creates a grayscale gradient (default).</descr></p>
  <li><com><I>NoiseColorMapRenderer</I>:<b>buildTerrainGradient(</b><b>)</b></com>
    <p><descr>creates a color gradient similar to the one used in geographic maps.</descr></p>
  <li><com><I>NoiseColorMapRenderer</I>:<b>addGradientPoint(</b><I>number</I> <B>position</B>, <I>number</I> <B>red</B>, <I>number</I> <B>green</B>, <I>number</I> <B>blue</B>, <I>number</I> <B>alpha</B><b>)</b></com>
    <p><descr>creates a color gradient similar to the one used in geographic maps.</descr></p>
  <li><com><I>NoiseColorMapRenderer</I>:<b>setLightEnabled(</b><I>boolean</I> <B>light</B> = true<b>)</b></com>
    <p><descr>enables (or disables) lighting.</descr></p>
  <li><com><I>NoiseColorMapRenderer</I>:<b>setLightAzimuth(</b><I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the light azimuth.
The azimuth is the location of the light source around the horizon: 0.0 degrees is east; 90.0 degrees is north; 180.0 degrees is west; 270.0 degrees is south.
    </descr></p>
  <li><com><I>NoiseColorMapRenderer</I>:<b>setLightElevation(</b><I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the light elevation.
The elevation is the angle above the horizon: 0 degrees is on the horizon; 90 degrees is straight up
    </descr></p>
  <li><com><I>NoiseColorMapRenderer</I>:<b>setLightBrightness(</b><I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the light brightness.</descr></p>
  <li><com><I>NoiseColorMapRenderer</I>:<b>setLightIntensity(</b><I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the light intensity. A good value for intensity is 2.0.</descr></p>
  <li><com><I>NoiseColorMapRenderer</I>:<b>setLightContrast(</b><I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the light contrast.
The contrast specifies how sharp the boundary is between the light-facing areas and the shadowed areas. The contrast determines the difference between areas in light and areas in shadow.  Determining the correct contrast amount requires some trial and error, but if your application interprets the noise map as a height map that has a spatial resolution of <I>h</I> meters and an elevation resolution of 1 meter, a good contrast amount to use is <I>1.0/ h</I>.</descr></p>
  <li><com><I>NoiseColorMapRenderer</I>:<b>setLightColor(</b><I>number</I> <B>red</B>, <I>number</I> <B>green</B>, <I>number</I> <B>blue</B>, <I>number</I> <B>alpha</B><b>)</b></com>
    <p><descr>sets the light color.</descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="noisemap">
<h4>3.4.5 NoiseMap</h4>
</a>The <b><class>NoiseMap</class></b> represents the actual noise field generated by noise modules.
<ul>
  <li><com><I>NoiseMap</I> <b>NoiseMap(</b><b>)</b></com>
    <p><descr>creates a noise map.</descr></p>
  <li><com><I>NoiseMap</I>:<b>delete(</b><b>)</b></com>
    <p><descr>deletes this object.</descr></p>
  <li><com><I>NoiseMap</I>:<b>setSize(</b><I>number</I> <B>w</B>, <I>number</I> <B>h</B><b>)</b></com>
    <p><descr>sets the map size.</descr></p>
  <li><com><I>number</I> w, <I>number</I> h = <I>NoiseMap</I>:<b>getSize(</b><b>)</b></com>
    <p><descr>returns the map size.</descr></p>
  <li><com><I>NoiseMap</I>:<b>setValue(</b><I>number</I> <B>x</B>, <I>number</I> <B>y</B>, <I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the value at the specified location.</descr></p>
  <li><com><I>number</I> <I>NoiseMap</I>:<b>getValue(</b><I>number</I> <B>x</B>, <I>number</I> <B>y</B><b>)</b></com>
    <p><descr>returns the value at the specified location.</descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="noiseimage">
<h5>3.4.5.1 NoiseImage</h5>
</a>The <b><class>NoiseImage</class></b> represents the actual image generated by noise renderers from noise maps.
<ul>
  <li><com><I>NoiseImage</I> <b>NoiseImage(</b><b>)</b></com>
    <p><descr>creates a noise image.</descr></p>
  <li><com><I>NoiseImage</I>:<b>delete(</b><b>)</b></com>
    <p><descr>deletes this object.</descr></p>
  <li><com><I>NoiseImage</I>:<b>setSize(</b><I>number</I> <B>w</B>, <I>number</I> <B>h</B><b>)</b></com>
    <p><descr>sets the map size.</descr></p>
  <li><com><I>number</I> w, <I>number</I> h = <I>NoiseImage</I>:<b>getSize(</b><b>)</b></com>
    <p><descr>returns the map size.</descr></p>
  <li><com><I>NoiseImage</I>:<b>setValue(</b><I>number</I> <B>x</B>, <I>number</I> <B>y</B>, <I>number</I> <B>r</B>, <I>number</I> <B>g</B>, <I>number</I> <B>b</B>, <I>number</I> <B>a</B><b>)</b></com>
    <p><descr>sets the color at the specified location.</descr></p>
  <li><com><I>number</I> r, <I>number</I> g, <I>number</I> b, <I>number</I> a = <I>NoiseImage</I>:<b>getValue(</b><I>number</I> <B>x</B>, <I>number</I> <B>y</B><b>)</b></com>
    <p><descr>returns the color at the specified location.</descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="noiseline">
<h4>3.4.6 NoiseLine</h4>
</a>The <b><class>NoiseLine</class></b> represents a model that is used to retrieve the noise value at a specified location (along a line) generated by a noise module.
<ul>
  <li><com><I>NoiseLine</I> <b>NoiseLine(</b><I>NoiseModule</I> <B>module</B><b>)</b></com>
    <p><descr>creates a model attached to the given module.</descr></p>
  <li><com><I>NoiseLine</I>:<b>delete(</b><b>)</b></com>
    <p><descr>deletes this object.</descr></p>
  <li><com><I>NoiseLine</I>:<b>setStartPoint(</b><I>number</I> <B>x</B>, <I>number</I> <B>y</B>, <I>number</I> <B>z</B><b>)</b></com>
    <p><descr>sets the line start point.</descr></p>
  <li><com><I>NoiseLine</I>:<b>setEndPoint(</b><I>number</I> <B>x</B>, <I>number</I> <B>y</B>, <I>number</I> <B>z</B><b>)</b></com>
    <p><descr>sets the line end point.</descr></p>
  <li><com><I>NoiseLine</I>:<b>setAttenuate(</b><I>boolean</I> <B>attenuate</B> = true<b>)</b></com>
    <p><descr>sets a flag indicating that the output value is to be attenuated (moved toward 0.0) as the ends of the line segment are approached.</descr></p>
  <li><com><I>boolean</I> <I>NoiseLine</I>:<b>isAttenuate(</b><b>)</b></com>
    <p><descr>returns the value of the <I>attenuate</I> flag.</descr></p>
  <li><com><I>number</I> <I>NoiseLine</I>:<b>getValue(</b><I>number</I> <B>p</B><b>)</b></com>
    <p><descr>returns the output value from the noise module given the one-dimensional coordinate of the specified input value located on the line segment.</descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="noiseplane">
<h5>3.4.6.1 NoisePlane</h5>
</a>The <b><class>NoisePlane</class></b> represents a model that is used to retrieve the noise value at a specified location (on a plane) generated by a noise module.
<ul>
  <li><com><I>NoisePlane</I> <b>NoisePlane(</b><I>NoiseModule</I> <B>module</B><b>)</b></com>
    <p><descr>creates a model attached to the given module.</descr></p>
  <li><com><I>NoisePlane</I>:<b>delete(</b><b>)</b></com>
    <p><descr>deletes this object.</descr></p>
  <li><com><I>number</I> <I>NoisePlane</I>:<b>getValue(</b><I>number</I> <B>x</B>, <I>number</I> <B>z</B><b>)</b></com>
    <p><descr>returns the output value from the noise module given the coordinates of the specified input value located on the surface of the plane.</descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="noisesphere">
<h5>3.4.6.2 NoiseSphere</h5>
</a>The <b><class>NoiseSphere</class></b> represents a model that is used to retrieve the noise value at a specified location (on a sphere) generated by a noise module.
<ul>
  <li><com><I>NoiseSphere</I> <b>NoiseSphere(</b><I>NoiseModule</I> <B>module</B><b>)</b></com>
    <p><descr>creates a model attached to the given module.</descr></p>
  <li><com><I>NoiseSphere</I>:<b>delete(</b><b>)</b></com>
    <p><descr>deletes this object.</descr></p>
  <li><com><I>number</I> <I>NoiseSphere</I>:<b>getValue(</b><I>number</I> <B>lat</B>, <I>number</I> <B>lon</B><b>)</b></com>
    <p><descr>returns the output value from the noise module given the (latitude, longitude) coordinates of the specified input value located on the surface of the sphere.</descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="noisecylinder">
<h5>3.4.6.3 NoiseCylinder</h5>
</a>The <b><class>NoiseCylinder</class></b> represents a model that is used to retrieve the noise value at a specified location (on a cylinder) generated by a noise module.
<ul>
  <li><com><I>NoiseCylinder</I> <b>NoiseCylinder(</b><I>NoiseModule</I> <B>module</B><b>)</b></com>
    <p><descr>creates a model attached to the given module.</descr></p>
  <li><com><I>NoiseCylinder</I>:<b>delete(</b><b>)</b></com>
    <p><descr>deletes this object.</descr></p>
  <li><com><I>number</I> <I>NoiseCylinder</I>:<b>getValue(</b><I>number</I> <B>angle</B>, <I>number</I> <B>height</B><b>)</b></com>
    <p><descr>returns the output value from the noise module given the (angle, height) coordinates of the specified input value located on the surface of the cylinder.</descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="material">
<h3>3.5 Material</h3>
</a>The <b><class>Material</class></b> extends <b><parent>Void</parent></b> and is used to hold
the light properties of a surface considering the material color, diffuse
mapping, environment mapping and gloss mapping.
<ul>
  <li><i><com>Material</i> <b>Material()</com></b>
    <p><descr>creates a material with default properties.</descr>
    <p>&nbsp;
  <li><com><I>Material</I>:<b>copy(</b><I>Material</I> <B>material</B><b>)</b></com>
    <p><descr>copies the properties of this material in the given material.</descr>
    <p>&nbsp;
  <li><i><com>Material</i>:<b>setAmbient(</b><i>number</i> <b>red,</b> <i>number</i>
    <b>green,</b> <i>number</i> <b>blue,</b> <i>number</i> <b>alpha</b> = 1)</com>
    <p><descr>sets the ambient color of the material (color values range from 0
    to 1). The alpha component is <i>1</i> by default.</descr>
    <p>&nbsp;
  <li><i><com>Material</i>:<b>setDiffuse(</b><i>number</i> <b>red,</b> <i>number</i>
    <b>green,</b> <i>number</i> <b>blue,</b> <i>number</i> <b>alpha</b> = 1)</com>
    <p><descr>sets the diffuse color of the material (color values range from 0
    to 1). The alpha component is <i>1</i> by default.</descr>
    <p>&nbsp;
  <li><i><com>Material</i>:<b>setSpecular(</b><i>number</i> <b>red,</b> <i>number</i>
    <b>green,</b> <i>number</i> <b>blue,</b> <i>number</i> <b>alpha</b> = 1)</com>
    <p><descr>sets the specular color of the material (color values range from 0
    to 1). The alpha component is <i>1</i> by default.</descr>
    <p>&nbsp;
  <li><i><com>Material</i>:<b>setEmissive(</b><i>number</i> <b>red,</b> <i>number</i>
    <b>green,</b> <i>number</i> <b>blue,</b> <i>number</i> <b>alpha</b> = 1)</com>
    <p><descr>sets the emissive color of the material (color values range from 0
    to 1). The alpha component is <i>1</i> by default.</descr>
    <p>&nbsp;
  <li><i><com>Material</i>:<b>setShininess(</b><i>number</i> <b>shininess)</com></b>
    <p><descr>sets the specular exponent of the material (values range from 0 to
    128 - from smooth to rough).</descr>
    <p>&nbsp;
  <li><i><com>Material</i>:<b>setTransparency(</b><i>number</i> <b>transparency)</com></b>
    <p><descr>sets the transparency alpha parameter of the material (values
    range from 0 to 1).</descr>
    <p>&nbsp;
  <li><i><com>Material</i>:<b>setDiffuseTexture(</b><i>Texture</i> <b>diffuseMap)</com></b>
    <p><descr>sets the texture used for the diffuse color.</descr>
    <p>&nbsp;
  <li><i><com>Material</i>:<b>setEnlighted(</b><i>boolean </i><b>enlighted</b> =
    true<b>)</com></b>
    <p><descr>sets the lighting status of the material. If the material is not
    enlighted (lighting off), the emissive component is used to give a color to
    the material.</descr></p>
  <li><i><com>Material</i>:<b>setEnvironmentTexture(</b><i>Texture</i> <b>environmentMap</b>,
    <i>number</i> <b>reflection</b> = 1<b>)</com></b>
    <p><descr>sets the texture used for the environment mapping. The optional <i>reflection</i>
    parameter gives the percentage of diffuse and environment light (the default
    value of 1 means no diffuse light, 0 means no environment).</descr>
    <p>&nbsp;
  <li><i><com>Material</i>:<b>setEnvironment(</b><i>number</i> <b>reflection)</com></b>
    <p><descr>sets the percentage of environment light that is reflected (1
    means no diffuse light, 0 means no environment).</descr>
    <p>&nbsp;
  <li><i><com>Material</i>:<b>setGlossTexture(</b><i>Texture</i> <b>glossMap)</com></b>
    <p><descr>sets the texture used for the gloss mapping in combination with
    enviroment mapping (white areas of the map are reflective, black areas are
    opaque).</descr>
    <p>&nbsp;
  <li><i><com>Material</i>:<b>delete()</com></b>
    <p><descr>deletes the material from memory. Its reference could be still
    owned by other objects, but the use of this method is safe.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="bumpedmaterial">
<h4>3.5.1 BumpedMaterial</h4>
</a>The <b><class>BumpedMaterial</class></b> class extends <b><parent>Material</parent></b>
and inherits all its methods. This class is used when a surface needs to be bump
mapped. Emboss bump mapping is used in this version.
<ul>
  <li><i><com>BumpedMaterial</i> <b>BumpedMaterial()</com></b>
    <p><descr>creates a bumped material with default properties.</descr>
    <p>&nbsp;
  <li><i><com>BumpedMaterial</i>:<b>setBumpedTexture(</b><i>Texture</i> <b>bumpedMap)</com></b>
    <p><descr>sets the texture used for the bump mapping effect (using the <i>emboss</i>
    method).</descr>
    <p>&nbsp;
  <li><i><com>BumpedMaterial</i>:<b>setBump(</b><i>number</i> <b>bump)</com></b>
    <p><descr>sets the amount of <i>bumping</i> the surface has (0 means no
    bump, while 0.5 is the maximum of realistic bumpiness).</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="program">
<h4>3.5.2 Program</h4>
</a>The <b><class>Program</class></b> class extends <b><parent>Void</parent></b>
and provides support for the derived classes <b>VertexProgram</b> and <b>FragmentProgram</b>.
This class and its derived classes provide support for OpenGL vertex and
fragment programs in low level language (as defined by OpenGL extensions <i>GL_vertex_program_ARB</i>
and <i>GL_fragment_program_ARB</i>).
<ul>
  <li><i><com>boolean Program</i>:<b>isValid()</com></b>
    <p><descr>returns true if the (vertex or fragment) program was effectively
    loaded. If the graphics card where the script runs has no support for vertex
    of fragment programs, vertex or fragment programs are created in an invalid
    state. Check this state before using any of the following function to avoid
    crashes.</descr>
    <p>&nbsp;
  <li><i><com>Program</i>:<b>apply()</com></b>
    <p><descr>makes this program current. This function is not used during
    rendering but is useful to define parameters for this program. Remember to
    use the function <i>Program:unapply()</i> at the end of parameters
    definitions to restore the normal rendering mode.</descr>
    <p>&nbsp;
  <li><i><com>Program</i>:<b>unapply()</com></b>
    <p><descr>removes this program from the rendering pipeline. This function is
    not used during rendering but is useful to restore the normal rendering mode
    after a call to <i>Program:apply()</i>.</descr>
    <p>&nbsp;
  <li><i><com>Program</i>:<b>setLocalParameters(</b><i>number</i> <b>idx, </b><i>number</i>
    <b>x, </b><i>number</i> <b>y, </b><i>number</i> <b>z, </b><i>number</i> <b>w
    )</com></b>
    <p><descr>sets the <i>idx</i>th local parameter of the current (vertex or
    fragment) program given the <i>x, y, z, w </i>values. The program becomes
    current with a call to <i>apply()</i>.</descr>
    <p>&nbsp;
  <li><i><com>Program</i>:<b>setEnvParameters(</b><i>number</i> <b>idx, </b><i>number</i>
    <b>x, </b><i>number</i> <b>y, </b><i>number</i> <b>z, </b><i>number</i> <b>w
    )</com></b>
    <p><descr>sets the <i>idx</i>th environmental parameter, accessible from
    every (vertex or fragment) program, given the <i>x, y, z, w </i>values.</descr>
    <p>&nbsp;
  <li><i><com>Program</i>:<b>delete()</com></b>
    <p><descr>deletes the program from memory. Its reference could be still
    owned by other objects, but the use of this method is safe.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="vertexprogram">
<h5>3.5.2.1 VertexProgram</h5>
</a>The <b><class>VertexProgram</class></b> extends <b><parent>Program</parent></b> and inherits
all its methods. This class provides support for OpenGL vertex programs in low
level language (as defined by OpenGL extensions <i>GL_vertex_program_ARB</i>)
<ul>
  <li><i><com>VertexProgram </i><b>VertexProgram(</b><i>string <b>asciiSource</b></i><b>)</com></b>
    <p><descr>creates a vertex program from the specified string that contains
    the source. Check <i>isValid()</i> to discover if the vertex program was
    effectively loaded.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="fragmentprogram">
<h5>3.5.2.2 FragmentProgram</h5>
</a>The <b><class>FragmentProgram</class></b> extends <b><parent>Program</parent></b> and
inherits all its methods. This class provides support for OpenGL fragment
programs in low level language (as defined by OpenGL extension <i>GL_fragment_program_ARB</i>)
<ul>
  <li><i><com>FragmentProgram </i><b>FragmentProgram(</b><i>string <b>asciiSource</b></i><b>)</com></b>
    <p><descr>creates a fragment program from the specified string that contains
    the source. Check <i>isValid()</i> to discover if the fragment program was
    effectively loaded.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="programmaterial">
<h5>3.5.2.3 ProgramMaterial</h5>
</a>The <b><class>ProgramMaterial</class></b> class extends <b><parent>Material</parent></b>
and inherits all its methods. It is used to hold the programmable properties of
a surface through programs written in a low level language (as defined by OpenGL
extensions <i>GL_vertex_program_ARB</i> and <i>GL_fragment_program_ARB</i>).<br>
The textures are applied and accessible to the shader in the following order: <i>diffuseTexture</i>,
<i>glossTexture</i>, <i>environmentTexture</i>, then other textures as they were
added to the shader. If any of <i>diffuseTexture</i>, <i>glossTexture</i> or <i>environmentTexture</i>
are not defined, they are simply skipped and the texture that follows in the
default order is applied instead.
<ul>
  <li><i><com>ProgramMaterial </i><b>ProgramMaterial()</com></b>
    <p><descr>creates a program material.</descr>
    <p>&nbsp;
  <li><i><com>ProgramMaterial</i>:<b>setVertexProgram(</b><i>VertexProgram</i>
    vertexProgram<b>)</com></b>
    <p><descr>sets the vertex program for this program material.</descr>
    <p>&nbsp;
  <li><i><com>ProgramMaterial</i>:<b>setFragmentProgram(</b><i>FragmentProgram</i>
    fragmentProgram<b>)</com></b>
    <p><descr>sets the fragment program for this program material.</descr>
    <p>&nbsp;
  <li><i><com>ProgramMaterial</i>:<b>addTexture(</b><i>Texture</i> texture<b>)</com></b>
    <p><descr>adds a texture to this program material. Remember that also the <i>diffuseTexture</i>,
    <i>glossTexture</i> and <i>environmentTexture</i> are available through the <i>Material</i>
    interface and, if defined, they are applied in order before any added
    texture.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="shader">
<h4>3.5.3 Shader</h4>
</a>The <b><class>Shader</class></b> class extends <b><parent>Void</parent></b>
and provides support for the derived classes <b>VertexShader</b> and <b>FragmentShader</b>.
This class and its derived classes provide support for OpenGL shaders in GLSL
language (as defined by OpenGL extensions <i>GL_vertex_shader_ARB</i> and <i>GL_fragment_shader_ARB</i>).
<ul>
  <li><i><com>boolean Shader</i>:<b>isCompiled()</com></b>
    <p><descr>returns true if the (vertex or fragment) shader was effectively
    compiled. If the graphics card where the script runs has no support for
    vertex of fragment programs, vertex or fragment programs are not compiled.</descr>
    <p>&nbsp;
  <li><i><com>string Shader</i>:<b>getInfo()</com></b>
    <p><descr>returns a string that specifies the last error occurred to the
    shader.</descr>
    <p>&nbsp;
  <li><i><com>boolean Shader</i>:<b>compile(</b><i>string</i> <b>asciiSource)</com></b>
    <p><descr>compiles the specified string containing the source and returns
    true on success.</descr>
    <p>&nbsp;
  <li><i><com>Shader</i>:<b>delete()</com></b>
    <p><descr>deletes the shader from memory. Its reference could be still owned
    by other objects, but the use of this method is safe.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="fragmentshader">
<h5>3.5.3.1 FragmentShader</h5>
</a>The <b><class>FragmentShader</class></b> extends <b><parent>Shader</parent></b> and inherits
all its methods. This class provides support for OpenGL fragment shaders in GLSL
language.
<ul>
  <li><i><com>FragmentShader </i><b>FragmentShader(</b><i>string</i> <b>asciiSource)</com></b>
    <p><descr>creates a fragment shader compiling the specified string
    containing the source. Check <i>isCompiled()</i> to discover if the fragment
    shader was effectively compiled.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="vertexshader">
<h5>3.5.3.2 VertexShader</h5>
</a>The <b><class>VertexShader</class></b> extends <b><parent>Shader</parent></b> and inherits
all its methods. This class provides support for OpenGL vertex shaders in GLSL
language.
<ul>
  <li><i><com>VertexShader </i><b>VertexShader(</b><i>string <b>asciiSource</b></i><b>)</com></b>
    <p><descr>creates a vertex shader compiling the specified string containing
    the source. Check <i>isCompiled()</i> to discover if the vertex shader was
    effectively compiled.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="shaderprogram">
<h5>3.5.3.3 ShaderProgram</h5>
</a>The <b><class>ShaderProgram</class></b> extends <b><parent>Void</parent></b> and is a
container for <b>Shaders</b>.
<ul>
  <li><i><com>ShaderProgram </i><b>ShaderProgram()</com></b>
    <p><descr>creates a shader program.</descr>
    <p>&nbsp;
  <li><i><com>string ShaderProgram</i>:<b>getInfo()</com></b>
    <p><descr>returns a string that specifies the last error occurred to the
    shader program.</descr>
    <p>&nbsp;
  <li><i><com>ShaderProgram</i>:<b>attach(</b><i>Shader</i> <b>shader)</com></b>
    <p><descr>attaches a shader to this shader program.</descr>
    <p>&nbsp;
  <li><i><com>ShaderProgram</i>:<b>detach(</b><i>Shader</i> <b>shader)</com></b>
    <p><descr>detaches a shader from this shader program.</descr>
    <p>&nbsp;
  <li><i><com>boolean ShaderProgram</i>:<b>link()</com></b>
    <p><descr>links the shaders owned by this shader program and returns true on
    success.</descr>
    <p>&nbsp;
  <li><i><com>boolean ShaderProgram</i>:<b>validate()</com></b>
    <p><descr>validates the shader program in the current context and returns
    true on success.</descr>
    <p>&nbsp;
  <li><i><com>ShaderProgram</i>:<b>apply()</com></b>
    <p><descr>makes the shader program current. This function is not used during
    rendering but it is necessary to define uniforms for this shader program, so
    use it before setting any uniform for the <i>shader program</i>. Remember to
    use the function <i>useFixedPipeline()</i> at the end of uniforms
    definitions to restore the normal rendering mode.</descr>
    <p>&nbsp;
  <li><i><com>number ShaderProgram</i>:<b>getUniformLocation(</b><i>string</i> <b>uniformName)</com></b>
    <p><descr>returns the index of the specified uniform.</descr>
    <p>&nbsp;
  <li><i><com>ShaderProgram</i>:<b>setUniformFloats(</b><i>number</i> <b>index</b>,
    <i>number</i> <b>x</b>, <i>number</i> <b>y</b> = nil, <i>number</i> <b>z</b> = nil, <i>number</i>
    <b>w = nil)</com></b>
    <p><descr>sets the uniform at <i>index</i> to the specified float arguments. If several arguments are <I>nil</I>, those arguments are ignored (this is used to pass values to vectors with less than 4 components).</descr>
    <p>&nbsp;
  <li><i><com>ShaderProgram</i>:<b>setUniformFloat(</b><i>number</i> <b>index</b>,
    <i>number</i> <b>x)</com></b>
    <p><descr>sets the uniform at <i>index</i> to the specified float argument.</descr>
    <p>&nbsp;
  <li><i><com>ShaderProgram</i>:<b>setUniformInt(</b><i>number</i> <b>index</b>,
    <i>number</i> <b>x)</com></b>
    <p><descr>sets the uniform at <i>index</i> to the specified int argument.</descr>
    <p>&nbsp;
  <li><i><com>ShaderProgram</i>:<b>setUniformMatrix2(</b><i>number</i> <b>index</b>,
    <i>table</i> <b>array)</com></b>
    <p><descr>sets the uniform of type matrix 2x2 at <i>index</i> with the
    specified float array.</descr>
    <p>&nbsp;
  <li><i><com>ShaderProgram</i>:<b>setUniformMatrix3(</b><i>number</i> <b>index</b>,
    <i>table</i> <b>array)</com></b>
    <p><descr>sets the uniform of type matrix 3x3 at <i>index</i> with the
    specified float array.</descr>
    <p>&nbsp;
  <li><i><com>ShaderProgram</i>:<b>setUniformMatrix4(</b><i>number</i> <b>index</b>,
    <i>table</i> <b>array)</com></b>
    <p><descr>sets the uniform of type matrix 4x4 at <i>index</i> with the
    specified float array.</descr>
    <p>&nbsp;
  <li><i><com>ShaderProgram</i>:<b>delete()</com></b>
    <p><descr>deletes the shader program from memory. Its reference could be
    still owned by other objects, but the use of this method is safe.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="shadermaterial">
<h4>3.5.4 ShaderMaterial</h4>
</a>The <b><class>ShaderMaterial</class></b> class extends <b><parent>Material</parent></b>
and inherits all its methods. It is used to hold the programmable properties of
a surface through shaders written in the GLSL language.<br>
The textures are applied and accessible to the shader in the following order: <i>diffuseTexture</i>,
<i>glossTexture</i>, <i>environmentTexture</i>, then other textures as they were
added to the shader. If any of <i>diffuseTexture</i>, <i>glossTexture</i> or <i>environmentTexture</i>
are not defined, they are simply skipped and the texture that follows in the
default order is applied instead.
<ul>
  <li><i><com>ShaderMaterial </i><b>ShaderMaterial()</com></b>
    <p><descr>creates a shader material.</descr>
    <p>&nbsp;
  <li><i><com>ShaderMaterial</i>:<b>setShaderProgram(</b><i>ShaderProgram</i>
    shaderProgram<b>)</com></b>
    <p><descr>sets the shader program for this shader material.</descr>
    <p>&nbsp;
  <li><i><com>ShaderMaterial</i>:<b>addTexture(</b><i>Texture</i> texture<b>)</com></b>
    <p><descr>adds a texture to this shader material. Remember that also the <i>diffuseTexture</i>,
    <i>glossTexture</i> and <i>environmentTexture</i> are available through the <i>Material</i>
    interface and, if defined, they are applied in order before any added
    texture.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="reference">
<h3>3.6 Reference</h3>
</a>The <b><class>Reference</class></b> class (in the sense of the <i>reference frames</i> of physics) extends <b><parent>Transform</parent></b> and inherits all its methods. It
is used by several subclasses to change the position and orientation of the object in the space.
<ul>
  <li><i><com>Reference</i> <b>Reference()</com></b>
    <p><descr>creates an object of type <i>Reference</i>.</descr>
    </p>
  <li><i><com>Reference</i>:<b>reset()</com></b>
    <p><descr>resets the transform matrix of the object.</descr>
    <p>&nbsp;
  <li><i><com>Reference</i>:<b>scale(</b><i>number</i> <b>scale</b>, <i>number</i>
    <b>scaleY</b> = nil, <i>number</i> <b>scaleZ</b> = nil <b>)</com></b>
    <p><descr>scales uniformly the object by the <i>scale</i> factor. If <i>scaleY</i>
    and <i>scaleZ</i> are specified a not uniform scaling is performed.</descr>
    <p>&nbsp;
  <li><i><com>Reference</i>:<b>move(</b><i>number</i> <b>dx,</b> <i>number</i> <b>dy,</b>
    <i>number</i> <b>dz)</com></b>
    <p><descr>moves the object from the current position to another position
    translated by the vector <i>(dx,dy,dz)</i>.</descr>
    <p>&nbsp;
  <li><i><com>Reference</i>:<b>moveForward(</b><i>number</i> <b>step)</com></b>
    <p><descr>moves the object of length <i>step</i> in its view direction.</descr>
    <p>&nbsp;
  <li><i><com>Reference</i>:<b>moveSide(</b><i>number</i> <b>step)</com></b>
    <p><descr>moves the object of length <i>step</i> in its side (left)
    direction.</descr>
    <p>&nbsp;
  <li><i><com>Reference</i>:<b>moveUp(</b><i>number</i> <b>step)</com></b>
    <p><descr>moves the object of length <i>step</i> in its up direction.</descr>
    <p>&nbsp;
  <li><i><com>Reference</i>:<b>moveStanding(</b><i>number</i> <b>step)</com></b>
    <p><descr>moves the object of length <i>step</i> in its view direction
    projected on the ground plane.</descr>
    <p>&nbsp;
  <li><i><com>Reference</i>:<b>roll(</b><i>number</i> <b>angle)</com></b>
    <p><descr>rolls the object of an angle <i>angle</i>.</descr>
    <p>&nbsp;
  <li><i><com>Reference</i>:<b>yaw(</b><i>number</i> <b>angle)</com></b>
    <p><descr>yaws the object of an angle <i>angle</i>.</descr>
    <p>&nbsp;
  <li><i><com>Reference</i>:<b>pitch(</b><i>number</i> <b>angle)</com></b>
    <p><descr>pitches the object of an angle <i>angle</i>.</descr>
    <p>&nbsp;
  <li><i><com>Reference</i>:<b>rotStanding(</b><i>number</i> <b>angle)</com></b>
    <p><descr>rotates the object around the vertical axis of an angle <i>angle</i>.</descr>
    <p>&nbsp;
  <li><i><com>Reference</i>:<b>setPosition(</b><i>number</i> <b>x,</b> <i>number</i>
    <b>y,</b> <i>number</i> <b>z)</com></b>
    <p><descr>moves the object from the current position to the point of
    coordinates <i>(x,y,z)</i>.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>Reference</i>:<b>getPosition()</com></b>
    <p><descr>returns the coordinates of the current position of the object.</descr>
    <p>&nbsp;
  <li><i><com>Reference</i>:<b>setViewDirection(</b><i>number</i> <b>viewX,</b> <i>number</i>
    <b>viewY,</b> <i>number</i> <b>viewZ)</com></b>
    <p><descr>sets the current <i>view</i> direction of the object.</descr>
    <p>&nbsp;
  <li><i><com>number</i> viewX, <i>number</i> viewY, <i>number</i> viewZ = <i>Reference</i>:<b>getViewDirection()</com></b>
    <p><descr>returns the components of the current <i>view</i> direction of the
    object.</descr>
    <p>&nbsp;
  <li><i><com>Reference</i>:<b>setUpDirection(</b><i>number</i> <b>upX,</b> <i>number</i>
    <b>upY,</b> <i>number</i> <b>upZ)</com></b>
    <p><descr>sets the current <i>up</i> direction of the object.</descr>
    <p>&nbsp;
  <li><i><com>number</i> upX, <i>number</i> upY, <i>number</i> upZ = <i>Reference</i>:<b>getUpDirection()</com></b>
    <p><descr>returns the components of the current <i>up</i> direction of the
    object.</descr>
    <p>&nbsp;
  <li><i><com>Reference</i>:<b>setSideDirection(</b><i>number</i> <b>sideX,</b> <i>number</i>
    <b>sideY,</b> <i>number</i> <b>sideZ)</com></b>
    <p><descr>sets the current <i>side</i> (left) direction of the object.</descr>
    <p>&nbsp;
  <li><i><com>number</i> sideX, <i>number</i> sideY, <i>number</i> sideZ = <i>Reference</i>:<b>getSideDirection()</com></b>
    <p><descr>returns the components of the current <i>side</i> (left) direction
    of the object.</descr>
    <p>&nbsp;
  <li><i><com>Reference</i>:<b>rotAround(</b><i>number</i> <b>angle)</com></b>
    <p><descr>rotates the reference around a vertical axis that passes through
    the origin of the coordinates.</descr>
    <p>&nbsp;
  <li><i><com>Reference</i>:<b>pointTo(</b><i>number</i> <b>x,</b> <i>number</i>
    <b>y,</b> <i>number</i> <b>z)</com></b>
    <p><descr>points the view direction of the reference towards the specified
    position.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="transform">
<h4>3.6.0 Transform</h4>
</a>The <b><class>Transform</class></b> class extends <b><parent>Void</parent></b>
and is parent of <b>Reference</b> and adds some useful methods to it. It
represents a 16x16 matrix.
<ul>
  <li><i><com>Transfom</i> <b>Transform()</com></b>
    <p><descr>creates an object of type <i>Transform</i>.</descr>
    <p>&nbsp;
  <li><i><com>Transform</i>:<b>delete()</com></b>
    <p><descr>deletes an object of type <i>Transform</i>.</descr>
    <p>&nbsp;
  <li><i><com>Transform</i>:<b>set(</b><i>Transform</i> <b>transform)</com></b>
    <p><descr>copies the components of the transformation matrix given as
    argument in the current transform object.</descr>
    <p>&nbsp;
  <li><i><com>number</i> resX, <i>number</i> resY, <i>number</i> resZ = <i>Transform</i>:<b>multiply(</b><i>number</i>
    <b>vecX,</b> <i>number</i> <b>vecY,</b> <i>number</i> <b>vecZ)</com></b>
    <p><descr>multiplies the vector given as argument by the current
    transformation matrix and returns the result.</descr>
    <p>&nbsp;
  <li><i><com>Transform</i>:<b>rotate(</b><i>Transform</i> <b>transform)</com></b>
    <p><descr>rotates the transform given as argument according to the rotation
    matrix of the current transform. The result is stored in the current
    transform.</descr>
    <p>&nbsp;
  <li><i><com>Transform</i>:<b>rotateT(</b><i>Transform</i> <b>transform)</com></b>
    <p><descr>rotates the current transform according to the rotation matrix of
    the transform given as argument. The result is stored in the current
    transform.</descr>
    <p>&nbsp;
  <li><i><com>Transform</i>:<b>transform(</b><i>Transform</i> <b>transform)</com></b>
    <p><descr>multiplies the transform given as argument with the current
    transform. The result is stored in the current transform.</descr>
    <p>&nbsp;
  <li><i><com>Transform</i>:<b>transformT(</b><i>Transform</i> <b>transform)</com></b>
    <p><descr>multiplies the current transform with the transform given as
    argument. The result is stored in the current transform.</descr>
    <p>&nbsp;
  <li><i><com>Transform</i>:<b>interpolate(</b><i>Transform</i> <b>target, </b><i>number
    </i><b>factor)</com></b>
    <p><descr>interpolates the current transform between itself and the <i>target</i>
    transform according to the the argument <i>factor</i>. A value of 0 leaves
    the transform unchanged, while a value of 1 makes the current transform
    equal to the <i>target</i> one.</descr>
    <p>&nbsp;
  <li><i><com>Transform</i>:<b>exchangeYZX()</com></b>
    <p><descr>exchanges the axes of the transform from XYZ to YZX.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="camera">
<h4>3.6.1 Camera</h4>
</a>The <b><class>Camera</class></b> class extends <b><parent>Reference</parent></b>
and inherits all its methods. It is the class of the <i>camera</i> object.
<ul>
  <li><i><com>number </i>horizontalViewX, <i>number </i>horizontalViewZ = <i>Camera</i>:<b>getHorizontalView()</com></b>
    <p><descr>returns the horizontal view direction of the camera.</descr>
    </p>
  <li><i><com>number</i> winX, <i>number</i> winY, <i>number </i>winZ = <i>Camera</i>:<b>project(</b>
    <i>number</i> <b>objX</b>, <i>number</i> <b>objY</b>, <i>number</i> <b>objZ)</com></b>
    <p><descr>returns the projection in window coordinates of the specified
    point in world coordinates.</descr>
    </p>
  <li><i><com>number</i> objX, <i>number</i> objY, <i>number </i>objZ = <i>Camera</i>:<b>unproject(</b>
    <i>number</i> <b>winX</b>, <i>number</i> <b>winY</b>, <i>number</i> <b>winZ</b>
    = nil<b>)</com></b>
    <p><descr>returns the point in world coordinates that corresponds to the
    specified projection in window coordinates. In <i>winZ</i> lacks, the
    function try to guess a value reading the contents of the depth buffer (this
    kind of operation is very time consuming, so avoid it providing a value for <i>winZ</i>).</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="object">
<h4>3.6.2 Object</h4>
</a>The <b><class>Object</class></b> class extends <b><parent>Reference</parent></b>
and inherits all its methods. This is the base class of all the objects that
must be rendered and moved through the world.
<ul>
  <li><com><i>number</i> <i>Object</i>:<b>getName()</com></b>
    <p><descr>returns the integer associated to this object (used for picking).</descr>
    </p>
  <li><com><i>Object</i>:<b>setName(</b><i>number</i> <b>name</b><b>)</b></com>
    <p><descr>sets the integer associated to this object (used for picking).</descr>
    </p>
  <li><com><i>number</i> <i>Object</i>:<b>isClipped()</com></b>
    <p><descr>returns <i>true</i> if the object is clipped by the view frustum, <i>false</i>
    otherwise.</descr>
    </p>
  <li><com><i>boolean</i> <i>Object</i>:<b>isClipped()</com></b>
    <p><descr>returns <i>true</i> if the object is clipped by the view frustum, <i>false</i>
    otherwise.</descr>
    </p>
  <li><com><i>boolean</i> <i>Object</i>:<b>isVisible()</com></b>
    <p><descr>returns <i>true</i> if the object is visible, <i>false</i>
    otherwise.</descr>
    </p>
  <li><i><com>Object</i>:<b>show()</com></b>
    <p><descr>makes this object visible.</descr>
    <p>&nbsp;
  <li><i><com>Object</i>:<b>hide()</com></b>
    <p><descr>makes this object invisible.</descr>
    <p>&nbsp;
  <li><i><com>Object</i>:<b>setTransparent()</com></b>
    <p><descr>changes the visualization mode of this object to transparent. It
    must be set before the object is added to the world.</descr>
    <p>&nbsp;
  <li><com>
<i>number</i> minX, <i>number</i> minY, <i>number</i> minZ, 
<i>number</i> maxX, <i>number</i> maxY, <i>number</i> maxZ = 
<i>Object</i>:<b>getAABB(</b><I>number</I> <B>frame</B> = -1<b>)</com></b>
    <p><descr>returns the axis aligned bounding box of the object. The returned values does not take in account the transformations of the object. If the method is not supported by the object, the returned values are <I>nil</I>. The <I>frame</I> argument is useful to specify which frame is of interest in case of animated objects: The value -1 means that all the frames must be considered.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Object</i>:<b>getMaxRadius()</com></b>
    <p><descr>returns the radius of the bounding sphere of the object (used for
    frustum culling checks).</descr>
    <p>&nbsp;
  <li><i><com>Object</i>:<b>setMaxRadius(</b><i>number</i> <b>maxRadius)</com></b>
    <p><descr>sets the radius of the bounding sphere of the object (used for
    frustum culling checks). This value is computed when an object is created
    and normally the programmer doesn't need to change it.</descr>
    <p>&nbsp;
  <li><i><com>Object</i>:<b>setCulled(</b><i>boolean</i> <b>culled</b> =
    true<b>)</com></b>
    <p><descr>specifies if the object needs triangles culling or not. <i>true</i>
    means that some triangles may be seen from one side or the other, <i>false</i>
    means instead that only one face of the triangles is visible.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Object</i>:<b>getDistance()</com></b>
    <p><descr>returns the distance of the object from the camera plane of view.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Object</i>:<b>includes(</b><i>number</i> <b>x,</b> <i>number</i>
    <b>y,</b> <i>number</i> <b>z)</com></b>
    <p><descr>checks if the specified point is inside the bounding sphere of the
    object. Returns <b>nil</b> if the point is outside the sphere.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="scriptobject">
<h5>3.6.2.0 ScriptObject</h5>
</a>The <b><class>ScriptObject</class></b> class extends <b><parent>Object</parent></b>
and inherits all its methods. It provides a way to render an object throught a Lua function.
<p>Since the status of the OpenGL renderer may be altered by OpenGL calls in the specified Lua render function, it's important to reset the status to its original value, or the normal rendering of other objects will give wrong results. The following are the default settings made by the engine at the beginning:
<p><I>glShadeModel(GL_SMOOTH); glClearDepth(1); glClearColor(0,0,0,1); glClearStencil(0); glEnable(GL_DEPTH_TEST); glEnable(GL_LIGHTING); glEnable(GL_CULL_FACE); glDisable(GL_BLEND); glEnable(GL_TEXTURE_2D); glDisable(GL_TEXTURE_GEN_S); glDisable(GL_TEXTURE_GEN_T); glDisable(GL_POLYGON_SMOOTH); glHint(GL_POLYGON_SMOOTH_HINT,GL_NICEST); glLightModelf(GL_LIGHT_MODEL_LOCAL_VIEWER,1); glDisable(GL_LINE_SMOOTH); glDisable(GL_POINT_SMOOTH); glDisable(GL_COLOR_MATERIAL); glDepthFunc(GL_LEQUAL); glDepthMask(GL_TRUE); glAlphaFunc(GL_GREATER,0); glHint(GL_PERSPECTIVE_CORRECTION_HINT,GL_NICEST); glHint(GL_FOG_HINT,GL_NICEST); glHint(GL_LINE_SMOOTH_HINT,GL_NICEST); glHint(GL_POINT_SMOOTH_HINT,GL_NICEST); glCullFace(GL_BACK); glFrontFace(GL_CCW); glPixelStorei(GL_UNPACK_ALIGNMENT,1); glTexEnvf(GL_TEXTURE_ENV,GL_TEXTURE_ENV_MODE,GL_MODULATE); glLightModelf(GL_LIGHT_MODEL_TWO_SIDE,GL_FALSE); glMatrixMode(GL_MODELVIEW);</I>
<p>If any of the above settings is modified, the programmer is responsible for restoring the default state before the Lua function used for rendering returns.
<ul>
  <li><com><i>ScriptObject</i> <b>ScriptObject()</b></com>
    <p><descr>creates an object.</descr>
    <p>&nbsp;
  <li><i><com>ScriptObject</i>:<b>setFunctionRender(</b><i>string</i> <B>functionName</B><b>)</com></b>
    <p><descr>sets the name of the Lua function used for rendering.</descr>
    <p>&nbsp;
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="objects">
<h5>3.6.2.1 Objects</h5>
</a>The <b><class>Objects</class></b> class extends <b><parent>Object</parent></b>
and inherits all its methods. It is used to treat a collection of objects as a
single object.
<ul>
  <li><i><com>Objects</i> <b>Objects()</com></b>
    <p><descr>creates an empty set of objects.</descr>
    <p>&nbsp;
  <li><i><com>Objects</i>:<b>add(</b><i>Object</i> <B>object</B><b>)</com></b>
    <p><descr>adds an object to this collection of objects.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Objects</i>:<b>getCount()</com></b>
    <p><descr>returns the number of the objects included in this collection.</descr>
    <p>&nbsp;
  <li><i><com>Object</i> <i>Objects</i>:<b>getFirst()</com></b>
    <p><descr>returns the first object in the collection (<i>nil</i> if the
    collection is empty).</descr>
    <p>&nbsp;
  <li><i><com>Object</i> <i>Objects</i>:<b>getNext()</com></b>
    <p><descr>returns the next object in the collection (<i>nil</i> if there is
    no other object).</descr>
    <p>&nbsp;
  <li><i><com>Mesh</i> <i>Objects</i>:<b>getFirstMesh()</com></b>
    <p><descr>returns the first mesh in the collection (<i>nil</i> if the
    collection is empty or if the objects are not meshes).</descr>
    <p>&nbsp;
  <li><i><com>Mesh</i> <i>Objects</i>:<b>getNextMesh()</com></b>
    <p><descr>returns the next object in the collection (<i>nil</i> if there is
    no other object or if the objects are not meshes).</descr>
    <p>&nbsp;
  <li><i><com>BumpedMesh</i> <i>Objects</i>:<b>getFirstBumpedMesh()</com></b>
    <p><descr>returns the first bumped mesh in the collection (<i>nil</i> if the
    collection is empty or if the objects are not bumped meshes).</descr>
    <p>&nbsp;
  <li><i><com>BumpedMesh</i> <i>Objects</i>:<b>getNextBumpedMesh()</com></b>
    <p><descr>returns the next object in the collection (<i>nil</i> if there is
    no other object or if the objects are not bumped meshes).</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="lod">
<h5>3.6.2.1.1 Lod</h5>
</a>The <b><class>Lod</class></b> class extends <b><parent>Object</parent></b>
and inherits all its methods. It is used to implement a simple <i>level of
detail</i> mechanism applied to objects.
<ul>
  <li><i><com>Lod</i> <b>Lod()</com></b>
    <p><descr>creates a new <i>Lod</i> object.</descr>
    </p>
  <li><i><com>Lod</i>:<b>addLevel(</b><i>number</i> <b>maxDistance,</b> <i>Object</i>
    object<b>)</com></b>
    <p><descr>adds an object that is rendered when the distance of the <i>Lod</i>
    is less than <i>maxDistance</i>. The objects are considered in the order
    they were added to the <i>Lod</i>: This means that the <i>maxDistances</i>
    are not sorted, so add the objects from the nearest to the farthest. If no <i>maxDistance</i>
    is greater than the distance of the <i>Lod</i>, nothing is rendered.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="light">
<h5>3.6.2.2 Light</h5>
</a>The <b><class>Light</class></b> class extends <b><parent>Object</parent></b>
and inherits all its methods. It is a light source associated to a visible
texture.
<ul>
  <li><i><com>Light</i> <b>Light(</b><i>Texture</i> <b>lightTexture,</b> <i>number</i>
    <b>size)</com></b>
    <p><descr>creates a light given its texture and size.</descr>
    <p>&nbsp;
  <li><i><com>Light</i>:<b>setSize(</b><i>number</i> <b>size)</com></b>
    <p><descr>sets the size of the light.</descr>
    <p>&nbsp;
  <li><i><com>Light</i>:<b>setColor(</b><i>number</i> <b>red,</b> <i>number</i> <b>green,</b>
    <i>number</i> <b>blue)</com></b>
    <p><descr>sets the color of the light (color values range from 0 to 1).</descr>
    <p>&nbsp;
  <li><i><com>Light</i>:<b>setAttenuation(</b><i>number</i> <b>constant,</b> <i>number</i>
    <b>linear,</b> <i>number</i> <b>quadratic)</com></b>
    <p><descr>sets the attenuation parameters of the light.</descr>
    <p>&nbsp;
  <li><i><com>Light</i>:<b>setDirection(</b><i>number</i> <b>dirX,</b> <i>number</i>
    <b>dirY,</b> <i>number</i> <b>dirZ)</com></b>
    <p><descr>sets the direction of the light. This makes also the light
    directional.</descr>
    <p>&nbsp;
  <li><i><com>Light</i>:<b>setSpot(</b><i>number</i> <b>cutAngle,</b> <i>number</i>
    <b>exp)</com></b>
    <p><descr>sets the cut angle (in degrees) of the light and its exponent
    factor (ranging from 0 to 128). This makes also the light a spot-light.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="moon">3.6.2.2.1 Moon</a></h5>
The <b><class>Moon</class></b> class extends <b><parent>Light</parent></b> and
inherits all its methods. Is used to render a directional light source at
infinity.
<ul>
  <li><i><com>Moon</i> <b>Moon(<br>
&nbsp;&nbsp;&nbsp;</b><i>Texture</i> <b>moonTexture,</b> <i>number</i> <b>size,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>dirX,</b> <i>number</i> <b>dirY,</b> <i>number</i>
    <b>dirZ</b><br>
    <b>)</com></b>
    <p><descr>creates a moon with the given texture, size and the direction from
    which one sees the light rays of the moon come.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="sun"></h5>
<h5>3.6.2.2.1.1 Sun</h5>
</a>The <b><class>Sun</class></b> class extends <b><parent>Moon</parent></b> and
inherits all its methods. Is used to render a directional light source at
infinity with a lens flare associated.
<ul>
  <li><i><com>Sun</i> <b>Sun(<br>
&nbsp;&nbsp;&nbsp;</b><i>Texture</i> <b>sunTexture,</b> <i>number</i> <b>size,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>dirX,</b> <i>number</i> <b>dirY,</b> <i>number</i>
    <b>dirZ,</b><br>
&nbsp;&nbsp;&nbsp;<i>Texture</i> <b>flaresTexture</b> = nil, <i>number</i> <b>flaresCount</b>
    = 0, <i>number</i> <b>flaresSize</b> = 0.1<br>
&nbsp;&nbsp;&nbsp; <i>number</i> <b>cameraDistance</b> = 1000<b>, </b><i>boolean
    </i><b>checkOcclusion</b> = true<br>
    <b>)</com></b>
    <p><descr>creates a sun with the given texture, size and the direction from
    which one sees the light rays of the sun come. The sun may possess a lens
    flare with <i>flaresCount</i> flares. Each flare has a maximum size of <i>flaresSize</i>
    and a texture associated (the <i>flaresTexture</i> is composed by four flare
    images in a single image). The optional parameter <i>cameraDistance</i>
    gives the distance from the camera at which the sun is rendered, while <i>checkOcclusion</i>
    specifies whether the depth buffer must be checked to determine if the sun
    is eclipsed by an object and hide the lens flare consequently.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<a name="firelight">
<h5>3.6.2.2.2 FireLight</h5>
</a>The <b><class>FireLight</class></b> class extends <b><parent>Light</parent></b>
and inherits all its methods. Is used to render a point light source that
rapidly varies its luminosity as time passes.
<ul>
  <li><i><com>FireLight</i> <b>FireLight(</b><i>Texture</i> <b>sunTexture,</b> <i>number</i>
    <b>size)</com></b>
    <p><descr>creates a fire light with the given texture and size.</descr>
    <p>&nbsp;
  <li><i><com>FireLight</i>:<b>setIntensities(</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>minRed,</b> <i>number</i> <b>minGreen,</b>
    <i>number</i> <b>minBlue,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>maxRed,</b> <i>number</i> <b>maxGreen,</b>
    <i>number</i> <b>maxBlue</b><br>
    <b>)</com></b>
    <p><descr>sets the range of intensities from which the color of the fire
    light is chosen at random as time passes (color values range from 0 to 1).</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="mesh">
<h5>3.6.2.3 Mesh</h5>
</a>The <b><class>Mesh</class></b> class extends <b><parent>Object</parent></b>
and inherits all its methods. It represents a mesh to be rendered with a
material objects attached.
<ul>
  <li><i><com>Mesh</i> <b>Mesh(</b><i>Shape</i> <b>shape,</b> <i>Material</i> <b>material)</com></b>
    <p><descr>creates a mesh with the given shape and material.</descr>
    <p>&nbsp;
  <li><i><com>Mesh</i>:<b>delete()</com></b>
    <p><descr>deletes a mesh from memory. The programmer does not need to call
    this function directly if the <i>Mesh</i> is added as an <i>Object</i> to
    the world.</descr>
    <p>&nbsp;
  <li><i><com>Mesh</i>:<b>setScaled(</b><i>boolean</i> <b>scaled</b> = true<b>)</com></b>
    <p><descr>specifies if the mesh was scaled, so during rendering the normals
    are automatically renormalized.</descr>
    <p>&nbsp;
  <li><i><com>Shape</i> <i>Mesh</i>:<b>getShape()</com></b>
    <p><descr>returns the shape of this object.</descr>
    <p>&nbsp;
  <li><i><com>ShaderShape</i> <i>Mesh</i>:<b>getShaderShape()</com></b>
    <p><descr>returns the <i>shaderShape</i> of this object. Returns <i>nil</i>
    if the shape owned by this object is not a <i>ShaderShape</i>.</descr>
    <p>&nbsp;
  <li><i><com>Mesh</i>:<b>setMaterial(</b><i>Material</i> <b>material)</com></b>
    <p><descr>sets the material attached to this object.</descr>
    <p>&nbsp;
  <li><i><com>Material</i> <i>Mesh</i>:<b>getMaterial()</com></b>
    <p><descr>returns the material attached to this object.</descr>
    <p>&nbsp;
  <li><i><com>BumpedMaterial</i> <i>Mesh</i>:<b>getBumpedMaterial()</com></b>
    <p><descr>returns the bumped material attached to this object. Returns <i>nil</i>
    if the material owned by this object is not a <i>BumpedMaterial</i>.</descr>
    <p>&nbsp;
  <li><i><com>ProgramMaterial</i> <i>Mesh</i>:<b>getProgramMaterial()</com></b>
    <p><descr>returns the material attached to this object. Returns <i>nil</i>
    if the material owned by this object is not a <i>ProgramMaterial</i>.</descr>
    <p>&nbsp;
  <li><i><com>ShaderMaterial</i> <i>Mesh</i>:<b>getShaderMaterial()</com></b>
    <p><descr>returns the material attached to this object. Returns <i>nil</i>
    if the material owned by this object is not a <i>ShaderMaterial</i>.</descr>
    <p>&nbsp;
  <li><i><com>Mesh</i>:<b>showHalo(</b><i>number</i> <b>depth,</b> <i>number</i>
    <b>red,</b> <i>number</i> <b>green,</b> <i>number</i> <b>blue,</b> <i>number</i>
    <b>alpha)</com></b>
    <p><descr>shows a halo around the mesh with the given depth and color (color
    values range from 0 to 1).</descr>
    <p>&nbsp;
  <li><i><com>Mesh</i>:<b>hideHalo()</com></b>
    <p><descr>hides the halo around the mesh.</descr>
    <p>&nbsp;
  <li><i><com>Mesh</i> <i>Mesh</i>:<b>clone()</com></b>
    <p><descr>clones (duplicates) the mesh.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="collider">3.6.2.3.0 Collider</a></h5>
The <b><class>Collider</class></b> class extends <b><parent>Void</parent></b>
and is used to detect collisions among triangle soups. Its use is particularly
simple in conjunction with meshes. Transforms applied to a collider can't
include scaling factors.
<ul>
  <li><i><com>Collider </i><b>Collider(</b><i>Mesh</i><b> mesh</b> = nil<b>, </b><i>boolean</i><b>
    isStatic</b> = false<b>)</com></b>
    <p><descr>creates a collision model given a mesh from which the triangles
    are taken. If <i>isStatic</i> is true, the collision detection algorithm
    assumes that the mesh is static. When a mesh is specified, the collision
    model is finalized and no other triangles can be added to the model. In
    addition the collider tracks the transform of the mesh, so it is not
    necessary to call the function <i>setTranform()</i>.</descr>
    </p>
  <li><i><com>Collider</i>:<b>setShape(</b><i>Shape</i><b> shape)</com></b>
    <p><descr>specifies the shape from which the triangles must be taken and
    finalizes the object.</descr>
    <p>&nbsp;
  <li><i><com>Collider</i>:<b>setTrianglesCount(</b><i>number</i> <b>count)</com></b><br>
    <p><descr>specifies the number of triangles that are going to be added to
    this model.</descr>
    <p>&nbsp;
  <li><i><com>Collider</i>:<b>addTriangle(</b><br>
&nbsp;&nbsp;&nbsp; <i>number</i> <b>x1,</b> <i>number</i> <b>y1,</b> <i>number</i>
    <b>z1,</b><br>
&nbsp;&nbsp;&nbsp; <i>number</i> <b>x2,</b> <i>number</i> <b>y2,</b> <i>number</i>
    <b>z2,</b><br>
&nbsp;&nbsp;&nbsp; <i>number</i> <b>x3,</b> <i>number</i> <b>y3,</b> <i>number</i>
    <b>z3</b><br>
    <b>)</com><br>
    </b><br>
    <descr>adds a triangle to the model given the coordinates of its vertexes.</descr>
  <li><i><com>Collider</i>:<b>finalize()</com></b>
    <p><descr>finalizes (and compiles) the model. No more triangles can be
    added.</descr>
    <p>&nbsp;
  <li><i><com>Collider</i>:<b>setTransform(</b><i>Transform</i><b> transform)</com></b>
    <p><descr>sets the transform of this collider. It's not necessary to set up
    it explicitly if the collider was created with a mesh attached.</descr>
    <p>&nbsp;
  <li><i><com>boolean Collider</i>:<b>collision(</b><i>Collider</i><b> other, </b><i>Transform</i><b>
    otherTransform</b> = nil<b>)</com></b>
    <p><descr>      checks the current collider for collision with another
    collider. If <i>othertransform</i> is specified, one can test collision of
    one collider with itself (but transformed in a different way). If a
    collision is detected, the function returns true.</descr>
    <p>&nbsp;
  <li><i><com>boolean Collider</i>:<b>rayCollision(<br>
&nbsp;&nbsp;&nbsp; </b><i>number</i><b> originX, </b><i>number</i><b>
    originY, </b><i>number</i><b> originZ,<br>
&nbsp;&nbsp;&nbsp; </b><i>number</i><b> direcX, </b><i>number</i><b> direcY,
    </b><i>number</i><b> direcZ,<br>
&nbsp;&nbsp;&nbsp; </b><i>boolean</i><b> closest</b> = false<b>, </b><i>number</i><b>
    segmin</b> = 0<b>, </b><i>number</i><b> segmax</b> = FLOAT_MAX<b><br>
    )</com></b>
    <p><descr>      checks the current collider for collision with a ray, given
    its <i>origin</i> and <i>direc</i>tion. If <i>closest</i> is true, the
    nearest intersection is found (this takes longer to compute). The arguments <i>segmin</i>
    and <i>segmax</i> specify the nearest and farthest distance traveled by the
    ray. If a collision is detected, the function returns true.</descr>
    <p>&nbsp;
  <li><i><com>boolean Collider</i>:<b>sphereCollision(<br>
&nbsp;&nbsp;&nbsp; </b><i>number</i><b> centerX, </b><i>number</i><b>
    centerY, </b><i>number</i><b> centerZ, </b><i>number </i><b>radius<br>
    )</com></b>
    <p><descr>      checks the current collider for collision with a sphere,
    given its <i>center</i> and <i>radius</i>. If a collision is detected, the
    function returns true.</descr>
    <p>&nbsp;
  <li><i><com>number </i>collX, <i>number</i> collY, <i>number</i> collZ = <i>Collider</i>:<b>getCollisionPoint()</com></b>
    <p><descr>      returns the coordinates of the collision point. The call is
    valid only after a collision() call (or analogue) that effectively detects a
    collision.</descr>
    <p>&nbsp;
  <li><i><com>number </i>tri1aX, <i>number</i> tri1aY, <i>number</i> tri1aZ,<br>
    <i>number </i>tri1bX, <i>number</i> tri1bY, <i>number</i> tri1bZ,<br>
    <i>number </i>tri1cX, <i>number</i> tri1cY, <i>number</i> tri1cZ,<br>
    <i>number </i>tri2aX, <i>number</i> tri2aY, <i>number</i> tri2aZ,<br>
    <i>number </i>tri2bX, <i>number</i> tri2bY, <i>number</i> tri2bZ,<br>
    <i>number </i>tri2cX, <i>number</i> tri2cY, <i>number</i> tri2cZ =<br>
    <i>&nbsp;&nbsp;&nbsp; Collider</i>:<b>getCollidingTriangles()</com></b>
    <p><descr>      returns the coordinates of the vertexes of the triangles
    involved in a collision. The first nine coordinates refer to the three
    vertexes of the triangle on the current object, while the other nine to the
    three vertexes of the triangle on the other object (this means that the last
    nine coordinates are valid only after a collision call that involves two
    colliders, not ray or sphere).</descr>
    <p>&nbsp;
  <li><i><com>Collider</i>:<b>delete()</com></b>
    <p><descr>deletes a collider from memory.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="shape">
<h5>3.6.2.3.1 Shape</h5>
</a>The <b><class>Shape</class></b> class extends <b><parent>Void</parent></b>
and is used to define the shape of a mesh object. Shapes may be used to define
multiple meshes.
<ul>
  <li><i><com>Shape</i> <b>Shape(</b><i>table</i> <b>vertices,</b> <i>table</i> <b>normals,</b>
    <i>table</i> <b>mappings,</b> <i>table</i> <b>triangles)</com></b>
    <p><descr>creates a shape given the table of the vertices (all the
    coordinates of the vertices must be specified in the order x, y, z), normals
    (all the components of the normals must be specified in the order x, y, z),
    mappings (all the components of the texture mappings must be specified in
    the order u, v) and triangles (all the indexes of the triangles must be
    specified in order, 3 indexes for every triangle; the index must correspond
    to the index of the desired vertex of the first table; the usual OpenGL
    conventions to decide triangle's inside and outside faces apply). If the <i>triangles</i>
    table has only two elements, the data is used to fill a grid of vertexes the
    number of rows and columns of which is given by the two values stored in the
    table (rows are completed first).</descr>
    </p>
    <p>&nbsp;
  <li><i><com>number Shape</i>:<b>getVerticesCount()</com></b>
    <p><descr>returns the number of vertexes in the shape.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Shape</i>:<b>setVertexData(</b><i>number</i><b> index,<br>
&nbsp;&nbsp;&nbsp; </b><i>number</i><b> x, </b><i>number</i><b> y, </b><i>number</i><b>
    z,<br>
&nbsp;&nbsp;&nbsp; </b><i>number</i><b> u</b> = 0<b>, </b><i>number</i><b> v</b>
    = 0<b>,<br>
&nbsp;&nbsp;&nbsp; </b><i>number</i><b> Nx</b> = 0<b>, </b><i>number</i><b>
    Ny</b> = 0<b>, </b><i>number</i><b> Nz</b> = 0<b><br>
    )</com></b>
    <p><descr>sets the data of the vertex with the given <i>index</i> provided
    its spatial coordinates, texture coordinates and normal direction.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z,<b><br>
    </b><i>number</i> u, <i>number</i> v,<b><br>
    </b><i>number</i> Nx, <i>number</i> Ny, <i>number</i> Nz =<b><br>
&nbsp;&nbsp;&nbsp; </b><i>Shape</i>:<b>getVertexData(</b><i>number</i><b>
    index)</com></b>
    <p><descr>returns the data of the vertex (coordinates, texture coordinates
    and normal direction) given its index.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Shape</i>:<b>computeNormals()</com></b>
    <p><descr>calculates the normals of the vertexes of this shape considering
    the links among vertexes.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>number Shape</i>:<b>getMaxRadius()</com></b>
    <p><descr>returns the maximum distance of the vertexes of this shape from
    the origin.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Shape</i>:<b>computeMaxRadius()</com></b>
    <p><descr>calculates the maximum distance of the vertexes of this shape from
    the origin.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Shape</i>:<b>setDynamic(</b><i>boolean</i> <b>dynamic</b> = true<b>)</com></b>
    <p><descr>sets the '<i>dynamic</i>' property of this shape. If set, the
    vertexes data of the shape is considered variable in time.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Shape</i>:<b>setTwoSided(</b><i>boolean</i> <b>twoSided</b> = true<b>)</com></b>
    <p><descr>sets the '<i>two side</i>' property of this shape. If set, the
    shape is rendered without back face culling.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Shape</i>:<b>delete()</com></b>
    <p><descr>deletes a shape from memory. Its reference could be still owned by
    other objects, but the use of this method is safe.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="shadershape">
<h5>3.6.2.3.1.1 ShaderShape</h5>
</a>The <b><class>ShaderShape</class></b> class extends <b><parent>Shape</parent></b>
and inherits all its methods. It is used in <i>ShaderMesh</i>es in cojunction
with <i>ShaderMaterial</i>s.
<ul>
  <li><i><com>ShaderShape</i> <b>ShaderShape(</b><i>table</i> <b>vertices,</b> <i>table</i>
    <b>normals,</b> <i>table</i> <b>mappings,</b> <i>table</i> <b>triangles)</com></b>
    <p><descr>creates a shape given the table of the vertices (all the
    coordinates of the vertices must be specified in the order x, y, z), normals
    (all the components of the normals must be specified in the order x, y, z),
    mappings (all the components of the texture mappings must be specified in
    the order u, v) and triangles (all the indexes of the triangles must be
    specified in order, 3 indexes for every triangle; the index must correspond
    to the index of the desired vertex of the first table).</descr>
    </p>
    <p>&nbsp;
  <li><i><com>ShaderShape</i>:<b>setColors(</b><i>table</i><b> colors</b>, <i>number</i>
    <b>colorDim</b> = 3<b>)</com></b>
    <p><descr>sets the colors of the vertices in this shape (all the components
    of the colors must be specified in the order <i>r</i>, <i>g</i>, <i>b</i>
    and eventually <i>a</i>). The <i>colorDim</i> parameter specifies the number
    of components that made up a color (3 or 4). Component values range from 0
    to 255.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>ShaderShape</i>:<b>setColorData(</b><i>number</i><b> index,<br>
&nbsp;&nbsp;&nbsp; </b><i>number</i><b> r, </b><i>number</i><b> g, </b><i>number</i><b>
    b,</b> <i>number</i><b> a</b> = 255<b>)</com></b>
    <p><descr>sets the color of the vertex with the given <i>index</i>. The <i>a</i>
    component may be ignored if the colors of this shape possess only 3
    components. Component values range from 0 to 255.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>number</i> r, <i>number</i> g, <i>number</i> b, <i>number</i> a =<br>
&nbsp;&nbsp;&nbsp; <i>ShaderShape</i>:<b>getColorData(</b><i>number</i><b>
    index)</com></b>
    <p><descr>returns the color of the vertex given its index. The <i>a</i>
    component may be <i>nil</i> if the colors of this shape possess only 3
    components. Component values range from 0 to 255.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>ShaderShape</i>:<b>setSecondaryColors(</b><i>table</i><b> colors)</com></b>
    <p><descr>sets the secondary colors of the vertices in this shape (all the
    components of the colors must be specified in the order <i>r</i>, <i>g</i>, <i>b</i>).
    Component values range from 0 to 255.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>ShaderShape</i>:<b>setSecondaryColorData(</b><i>number</i><b>
    index,<br>
&nbsp;&nbsp;&nbsp; </b><i>number</i><b> r, </b><i>number</i><b> g, </b><i>number</i><b>
    b)</com></b>
    <p><descr>sets the secondary color of the vertex with the given <i>index</i>.
    Component values range from 0 to 255.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>number</i> r, <i>number</i> g, <i>number</i> b =<br>
&nbsp;&nbsp;&nbsp; <i>ShaderShape</i>:<b>getSecondaryColorData(</b><i>number</i><b>
    index)</com></b>
    <p><descr>returns the secondary color of the vertex given its index.
    Component values range from 0 to 255.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>ShaderShape</i>:<b>setFogCoords(</b><i>table</i><b> fogs)</com></b>
    <p><descr>sets the fog depth of the vertices in this shape.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>ShaderShape</i>:<b>setFogCoordData(</b><i>number</i><b> index,</b><i>number</i><b>
    fog)</com></b>
    <p><descr>sets the fog depth of the vertex with the given <i>index</i>.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>number</i> fog = <i>ShaderShape</i>:<b>getFogCoordData(</b><i>number</i><b>
    index)</com></b>
    <p><descr>returns the fog depth of the vertex given its index.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>ShaderShape</i>:<b>setTexCoords(</b><i>number</i> <b>texCount</b>,
    <i>table</i><b> texCoords</b>, <i>table</i> <b>texDims)</com></b>
    <p><descr>sets the texture coordinates of the vertices in this shape (all
    the components of the texture must be specified in the order <i>s</i>, <i>t</i>,
    <i>p</i> and <i>q</i>). The <i>texCount</i> parameter specifies the number
    of texture and <i>texCoords</i> must be a table that contains other tables
    with the sequence of texture coordinates. The <i>colorDims</i> parameter is
    a table too and specifies the number of components for each texture
    coordinate sequence (from 1 up to 4).</descr>
    </p>
    <p>&nbsp;
  <li><i><com>ShaderShape</i>:<b>setTexCoordData(</b><i>number</i> <b>texIndex</b>,
    <i>number</i><b> index,<br>
&nbsp;&nbsp;&nbsp; </b><i>number</i><b> s, </b><i>number</i><b> t</b> = 0, <i>number</i><b>
    p</b> = 0, <i>number</i><b> q</b> = 0<b>)</com></b>
    <p><descr>sets the texture coordinates of the vertex with the given <i>index</i>
    of the given <i>texIndex</i> texture. The <i>t, p, q</i> components may be
    ignored if the colors of this shape possess less components.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>number</i> s, <i>number</i> t, <i>number</i> p, <i>number</i> q =<br>
&nbsp;&nbsp;&nbsp; <i>ShaderShape</i>:<b>getTexCoordData(</b><i>number</i> <b>texIndex</b>,
    <i>number</i><b> index)</com></b>
    <p><descr>returns the texture coordinates of the vertex given its <i>index</i>
    and the <i>texIndex</i>. The <i>t, p, q</i> components may be <i>nil</i> if
    the vertex possess less components.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="bumpedmesh">
<h5>3.6.2.3.2 BumpedMesh</h5>
</a>The <b><class>BumpedMesh</class></b> class is used to create a mesh with a
bumped material attached.
<ul>
  <li><i><com>BumpedMesh</i> <b>BumpedMesh(</b><i>Shape</i> <b>shape, </b><i>Material</i>
    <b>material)</com></b>
    <p><descr>creates a bumped mesh given the specified shape and material.</descr>
  <li><i><com>BumpedMesh</i> <i>BumpedMesh</i>:<b>clone()</com></b>
    <p><descr>clones (duplicates) the mesh.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="heightfield">
<h5>3.6.2.4 HeightField</h5>
</a>The <b><class>HeightField</class></b> class extends <b><parent>Object</parent></b>,
inheriting all its methods, and <b>ShadowedDelegate</b>. It is used to render a
small heightfield terrain (such as an isle).
<ul>
  <li><i><com>HeightField</i> <b>HeightField(</b><br>
&nbsp;&nbsp;&nbsp;<i>Image</i> <b>heightMap,</b> <i>Material</i> <b>material,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>width,</b> <i>number</i> <b>depth,</b> <i>number</i>
    <b>height,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>waterLevel</b> = 0, <i>number</i> <b>detailTiles</b>
    = 1<br>
    <b>)</com></b>
    <p><descr>creates an heightfield given the specified map and material,
    width, depth and height. The level of the water and the number of detail
    tiles are optional arguments: Level of water gives the height at which the
    heightfield must be cut by a horizontal plane, while the number of detail
    tiles gives the number of repetition the detail texture has. The detail map
    is taken from the gloss texture of the material. To provide the value of the
    water level and at the same time avoid that the generated meshes are cut at
    the water level, use a negative value for it.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>HeightField</i>:<b>getHeightAtAbsolute(</b><i>number</i>
    <b>x,</b> <i>number</i> <b>z)</com></b>
    <p><descr>returns the height of the heightfield at the absolute <i>(x,z)</i>
    position (in world coordinates). The height is referred to the specified
    water level.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>HeightField</i>:<b>getHeightAtRelative(</b><i>number</i>
    <b>x,</b> <i>number</i> <b>z)</com></b>
    <p><descr>returns the height of the heightfield at the relative <i>(x,z)</i>
    position (in object coordinates). The height is referred to the base of the
    height field and not to the water level.</descr>
    <p>&nbsp;
  <li><i><com>number</i> nx, <i>number</i> ny, <i>number</i> nz, <i>number</i>
    dist = <i>HeightField</i>:<b>getLastNormal()<descr></b> returns the last
    normal (<i>nx, ny, nz</i>) computed during the last <i>getHeightAtAbsolute()</i>
    call and the offset of the plane at that point from the origin (<i>dist</i>).</descr>
    <p>&nbsp;
  <li><i><com>HeightField</i>:<b>setHintNoRotation(</b><i>boolean</i> <b>hasNoRotation</b>
    = true<b>)</com></b>
    <p><descr>specifies that the <i>height field</i> is not rotated (the default
    value is <i>true</i>). Useful to speed up the computations of heights.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="sprite">
<h5>3.6.2.5 Sprite</h5>
</a>The <b><class>Sprite</class></b> class extends <b><parent>Object</parent></b>
and inherits all its methods. It is used to render textured rectangles always
faced to the camera.
<ul>
  <li><i><com>Sprite</i> <b>Sprite(</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>width,</b> <i>number</i> <b>height,</b> <i>Material</i>
    <b>material,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>left</b> = 0, <i>number</i> <b>bottom</b>
    = 0, <i>number</i> <b>right</b> = 1, <i>number</i> <b>top</b> = 1<br>
    <b>)</com></b>
    <p><descr>creates a sprite given its width, height and material. The
    optional arguments left, bottom, right, top are the texture rectangular
    coordinates to be mapped on the sprite.</descr><br>
    <p>&nbsp;
  <li><i><com>Sprite</i>:<b>setSize(</b><i>number</i> <b>w,</b> <i>number</i> <b>h)</com></b>
    <p><descr>sets the size of the sprite given the width <i>w</i> and the
    height <i>h</i>.</descr>
    <p>&nbsp;
  <li><i><com>number</i> w, <i>number</i> h = <i>Sprite</i>:<b>getSize()</com></b>
    <p><descr>returns the size (width and height) of the sprite.</descr>
    <p>&nbsp;
  <li><i><com>Sprite</i>:<b>setTextureCoord(</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>left,</b> <i>number</i> <b>bottom,</b> <i>number</i>
    <b>right,</b> <i>number</i> <b>top</b><br>
    <b>)</com></b>
    <p><descr>sets the texture coordinates of the sprite.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="sprites">
<h5>3.6.2.5.0 Sprites</h5>
</a>The <b><class>Sprites</class></b> class extends <b><parent>Object</parent></b>
and inherits all its methods. It is used to render a collection of sprites with
a single texture attached.
<ul>
  <li><i><com>Sprites</i> <b>Sprites(</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>capacity,</b> <i>number</i> <b>width,</b>
    <i>number</i> <b>height,</b><br>
&nbsp;&nbsp;&nbsp;<i>Texture</i> <b>texture,</b>, <i>boolean</i> <b>hasAlpha</b>
    = false<br>
    <b>)</com></b>
    <p><descr>creates a sprites collection given the capacity of the collection
    (only a guess), the width and height of the rectangle, the texture applied
    and (optionally) a boolean that specifies if the texture has an alpha
    channel or not.</descr>
    <p>&nbsp;
  <li><i><com>Sprites</i>:<b>addSprite(</b><i>number</i> <b>x,</b> <i>number</i>
    <b>y,</b> <i>number</i> <b>z)</com></b>
    <p><descr>adds a sprite in the collection with the given position.</descr>
    <p>&nbsp;
  <li><i><com>Sprites</i>:<b>setColor(</b><i>number</i> <b>r,</b> <i>number</i> <b>g,</b>
    <i>number</i> <b>b)</com></b>
    <p><descr>sets the color of the sprites.</descr>
    <p>&nbsp;
  <li><i><com>Sprites</i>:<b>setSize(</b><i>number</i> <b>w,</b> <i>number</i> <b>h)</com></b>
    <p><descr>sets the dimensions of the sprites.</descr>
    <p>&nbsp;
  <li><i><com>Sprites</i>:<b>setTexture(</b><i>Texture</i> <b>tex,</b> <i>boolean</i>
    <b>hasAlpha</b> = false <b>)</com></b>
    <p><descr>sets the texture of the sprites specifying if the texture has an
    alpha channel or not.</descr>
    <p>&nbsp;
  <li><i><com>Sprites</i>:<b>setPosition(</b><i>number</i> <b>index,</b> <i>number</i>
    <b>x,</b> <i>number</i> <b>y,</b> <i>number</i> <b>z)</com></b>
    <p><descr>sets the position of sprite <i>index</i>.</descr>
    </p>
    <i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>Sprites</i>:<b>getPosition(</b><i>number</i>
    <b>index)</com></b>
    <p><descr>returns the position of sprite <i>index</i>.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="animatedsprite">
<h5>3.6.2.5.1 AnimatedSprite</h5>
</a>The <b><class>AnimatedSprite</class></b> class extends <b><parent>Sprite</parent></b>
and inherits all its methods. It is used to render textured rectangles always
faced to the camera showing a short animation.
<ul>
  <li><i><com>AnimatedSprite</i> <b>AnimatedSprite(</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>width,</b> <i>number</i> <b>height,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>duration,</b> <i>number</i> <b>sideFrame,</b>
    <i>Material</i> <b>material</b><br>
    <b>)</com></b>
    <p><descr>creates a sprite displaying a short animation given its width,
    height and material. The duration argument specifies the loop time of the
    animation in seconds, while the argument <i>sideFrame</i> tells how many
    frames of animation form a side of the material textures (for example, a <i>sideFrame</i>
    of 3 says that the total frames are 9 and so on).</descr><br>
    <p>&nbsp;
  <li><i><com>AnimatedSprite</i>:<b>setLoopDuration(</b><i>number</i> <b>duration)</com></b>
    <p><descr>sets the duration of the animation loop.</descr>
    </p>
  <li><i><com>AnimatedSprite</i>:<b>setAnimated(</b><i>boolean</i> <b>animated</b>
    = true<b>)</com></b>
    <p><descr>sets the animation state of the sprite.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="axisaligned">3.6.2.5.2 AxisAligned</a></h5>
The <b><class>AxisAligned</class></b> class extends <b><parent>Sprite</parent></b>
and inherits all its methods. It is used to render two textured rectangles
always vertical and aligned to the x, z axes.
<ul>
  <li><i><com>AxisAligned</i> <b>AxisAligned(</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>width,</b> <i>number</i> <b>height,</b> <i>Material</i>
    <b>material,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>left</b> = 0, <i>number</i> <b>bottom</b>
    = 0, <i>number</i> <b>right</b> = 1, <i>number</i> <b>top</b> = 1<br>
    <b>)</com></b>
    <p><descr>creates an axes aligned couple of vertical rectangles given their
    width, height and material. The optional arguments left, bottom, right, top
    are the texture rectangular coordinates to be mapped on the rectangles.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="billboard">
<h5>3.6.2.5.3 Billboard</h5>
</a>The <b><class>Billboard</class></b> class extends <b><parent>Sprite</parent></b>
and inherits all its methods. It is used to render textured rectangles always
vertical and faced to the camera.
<ul>
  <li><i><com>Billboard</i> <b>Billboard(</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>width,</b> <i>number</i> <b>height,</b> <i>Material</i>
    <b>material,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>left</b> = 0, <i>number</i> <b>bottom</b>
    = 0, <i>number</i> <b>right</b> = 1, <i>number</i> <b>top</b> = 1<br>
    <b>)</com></b>
    <p><descr>creates a billboard given its width, height and material. The
    optional arguments left, bottom, right, top are the texture rectangular
    coordinates to be mapped on the billboard.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="fadingbillboard">3.6.2.5.3.0 FadingBillboard</a></h5>
The <b><class>FadingBillboard</class></b> class extends <b><parent>Billboard</parent></b>
and inherits all its methods. It is used to render textured rectangles always
vertical and faced to the camera. This kind of billboard begins to fade away
from a given distance.
<ul>
  <li><i><com>FadingBillboard</i> <b>FadingBillboard(</b><i>number</i> <b>fadeNear,</b> <i>number</i> <b>fadeFar, </b><i>number</i>
    <b>width,</b> <i>number</i> <b>height,</b> <i>Material</i> <b>material</b><b>)</com></b>
    <p><descr>creates a billboard given its width, height and material. The <i>fadeNear</i>
    argument specifies the distance from which the billboard begins to fade
    away, while <i>fadeFar</i> gives the distance at which the billboard has
    completely disappeared.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="animatedbillboard">
<h5>3.6.2.5.3.1 AnimatedBillboard</h5>
</a>The <b><class>AnimatedBillboard</class></b> class extends <b><parent>Billboard</parent></b>
and inherits all its methods. It is used to render textured rectangles always
vertical and faced to the camera showing a short animation.
<ul>
  <li><i><com>AnimatedBillboard</i> <b>AnimatedBillboard(</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>width,</b> <i>number</i> <b>height,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>duration,</b> <i>number</i> <b>sideFrame,</b>
    <i>Material</i> <b>material</b><br>
    <b>)</com></b>
    <p><descr>creates a billboard displaying a short animation given its width,
    height and material. The duration argument specifies the loop time of the
    animation in seconds, while the argument <i>sideFrame</i> tells how many
    frames of animation form a side of the material textures (for example, a <i>sideFrame</i>
    of 3 says that the total frames are 9 and so on).</descr><br>
    <p>&nbsp;
  <li><i><com>AnimatedBillboard</i>:<b>setLoopDuration(</b><i>number</i> <b>duration)</com></b>
    <p><descr>sets the duration of the animation loop.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>AnimatedBillboard</i>:<b>setAnimated(</b><i>boolean</i> <b>animated</b>
    = true<b>)</com></b>
    <p><descr>sets the animation state of the sprite.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="animatedfadingbillboard">
<h5>3.6.2.5.3.1.1 AnimatedFadingBillboard</h5>
</a>The <b><class>AnimatedFadingBillboard</class></b> class extends <b><parent>AnimatedBillboard</parent></b>
and inherits all its methods. It is used to render textured rectangles always
vertical and faced to the camera showing a short animation. This kind of billboard begins to fade away
from a given distance.
<ul>
  <li><i><com>AnimatedFadingBillboard</i> <b>AnimatedFadingBillboard(</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>fadeNear,</b> <i>number</i> <b>fadeFar,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>width,</b> <i>number</i> <b>height,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>duration,</b> <i>number</i> <b>sideFrame,</b>
    <i>Material</i> <b>material</b><br>
    <b>)</com></b>
    <p><descr>creates a billboard displaying a short animation given its width,
    height and material. The duration argument specifies the loop time of the
    animation in seconds, while the argument <i>sideFrame</i> tells how many
    frames of animation form a side of the material textures (for example, a <i>sideFrame</i>
    of 3 says that the total frames are 9 and so on). The <i>fadeNear</i>
    argument specifies the distance from which the billboard begins to fade
    away, while <i>fadeFar</i> gives the distance at which the billboard has
    completely disappeared.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="trees">
<h5>3.6.2.5.3.2 Trees</h5>
</a>The <b><class>Trees</class></b> class extends <b><parent>Object</parent></b>
and inherits all its methods. It is used to render a collection of trees moved
by the wind.
<ul>
  <li><i><com>Trees</i> <b>Trees(</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>treesCount,</b> <i>number</i> <b>sideCount,</b>
    <i>Material</i> <b>material,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>windDuration</b> = 0, <i>number</i> <b>windDisplacement</b>
    = 0.1<br>
    <b>)</com></b>
    <p><descr>creates a trees collection given the number of trees and the
    material from which the images of the trees are taken. In particular the
    argument <i>sideCount</i> tells how many images form a side of the material
    textures (for example, a <i>sideCount</i> of 2 says that the total images
    are 4 and so on). The optional argument <i>windDuration</i> specifies the
    loop time of the wind animation in seconds, while <i>windDisplacement</i>
    gives the maximum length of the movement of the trees.</descr>
    <p>&nbsp;
  <li><i><com>Trees</i>:<b>addTree(</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>x,</b> <i>number</i> <b>y,</b> <i>number</i>
    <b>z,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>width,</b> <i>number</i> <b>height</b><br>
    <b>)</com></b>
    <p><descr>adds a tree in the collection with the given position and size.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="emitter">
<h5>3.6.2.6 Emitter</h5>
</a>The <b><class>Emitter</class></b> class extends <b><parent>Object</parent></b>
and inherits all its methods. It is used to represent the emitters of the
particle engine and their properties.
<ul>
  <li><i><com>Emitter</i> <b>Emitter(<br>
&nbsp;&nbsp;&nbsp; </b><i>number</i> <b>particlesCount, </b><i>number</i> <b>maxLife,<br>
&nbsp;&nbsp;&nbsp; </b><i>number</i> <b>maxRadius,</b> <i>boolean</i> <b>updatePosition</b>
    = false<b><br>
    )</com></b>
    <p><descr>creates a particle emitter given the number of particles active at
    the same time (<i>particlesCount</i>), the maximum life of that particles in
    seconds (<i>maxLife</i>) and the approximate maximum distance the particles
    can reach from the emitter position (<i>maxRadius</i>). The optional
    argument <i>updatePosition</i> specifies if the initial position of the
    particles when they are generated is persistent (<i>false</i>) or if only
    the last emitter position matters (<i>true</i>).</descr>
    <p>&nbsp;
  <li><i><com>Emitter</i>:<b>reset()</com></b>
    <p><descr>resets the particle positions of the emitted particles to begin
    another emission.</descr>
    <p>&nbsp;
  <li><i><com>Emitter</i>:<b>setShape(</b><i>number</i> <b>shapeIndex)</com></b>
    <p><descr>sets the shape of this emitter. Values of <i>shapeIndex</i>: 0 =
    POINT (default); 1 = LINE (along x axis); 2 = CIRCUMFERENCE (from a
    circumference on the plane x-z); 3 = CIRCLE (from the inside of a circle on
    the plane x-z); 4 = SQUARE (from the inside a square on the plane x-z); 5 =
    SPHERE_SHELL (from the surface of a sphere); 6 = SPHERE (from the inside of
    a sphere); 7 = CUBE (from the inside of a cube).</descr>
    <p>&nbsp;
  <li><i><com>Emitter</i>:<b>setShapeSize(</b><i>number</i> <b>size)</com></b>
    <p><descr>sets the size of the shape of this emitter. Zero by default. The
    size refers to: no meaning for POINT; length for LINE; radius for
    CIRCUMFERENCE, CIRCLE, SPHERE_SHELL and SPHERE; side for SQUARE and CUBE.</descr>
    <p>&nbsp;
  <li><i><com>Emitter</i>:<b>setTexture(</b><i>Texture</i> <b>texture,</b> <i>boolean</i>
    <b>hasAlpha</b> = true<b>)</com></b>
    <p><descr>sets the texture attached to the particles. The optional parameter
    <i>hasAlpha</i> specifies if the texture has an alpha channel: the value <b>true</b>
    means that the texture possess the alpha channel.</descr>
    <p>&nbsp;
  <li><i><com>Emitter</i>:<b>setVelocity(</b><i>number</i> <b>velX,</b> <i>number</i>
    <b>velY,</b> <i>number</i> <b>velZ,</b> <i>number</i> <b>speedVar)</com></b>
    <p><descr>sets the velocity of the emitted particles with the given speed
    variability (<i>speedVar</i>).</descr>
    <p>&nbsp;
  <li><i><com>Emitter</i>:<b>setColor(</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>startRed,</b> <i>number</i> <b>startGreen,</b>
    <i>number</i> <b>startBlue,</b> <i>number</i> <b>startAlpha,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>endRed,</b> <i>number</i> <b>endGreen,</b>
    <i>number</i> <b>endBlue,</b> <i>number</i> <b>endAlpha,</b><br>
    <b>)</com></b>
    <p><descr>sets the initial and final color of the emitted particles. The
    color includes an alpha component. During the life of the particle the color
    changes from the initial choice to the final one. Color values range from 0
    to 1.</descr>
    <p>&nbsp;
  <li><i><com>Emitter</i>:<b>setSize(</b><i>number</i> <b>startSize,</b> <i>number</i>
    <b>endSize)</com></b>
    <p><descr>sets the initial and final size of the particles. During the life
    of the particle the size changes from the initial value to the final one.</descr>
    <p>&nbsp;
  <li><i><com>Emitter</i>:<b>setGravity(</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>startGravityX,</b> <i>number</i> <b>startGravityY,</b>
    <i>number</i> <b>startGravityZ,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>endGravityX,</b> <i>number</i> <b>endGravityY,</b>
    <i>number</i> <b>endGravityZ,</b><br>
    <b>)</com></b>
    <p><descr>sets the initial and final &quot;gravity&quot; (in the meaning of
    generic acceleration) applied to the emitted particles. During the life of
    the particle the &quot;gravity&quot; changes from the initial choice to the
    final one.</descr>
    <p>&nbsp;
  <li><i><com>Emitter</i>:<b>setRadius(</b><i>number</i> <b>startRadius,</b> <i>number</i>
    <b>endRadius)</com></b>
    <p><descr>sets the initial and final size of the radius when the particles
    follow also a circular motion. During the life of the particle the size
    changes from the initial value to the final one.</descr>
    <p>&nbsp;
  <li><i><com>Emitter</i>:<b>setAngularSpeed(</b><i>number</i> <b>startSpeed,</b>
    <i>number</i> <b>endSpeed)</com></b>
    <p><descr>sets the initial and final size of the angular speed when the
    particles follow also a circular motion. During the life of the particle the
    size changes from the initial value to the final one.</descr>
    <p>&nbsp;
  <li><i><com>Emitter</i>:<b>setMaxLife(</b><i>number</i> <b>maxLife)</com></b>
    <p><descr>sets the maximum life duration of a particle in seconds.</descr>
    <p>&nbsp;
  <li><i><com>Emitter</i>:<b>setParticlesCount(</b><i>number</i> <b>count)</com></b>
    <p><descr>sets the number of visible particles.</descr>
    <p>&nbsp;
  <li><i><com>Emitter</i>:<b>setOneShot(</b><i>boolean</i> <b>mode</b> = true<b>)</com></b>
    <p><descr>puts the emitter in the one-shot mode (if the optional argument is
    true). This means that only a single burst of particles is generated. Use
    the <b>reset()</b> method to throw another burst.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="animatedemitter">
<h5>3.6.2.6.1 AnimatedEmitter</h5>
</a>The <b><class>AnimatedEmitter</class></b> class extends <b><parent>Emitter</parent></b>
and inherits all its methods. It is used to represent the emitters of the
particle engine and their properties. In this class the applied texture must be
divided in several frames (in a squared pattern) and the <i>duration</i>
property specifies the duration of the animation loop.
<ul>
  <li><i><com>AnimatedEmitter</i> <b>AnimatedEmitter(<br>
&nbsp;&nbsp;&nbsp; </b><i>number</i> <b>particlesCount, </b><i>number</i> <b>maxLife,<br>
&nbsp;&nbsp;&nbsp; </b><i>number</i> <b>maxRadius,</b> <i>number</i> <b>duration,<br>
&nbsp;&nbsp;&nbsp; </b><i>number</i> <b>sideFrames</b> = 1, <i>boolean</i> <b>updatePosition</b>
    = false<b><br>
    )</com></b>
    <p><descr>creates a particle emitter given the number of particles active at
    the same time (<i>particlesCount</i>), the maximum life of that particles in
    seconds (<i>maxLife</i>), the approximate maximum distance the particles can
    reach from the emitter position (<i>maxRadius</i>) and the duration of the
    animation (<i>duration</i>). The optional argument <i>sideFrames</i>
    specifies the number of frame per side in the texture (for example, 4 means
    that 16 frames are stored in the texture in a squared pattern). The optional
    argument <i>updatePosition</i> specifies if the initial position of the
    particles when they are generated is persistent (<i>false</i>) or if only
    the last emitter position matters (<i>true</i>).</descr>
    <p>&nbsp;
  <li><i><com>AnimatedEmitter</i>:<b>setDuration(</b><i>number</i> <b>duration)</com></b>
    <p><descr>sets the duration of the animation.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="text">
<h5>3.6.2.7 Text</h5>
</a>The <b><class>Text</class></b> class extends <b><parent>Object</parent></b>
and inherits all its methods. It is used to render a 3d line of text (<i>not
portable - it works only on Windows</i>).
<ul>
  <li><com><i>Text</i> <b>Text(</b><i>string</i> <b>text,</b> <i>Font3D</i> <b>font,</b> <i>Material</i> <b>material)</b></com>
    <p><descr>creates a text object given a string, the font and a material.
    </p></descr>
  <li><com><i>string</i> <I>Text:</I><b>getText(</b><b>)</b></com>
    <p><descr>returns the text of this object.
    </p></descr>
  <li><com><I>Text:</I><b>setText(</b><I>string</I> <B>text</B><b>)</b></com>
    <p><descr>sets the text of this object.
    </p></descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="font3d">
<h5>3.6.2.7.1 Font3D</h5>
</a>The <b><class>Font3D</class></b> class extends <b><parent>Void</parent></b>
and is used to define a font for text objects.
<ul>
  <li><i><com>Font3D</i> <b>Font3D(</b><br>
    &nbsp;&nbsp; <i>string</i> <b>faceName,</b> <i>number</i> <b>height,</b> <i>number</i>
    <b>width,</b> <i>number</i> <b>depth,</b><br>
&nbsp;&nbsp;&nbsp;<i>boolean</i> <b>bold</b> = false, <i>boolean</i> <b>italic</b>
    = false<b><br>
    )</com></b>
    <p><descr>creates a font with the given <i>faceName</i> (for example
    &quot;Arial&quot;), height, width and depth (the tickness of the font). The
    optional arguments <i>bold</i> and <i>italic</i> specify if the font has
    bold or italic style: the value <b>false</b> means that the style is not
    bold or italic.</descr>
    <p>&nbsp;
  <li><i><com>number Font3D</i>:<b>getHeight()</com></b>
    <p><descr>returns the height of the font.</descr>
    <p>&nbsp;
  <li><i><com>number Font3D</i>:<b>getWidth()</com></b>
    <p><descr>returns the width of the font.</descr>
    <p>&nbsp;
  <li><i><com>string Font3D</i>:<b>getType()</com></b>
    <p><descr>returns the string "<I>Font3D</I>".</descr>
    <p>&nbsp;
  <li><i><com>Font3D</i>:<b>delete()</com></b>
    <p><descr>deletes a font from memory. Its reference could be still owned by
    other objects, but the use of this method is safe.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="model">
<h5>3.6.2.8 MD3Model <i>aka</i> Model</h5>
</a>The <b><class>Model</class></b> class extends <b><parent>Object</parent></b>
and inherits all its methods. It is used to render an animated set of meshes.
The format of the files needed to load the animated meshes is the <i>MD3</i>
format.
<ul>
  <li><i><com>Model</i> <b>MD3Model(</b><i>string</i> <b>fileName</b>, <i>string</i>
    <b>imageName</b> = nil, <i>string</i> <b>alphaName</b> = nil<b>)</com></b>
    <p><descr>loads an animated model in MD3 format from the specified file. If
    the image name is available, a texture derived from the given image is
    attached to the model, possibly with an alpha channel.</descr>
    <p>&nbsp;
  <li><i><com>Model</i> <b>Model(</b><i>string</i> <b>fileName</b>, <i>string</i>
    <b>imageName</b> = nil, <i>string</i> <b>alphaName</b> = nil<b>)</com></b>
    <p><descr>loads an animated model in MD3 format from the specified file. If
    the image name is available, a texture derived from the given image is
    attached to the model, possibly with an alpha channel.</descr>
    <p>&nbsp;
  <li><i><com>Model</i> <i>Model</i>:<b>clone()</com></b>
    <p><descr>creates a model cloning the attributes of an existing model.</descr>
    </p>
  <li><i><com>Model</i>:<b>delete()</com></b>
    <p><descr>deletes a model from memory. The programmer does not need to call
    this function directly if the <i>Model</i> is added as an <i>Object</i> to
    the world.</descr>
    <p>&nbsp;
  <li><i><com>Model</i>:<b>setMaterial(</b><i>Material</i> <b>material)</com></b>
    <p><descr>sets the material of the model.</descr>
    <p>&nbsp;
  <li><i><com>Material</i> <i>Model</i>:<b>getMaterial()</com></b>
    <p><descr>returns the material of the model.</descr>
    <p>&nbsp;
  <li><i><com>Model</i>:<b>rescale(</b><i>number</i> <b>factor)</com></b>
    <p><descr>changes the scale of the model. Use this function instead of the <i>scale()</i>
    method of the class <i>Object</i> bacause it preserves the normals.</descr>
    <p>&nbsp;
  <li><i><com>Model</i>:<b>link(</b><i>string</i> <b>linkName,</b> <i>Object</i>
    <b>object)</com></b>
    <p><descr>adds one object to this model linking it to the tag identified by
    the name given as first argument.</descr>
    <p>&nbsp;
  <li><i><com>Model</i>:<b>unlink(</b><i>string</i> <b>linkName)</com></b>
    <p><descr>removes the object linked to the tag identified by the name given
    as first argument.</descr>
    </p>
  <li><i><com>boolean</i> <i>Model</i>:<b>getLinkTransform(</b><i>string</i> <b>linkName,</b>
    <i>Transform</i> <b>transform)</com></b>
    <p><descr>returns (in the <i>transform</i> argument) the transform
    associated with the given <i>linkName</i>. The return value of the function
    is <i>false</i> if the link is not found.</descr>
    </p>
  <li><i><com>Model</i>:<b>setAnimations(</b><i>table</i>
    <b>animations</b><b>)</com></b>
    <p><descr>sets the animations for this model.
The table is a sequence of integer values, four for each single animation, so defined: a) the first frame, b) the last frame , c) the frame to go back at the end (use zero if the animation does not loop), d) the frame rate (frames per second).
</descr>
    </p>
  <li><i><com>Model</i>:<b>setAnimation(</b><i>number</i><b> animation</b>, <i>boolean</i>
    <b>playBack</b> = false<b>)</com></b>
    <p><descr>sets the current animation for the model specifying if it is
    reversed.</descr>
    </p>
  <li><i><com>Model</i>:<b>updateAnimation()</com></b>
    <p><descr>updates the animation of the model. A call to this function is not
    necessary when the model is a visible <i>Bot</i> (see the next class) because it is called automatically by the
    rendering loop.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Model</i>:<b>getStoppedAnimation()</com></b>
    <p><descr>returns the index of the animation that has just stopped, <i>-1</i>
    otherwise.</descr>
    <p>&nbsp;
  <li><i><com>Model</i>:<b>setAnimationTime(</b><i>number</i><b> time)</com></b>
    <p><descr>sets the animation time for all the <i>MD3 models</i> (not other kind of models).</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Model</i>:<b>getAnimationTime()</com></b>
    <p><descr>returns the animation time for all the <i>MD3 models</i> (not other kind of models).</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Model</i>:<b>getYawAngle()</com></b>
    <p><descr>returns the current (yaw) rotation of the model.</descr>
    <p>&nbsp;
  <li><i><com>Model</i>:<b>setYawAngle(</b><i>number</i> <b>angle)</com></b>
    <p><descr>sets the current (yaw) rotation of the model.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Model</i>:<b>addYawAngle(</b><i>number</i> <b>angle,</b>
    <i>number</i> <b>maxAngle</b> = 0<b>,</b> <i>number</i> <b>minAngle</b> = 0<b>)</com></b>
    <p><descr>adds a given angle to the current (yaw) rotation between the given
    <i>maxAngle</i> and <i>minAngle</i>. If <i>maxAngle</i> is zero (it is zero
    by default) there is no limit to the rotation. If <i>minAngle</i> is zero
    (it is zero by default) it is replaced by <i>-maxAngle</i>. Returns the
    angle that lacks to complete the requested rotation in the case that the <i>maxAngle</i>
    or <i>minAngle</i> limits are reached.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Model</i>:<b>getPitchAngle()</com></b>
    <p><descr>returns the current (pitch) rotation of the model.</descr>
    <p>&nbsp;
  <li><i><com>Model</i>:<b>setPitchAngle(</b><i>number</i> <b>angle)</com></b>
    <p><descr>sets the current (pitch) rotation of the model.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Model</i>:<b>addPitchAngle(</b><i>number</i> <b>angle,</b>
    <i>number</i> <b>maxAngle</b> = 0<b>,</b> <i>number</i> <b>minAngle</b> = 0<b>)</com></b>
    <p><descr>adds a given angle to the current (pitch) rotation between the
    given <i>maxAngle</i> and <i>minAngle</i>. If <i>maxAngle</i> is zero (it is
    zero by default) there is no limit to the rotation. If <i>minAngle</i> is
    zero (it is zero by default) it is replaced by <i>-maxAngle</i>. Returns the
    angle that lacks to complete the requested rotation in the case that the <i>maxAngle</i>
    or <i>minAngle</i> limits are reached.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="bot">
<h5>3.6.2.8.1 Bot</h5>
</a>The <b><class>Bot</class></b> class extends <b><parent>Model</parent></b>
and inherits all its methods. It represents an animated character subdivided in
three sections: lower, upper and head. The first section (lower) is the bot
itself, while upper and head are models linked to the lower model. The format of
the bot adopts a modified version of the <i>MD3</i> format.
<ul>
  <li><i><com>Bot</i> <b>Bot(</b><i>string</i> fileName, <i>string</i> <b>path</b>
    = nil, <i>boolean</i> <b>ownsCache</b> = false)</com>
    <p><descr>loads the complete model of a bot (collection of animated models
    that represents a character) from the specified file with the given path. If
    <i>ownsCache</i> is <i>true</i> the model uses its own cache for rendering
    purposes, otherwise shares a common cache with all the other models in the
    scene.</descr>
    <p>&nbsp;
  <li><i><com>Bot</i> <i>Bot</i>:<b>clone()</com></b>
    <p><descr>creates a bot cloning the attributes of an existing bot.</descr>
    </p>
  <li><i><com>Bot</i>:<b>delete()</com></b>
    <p><descr>deletes a bot from memory. The programmer does not need to call
    this function directly if the <i>Bot</i> is added as an <i>Object</i> to the
    world.</descr>
    <p>&nbsp;
  <li><i><com>Bot</i>:<b>rescale(</b><i>number</i> <b>factor)</com></b>
    <p><descr>changes the scale of the model. Use this function instead of the <i>scale()</i>
    method of the class <i>Object</i> because it preserves the normals.</descr>
    <p>&nbsp;
  <li><i><com>Model</i> <i>Bot</i>:<b>getLower()</com></b>
    <p><descr>returns the lower model of the bot. It gives a reference to the
    bot itself.</descr>
    <p>&nbsp;
  <li><i><com>Model</i> <i>Bot</i>:<b>getUpper()</com></b>
    <p><descr>returns the upper model of the bot.</descr>
    <p>&nbsp;
  <li><i><com>Model</i> <i>Bot</i>:<b>getHead()</com></b>
    <p><descr>returns the head model of the bot.</descr>
    <p>&nbsp;
  <li><i><com>Bot</i>:<b>setLowerAnimation(</b><i>number</i> <b>animationIndex</b>,
    <i>boolean</i> <b>playBack</b> = false<b>)</com></b>
    <p><descr>selects the animation that the lower model of the bot must play
    specifying if it is reversed.</descr>
    <p>&nbsp;
  <li><i><com>Bot</i>:<b>setUpperAnimation(</b><i>number</i> <b>animationIndex</b>,
    <i>boolean</i> <b>playBack</b> = false<b>)</com></b>
    <p><descr>selects the animation that the upper model of the bot must play
    specifying if it is reversed.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Bot</i>:<b>getLowerAnimation()</com></b>
    <p><descr>gets the animation index of the lower section of the bot.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Bot</i>:<b>getUpperAnimation()</com></b>
    <p><descr>gets the animation index of the upper section of the bot.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Bot</i>:<b>getLinkTransform(</b><i>string</i> <b>linkName,</b>
    <i>Transform</i> <b>transform)</com></b>
    <p><descr>returns (in the <i>transform</i> argument) the transform
    associated with the given <i>linkName</i>. The return value of the function
    is <i>nil</i> if the link is not found.</descr>
    <p>&nbsp;
  <li><i><com>Bot</i>:<b>walk(</b><i>number</i> <b>step)</com></b>
    <p><descr>moves the bot of distance <i>step</i> in its forward direction.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="basicmodel">3.6.2.8.2 MD2Model <i>aka</i> BasicModel</a></h5>
The <b><class>BasicModel</class></b> class extends <b><parent>Object</parent></b>
and inherits all its methods. It is used to render an animated set of meshes.
The format of the files needed to load the animated meshes is the <i>MD2</i>
format.
<ul>
  <li><i><com>BasicModel</i> <b>MD2Model(</b><i>string</i> <b>fileName</b>, <i>string</i>
    <b>imageName</b> = nil, <i>string</i> <b>alphaName</b> = nil<b>)</com></b>
    <p><descr>loads an animated model in MD2 format from the specified file. If
    the image name is available, a texture derived from the given image is
    attached to the model, possibly with an alpha channel.</descr>
    <p>&nbsp;
  <li><i><com>BasicModel</i> <b>BasicModel(</b><i>string</i> <b>fileName</b>, <i>string</i>
    <b>imageName</b> = nil, <i>string</i> <b>alphaName</b> = nil<b>)</com></b>
    <p><descr>loads an animated model in MD2 format from the specified file. If
    the image name is available, a texture derived from the given image is
    attached to the model, possibly with an alpha channel.</descr>
    <p>&nbsp;
  <li><i><com>BasicModel</i> <i>BasicModel</i>:<b>clone()</com></b>
    <p><descr>creates a model cloning the attributes of an existing model.</descr>
    </p>
  <li><i><com>BasicModel</i>:<b>delete()</com></b>
    <p><descr>deletes a model from memory. The programmer does not need to call
    this function directly if the <i>BasicModel</i> is added as an <i>Object</i>
    to the world.</descr>
    <p>&nbsp;
  <li><i><com>BasicModel</i>:<b>setMaterial(</b><i>Material</i> <b>material)</com></b>
    <p><descr>sets the material of the model.</descr>
    <p>&nbsp;
  <li><i><com>Material</i> <i>BasicModel</i>:<b>getMaterial()</com></b>
    <p><descr>returns the material of the model.</descr>
    <p>&nbsp;
  <li><i><com>BasicModel</i>:<b>rescale(</b><i>number</i> <b>factor)</com></b>
    <p><descr>changes the scale of the model. Use this function instead of the <i>scale()</i>
    method of the class <i>Object</i> bacause it preserves the normals.</descr>
    </p>
  <li><i><com>BasicModel</i>:<b>setAnimation(</b><i>number</i><b> animation</b>,
    <i>boolean</i> <b>playBack</b> = false<b>)</com></b>
    <p><descr>sets the current animation for the model specifying if it is
    reversed</p>
  <li><i>BasicModel</i>:<b>updateAnimation()</com></b>
    <p><descr>updates the animation of the model. A call to this function is not
    necessary when the model is visible since it is called automatically by the
    rendering loop.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>BasicModel</i>:<b>getStoppedAnimation()</com></b>
    <p><descr>returns the index of the animation that has just stopped, <i>-1</i>
    otherwise.</descr>
    </p>
  <li><i><com>BasicModel</i>:<b>setAnimationTime(</b><i>number</i><b> time)</com></b>
    <p><descr>sets the animation time for all the <i>MD2 models</i>.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>BasicModel</i>:<b>getAnimationTime()</com></b>
    <p><descr>returns the animation time for all the <i>MD2 models</i>.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>BasicModel</i>:<b>getVertexCoord(</b><i>number</i>
    <b>index)</com></b>
    <p><descr>returns the absolute coordinates of the vertex corresponding to <i>index</i>.</descr>
    <p>&nbsp;
  <li><i><com>number</i> nx, <i>number</i> ny, <i>number</i> nz = <i>BasicModel</i>:<b>getVertexNormal(</b><i>number</i>
    <b>index)</com></b>
    <p><descr>returns the normal of the vertex corresponding to <i>index</i>.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="advancedmodel">3.6.2.8.3 Cal3DModel <i>aka</i> AdvancedModel</a></h5>
The <b><class>AdvancedModel</class></b> class extends <b><parent>Object</parent></b>
and inherits all its methods. It is used to render an animated set of meshes.
The format of the files needed to load the animated meshes is the <i>Cal3D</i>
format.
<ul>
  <li><i><com>AdvancedModel</i> <b>Cal3DModel(</b><i>string</i> <b>fileName</b>,
    <i>boolean</i> <b>useHardware</b> = false <b>)</com></b>
    <p><descr>creates a model loading it from the specifications written in a
    file. The file must be a <i>cfg</i> file as used by <i>Cal3D</i> the &quot;<i>Character
    Animation Library</i>&quot;. If <i>useHardware</i> is <i>true</i>, hardware
    acceleration is used, otherwise not (hardware acceleration is faster but
    does not support LOD and the spring system of <i>Cal3D</i> models).</descr></p>
  <li><i><com>AdvancedModel</i> <b>AdvancedModel(</b><i>string</i> <b>fileName</b>,
    <i>boolean</i> <b>useHardware</b> = false <b>)</com></b>
    <p><descr>creates a model loading it from the specifications written in a
    file. The file must be a <i>cfg</i> file as used by <i>Cal3D</i> the &quot;<i>Character
    Animation Library</i>&quot;. If <i>useHardware</i> is <i>true</i>, hardware
    acceleration is used, otherwise not (hardware acceleration is faster but
    does not support LOD and the spring system of <i>Cal3D</i> models).</descr></p>
  <li><i><com>AdvancedModel</i>:<b>delete()</com></b>
    <p><descr>deletes a model from memory. The programmer does not need to call
    this function directly if the <i>AdvancedModel</i> is added as an <i>Object</i>
    to the world.</descr></p>
  <li><i><com>AdvancedModel</i> <i>AdvancedModel</i>:<b>clone()</com></b>
    <p><descr>clones the model. Only the <i>useHardware</i> attribute is
    replicated in the new model, all the other must be explicitly set.</descr>
    <p>&nbsp;
  <li><i><com>AdvancedModel</i>:<b>setLod(</b><i>number</i> <b>lod)</com></b>
    <p><descr>specifies the <i>LOD</i> (<i>level of detail</i>) of this model. <i>0</i>
    means lowest triangles count, <i>1</i> full triangles count. This feature
    does not work if the model is rendered in hardware.</descr>
    <p>&nbsp;
  <li><i><com>AdvancedModel</i>:<b>setScaled(</b><i>boolean</i> <b>scaled</b> =
    true<b>)</com></b>
    <p><descr>specifies if the model was scaled, so during rendering the normals
    are automatically renormalized.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>AdvancedModel</i>:<b>getAnimationsCount()</com></b>
    <p><descr>returns the number of animations of this model.</descr>
    <p>&nbsp;
  <li><i><com>AdvancedModel</i>:<b>setAnimationTime(</b><i>number</i><b> time)</com></b>
    <p><descr>sets the animation time for all the <i>Cal3D models</i>.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>AdvancedModel</i>:<b>getAnimationTime()</com></b>
    <p><descr>returns the animation time for all the <i>Cal3D models</i>.</descr>
    </p>
  <li><i><com>AdvancedModel</i>:<b>updateAnimation()</com></b>
    <p><descr>updates the animation of the model. A call to this function is not
    necessary when the model is visible since it is called automatically by the
    rendering loop.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>AdvancedModel</i>:<b>blendCycle(</b><i>number</i> <b>anim</b>,
    <i>number</i> <b>weight</b> = 1, <i>number</i> <b>delay</b> = 0<b>)</com></b>
    <p><descr>blends the specified looped animation with the current animation
    of the model with the given <i>weight</i> and <i>delay</i> of fade in.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>AdvancedModel</i>:<b>clearCycle(</b><i>number</i> <b>anim</b>,
    <i>number</i> <b>delay</b> = 0<b>)</com></b>
    <p><descr>deletes the specified looped animation that was previously blended
    with the given <i>delay</i> of fade out.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>AdvancedModel</i>:<b>executeAction(</b><i>number</i>
    <b>anim</b>, <i>number</i> <b>delayIn</b> = 0, <i>number</i> <b>delayOut</b>
    = 0,<br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>weight</b> = 1, <i>boolean</i> <b>autoLock</b>
    = false<b>)</com></b>
    <p><descr>blends the specified animation (executing it only once) with the
    current animation of the model with the given <i>weight</i>, <i>delayIn</i>
    of fade in and <i>delayOut</i> of fade out. If <i>autoLock</i> is <i>true</i>
    the animation is looped.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>AdvancedModel</i>:<b>removeAction(</b><i>number</i>
    <b>anim)</com></b>
    <p><descr>stops the specified animation. Useful when <i>executeAction</i>
    was called with <i>autoLock</i> equal to <i>true</i>.</descr>
    <p>&nbsp;
  <li><i><com>AdvancedModel</i>:<b>disableSprings()</com></b>
    <p><descr>disables the spring system.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="ms3dmodel">
<h5>3.6.2.8.4 MS3DModel</h5>
</a>The <b><class>MS3DModel</class></b> class extends <b><parent>Object</parent></b>
and inherits all its methods. It is used to render an animated set of meshes.
The format of the files needed to load the animated meshes is the <i>MS3D</i>
format.
<ul>
  <li><i><com>MS3DModel</i> <b>MS3DModel(</b><i>string</i> <b>fileName</b><b>)</com></b>
    <p><descr>loads an animated model in MS3D format from the specified file.</descr>
    <p>&nbsp;
  <li><i><com>MS3DModel</i>:<b>delete()</com></b>
    <p><descr>deletes a model from memory. The programmer does not need to call
    this function directly if the <i>Model</i> is added as an <i>Object</i> to
    the world.</descr>
    <p>&nbsp;
  <li><i><com>MS3DModel</i>:<b>setAnimations(</b><i>table</i> <b>animations</b><b>)</com></b>
    <p><descr>sets the animations for this model.
The table is a sequence of values, two integers and one boolean value, so defined: a) the first frame, b) the last frame , c) the <I>looping</I> flag (true if the animation in rendered in a loop, false otherwise).</descr>
    <p>&nbsp;
  <li><i><com>MS3DModel</i>:<b>setAnimation(</b><i>number</i><b> animation</b><b>)</com></b>
    <p><descr>sets the current animation for the model.</descr>
    <p>&nbsp;
  <li><i><com>MS3DModel</i>:<b>updateAnimation()</com></b>
    <p><descr>updates the animation of the model. A call to this function is not
    necessary because it is called automatically by the
    rendering loop.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>MS3DModel</i>:<b>getStoppedAnimation()</com></b>
    <p><descr>returns the index of the animation that has just stopped, <i>-1</i>
    otherwise.</descr>
    <p>&nbsp;
  <li><i><com>MS3DModel</i>:<b>setAnimationTime(</b><i>number</i><b> time)</com></b>
    <p><descr>sets the animation time for all the <i>MS3D models</i> (not other kind of models).</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>MS3DModel</i>:<b>getAnimationTime()</com></b>
    <p><descr>returns the animation time for all the <i>MS3D models</i> (not other kind of models).</descr>
    <p>&nbsp;
  <li><i><com>MS3DModel</i>:<b>setScaled(</b><i>boolean</i> <b>scaled</b> =
    true<b>)</com></b>
    <p><descr>specifies if the model was scaled, so during rendering the normals
    are automatically renormalized.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>MS3DModel</i>:<b>getFramesCount()</com></b>
    <p><descr>returns the number of frames in this model.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>MS3DModel</i>:<b>getFramesPerSecond()</com></b>
    <p><descr>returns the frame rate rendering of this model.</descr>
    <p>&nbsp;
  <li><i><com>MS3DModel</i>:<b>setTimeScale(</b><i>number</i> <b>scale</b><b>)</com></b>
    <p><descr>sets the time scaling factor for this model (values less than 1 make the model move slower, greater than 1 make it move faster).</descr>
    <p>&nbsp;
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="mdlmodel">
<h5>3.6.2.8.5 MDLModel</h5>
</a>The <b><class>MDLModel</class></b> class extends <b><parent>Object</parent></b>
and inherits all its methods. It is used to render an animated set of meshes.
The format of the files needed to load the animated meshes is the <i>MDL</i>
format (Half-Life 1 format).
<ul>
  <li><i><com>MDLModel</i> <b>MDLModel(</b><i>string</i> <b>fileName</b><b>)</com></b>
    <p><descr>loads an animated model in MDL format from the specified file.</descr>
    <p>&nbsp;
  <li><i><com>MDLModel</i>:<b>delete()</com></b>
    <p><descr>deletes a model from memory. The programmer does not need to call
    this function directly if the <i>Model</i> is added as an <i>Object</i> to
    the world.</descr>
    <p>&nbsp;
  <li><com><I>MDLModel</I> <i>MDLModel</i>:<b>clone()</b></com>
    <p><descr>clones a model from memory.</descr>
    <p>&nbsp;
  <li><i><com>MDLModel</i>:<b>setMaterial(</b><i>Material</i> <b>material)</com></b>
    <p><descr>sets the material of the model.</descr>
    <p>&nbsp;
  <li><i><com>Material</i> <i>MDLModel</i>:<b>getMaterial()</com></b>
    <p><descr>returns the material of the model.</descr>
    <p>&nbsp;
  <li><i><com>MDLModel</i>:<b>advanceFrame(</b><i>number</i> <b>time)</com></b>
    <p><descr>advances the animation of the specified time step.</descr>
    <p>&nbsp;
  <li><com><I>number</I> <i>MDLModel</i>:<b>setSequence(</b><i>number</i> <b>index</b>, <I>boolean</I> <B>looping</B> = true, <I>boolean</I> <B>reverse</B> = false<B>)</B></com>
    <p><descr>sets the specified animation sequence.</descr>
    <p>&nbsp;
  <li><com><I>number</I> <i>MDLModel</i>:<b>getSequence()</com></b>
    <p><descr>returns the current animation sequence.</descr>
    <p>&nbsp;
  <li><com><I>number</I> <i>MDLModel</i>:<b>getStoppedSequence()</com></b>
    <p><descr>returns the last stopped animation sequence.</descr>
    <p>&nbsp;
  <li><com><I>number</I> frameRate, <I>number</I> groundSpeed = <i>MDLModel</i>:<b>getSequenceInfo()</com></b>
    <p><descr>returns information about the current animation sequence (the frame rate and the speed of the model).</descr>
    <p>&nbsp;
  <li><com><I>number</I> <i>MDLModel</i>:<b>setTransition(</b><I>number</I> <B>duration</B>, <i>number</i> <b>index</b>, <I>boolean</I> <B>looping</B> = true, <I>boolean</I> <B>reverse</B> = false<B>)</B></com>
    <p><descr>starts the transition to the specified animation.</descr>
    <p>&nbsp;
  <li><com><I>number</I> <i>MDLModel</i>:<b>getTransitionTimer()</com></b>
    <p><descr>returns the current transition time.</descr>
    <p>&nbsp;
  <li><com><I>number</I> <i>MDLModel</i>:<b>getStoppedTransition()</com></b>
    <p><descr>returns the last stopped animation transition.</descr>
    <p>&nbsp;
  <li><com><I>number</I> <i>MDLModel</i>:<b>setController(</b><i>number</i> <b>index</b>, <I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the value of the specified controller.</descr>
    <p>&nbsp;
  <li><com><I>number</I> <i>MDLModel</i>:<b>setBlending(</b><i>number</i> <b>index</b>, <I>number</I> <B>factor</B><b>)</b></com>
    <p><descr>sets the blending factor of the specified blender.</descr>
    <p>&nbsp;
  <li><com><I>number</I> <i>MDLModel</i>:<b>setBodyGroup(</b><i>number</i> <b>group</b>, <I>number</I> <B>value</B><b>)</b></com>
    <p><descr>sets the value of the specified body group.</descr>
    <p>&nbsp;
  <li><com><I>number</I> <i>MDLModel</i>:<b>setSkin(</b><i>number</i> <b>skin</b><b>)</b></com>
    <p><descr>sets the skin of the model.</descr>
    <p>&nbsp;
  <li><com><I>boolean</I> <i>MDLModel</i>:<b>getAttachmentTransform(</b><i>number</i> <b>index</b>, <i>Transform</i> <b>transform</b><b>)</b></com>
    <p><descr>stores the transform of the attachment specified by index in the given transform. The transform does not include the transform of the object itself, so a further multiplication is needed to get the correct location and orientation of the attachment. Returns true if the index is valid.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="shadow">3.6.2.9 Shadow</a></h5>
The <b><class>Shadow</class></b> class extends <b><parent>Void</parent></b> and
represents a simplified kind of shadow that may appear under the objects added
to the world, if the terrain of the world supports shadows.
<ul>
  <li><i><com>Shadow </i><b>Shadow(<br>
&nbsp;&nbsp;&nbsp; </b><i>Object</i><b> object, </b><i>number</i><b> width</b>
    = 0, <i>number</i><b> height</b> = 0, <i>Texture</i><b> shadowTexture</b> =
    nil<br>
    <b>)</com></b>
    <p><descr>creates a shadow to be attached to an <i>object</i> and added to
    the world given its size and a texture with alpha channel. If <i>shadowTexture</i>
    is not <i>nil</i>, the created shadow is represented with a textured
    quadrilateral and its mode has value 0 (quad shadow), otherwise it is
    rendered according to the type of the object as a planar shadow (mode 1).</descr>
    <p>&nbsp;
  <li><i><com>Shadow</i>:<b>setMode(</b><i>number</i> <b>mode)</com></b>
    <p><descr>sets the type of this shadow. By default, if the shadow is created
    with a texture attached, the mode is 0 (quad shadow), otherwise the mode is
    1 (planar shadow). Another mode is 2 (shadow volumes).</descr>
    <p>&nbsp;
  <li><i><com>Shadow</i>:<b>setColor(</b><i>number</i> <b>r</b>, <i>number</i> <b>g</b>,
    <i>number</i> <b>b)</com></b>
    <p><descr>sets the color of this shadow. It works only for quad shadows. The
    default value is black.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Shadow</i>:<b>getMaxRadius()</com></b>
    <p><descr>returns the radius of the bounding sphere of the object to which
    the shadow belongs. This value is used for frustum culling checks of
    shadows. It may be different from the <i>maxRadius</i> of the object itself
    because shadows could be visible even if the object is outside the view
    frustum.</descr>
    <p>&nbsp;
  <li><i><com>Shadow</i>:<b>setMaxRadius(</b><i>number</i> <b>maxRadius)</com></b>
    <p><descr>sets the radius of the bounding sphere of the object to which the
    shadow belongs. This value is used for frustum culling checks of shadows. It
    may be different from the <i>maxRadius</i> of the object itself because
    shadows could be visible even if the object is outside the view frustum.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="shadowed">3.6.2.9.1 Shadowed</a></h5>
The <b><class>Shadowed</class></b> class extends <b><parent>Void</parent></b>
and specifies if a <i>Terrain</i> or a <i>Scenery</i> can render shadows.
<ul>
  <li><i><com>Shadowed</i>:<b>setShadowed(</b><i>boolean</i><b> s</b> = true<b>)</com></b>
    <p><descr>enables the shadows on this object (if supported by the object,
    some kind of shadow appears under the objects).</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Shadowed</i>:<b>isShadowed()</com></b>
    <p><descr>returns <i>nil</i> if the shadows are not enabled.&nbsp;</p>
  <li><i><com>Shadowed</i>:<b>setShadowsStatic(</b><br>
    <i>&nbsp;&nbsp;&nbsp; bool</i> <b>shadowsStatic</b> = true<b>,<br>
    </b>&nbsp;&nbsp;&nbsp; <i>number</i> <b>sunDirX</b> = 0<b>,</b> <i>number</i>
    <b>sunDirY</b> = 1<b>,</b> <i>number</i> <b>sunDirZ</b> = 0<b><br>
    )</com></b>
    <p><descr>specifies if the shadows must follow the local lighting (<i>false</i>
    argument) or the direction specified (<i>true</i> argument). It also
    activates the shadows rendering (with an implicit call to <i>setShadowed()</i>).
    The direction from which one sees the light that cast the shadows is given
    by the last three arguments that are optional.</descr>
    </p>
  <li><i><com>Shadowed</i>:<b>setShadowOffset(</b><i>number</i> <b>offset)</com></b>
    <p><descr>sets the offset of the shadow from the casted surface to avoid Z
    fighting.</descr>
    </p>
  <li><i><com>Shadowed</i>:<b>setShadowFadeDistance(</b><i>number</i> <b>distance)</com></b>
    <p><descr>sets the distance of the surface from the caster after which the
    shadow is no longer visible. Shadow intensity decreases linearly.</descr>
    </p>
  <li><i><com>Shadowed</i>:<b>setShadowIntensity(</b><i>number</i> <b>intensity)</com></b>
    <p><descr>sets the intensity of the shadow (1 means full dark, 0 means full
    transparency).</descr>
    </p>
  <li><i><com>Shadowed</i>:<b>addDelegate(</b><i>ShadowedDelegate</i> <b>delegate)</com></b>
    <p><descr>adds a delegate to this container. Delegates are objects that
    perform shadow rendering in place of their container.</descr>
    </p>
  <li><i><com>Shadowed</i>:<b>removeDelegate(</b><i>ShadowedDelegate</i> <b>delegate)</com></b>
    <p><descr>remove a delegate from this container. Delegates are objects that
    perform shadow rendering in place of their container.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="flat">3.6.2.10 Flat</a></h5>
The <b><class>Flat</class></b> class extends <b><parent>Object</parent></b> and
inherits all its methods. It is used to render a horizontal square.
<ul>
  <li><com><i>Flat</i> <b>Flat(</b><i>Material</i> <b>material,</b> <i>number</i> <b>size,</b> <i>number</i> <b>side</b> = 1, <i>number</i> <b>tils</b> = 1<b>)</b></com>
    <p><descr>creates a horizontal square given the material, the length of its
    side (<i>size</i>), the number of vertices per side (<i>side</i>) and the
    number of texture tiles per side (<i>tils</i>). The last two arguments are
    optional.</descr>
    </p>
  <li><com><i>Flat</i> <b>Decal(</b><i>Material</i> <b>material,</b>
<I>number</I> <B>posX</B>, <I>number</I> <B>posY</B>, <I>number</I> <B>posZ</B>, 
<I>number</I> <B>normX</B>, <I>number</I> <B>normY</B>, <I>number</I> <B>normZ</B>, 
<I>number</I> <B>offset</B>,
<i>number</i> <b>size,</b> <i>number</i> <b>side</b> = 1, <i>number</i> <b>tils</b> = 1,
<I>number</I> <B>upX</B> = 0, <I>number</I> <B>upY</B> = 1, <I>number</I> <B>upZ</B> = 0
<b>)</b></com>
    <p><descr>creates a flat object with position and orientation specified by the given parameters. The <I>offset</I> parameter specifies a translation along the normal vector from the given position.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="points">3.6.2.11 Points</a></h5>
The <b><class>Points</class></b> class extends <b><parent>Object</parent></b>
and inherits all its methods. It is used to render a collection of 3D points.
<ul>
  <li><i><com>Points</i> <b>Points(</b><i>table</i> <b>coords</b>, <i>table</i> <b>colors)</com></b>
    <p><descr>creates a collection of points with the given coordinates and
    colors. The table of coordinates must contain sequentially the values of x,
    y and z coordinates of the points. The table of colors can contain
    sequentially the values red, green, blue and alpha of the colors of every
    point (in the range 0 to 1). The colors table may be empty is all the points
    share the same color.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>number</i> <i>Points</i>:<b>getCount()</com></b>
    <p><descr>returns the number of points.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Points</i>:<b>setCoordsData(</b><i>number</i> <b>index</b>, <i>number</i>
    <b>x</b>, <i>number</i> <b>y</b>, <i>number</i> <b>z)</com></b>
    <p><descr>sets the coordinates of the point corresponding to <i>index</i>.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>Points</i>:<b>getCoordsData(</b><i>number</i>
    <b>index)</com></b>
    <p><descr>returns the coordinates of the point corresponding to <i>index</i>.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Points</i>:<b>setColorsData(</b><i>number</i> <b>index</b>, <i>number</i>
    <b>r</b>, <i>number</i> <b>g</b>, <i>number</i> <b>b</b>, <i>number</i> <b>a</b>
    = 1<b>)</com></b>
    <p><descr>sets color of the point corresponding to <i>index</i>.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>number</i> r, <i>number</i> g, <i>number</i> b, <i>number</i> a = <i>Points</i>:<b>getColorsData(</b><i>number</i>
    <b>index)</com></b>
    <p><descr>returns the color components of the point corresponding to <i>index</i>.
    Returns <i>nil</i> if the points have no color data.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Points</i>:<b>computeMaxRadius()</com></b>
    <p><descr>computes the max distance of the points from the origin.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Points</i>:<b>setColor(</b><i>number</i> <b>r</b>, <i>number</i> <b>g</b>,
    <i>number</i> <b>b</b>, <i>number</i> <b>a</b> = 1<b>)</com></b>
    <p><descr>sets color shared by points. This call is useful when the points
    have no color data. The default value is black.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Points</i>:<b>setSmooth(</b><i>boolean</i> <b>smooth</b> = true<b>)</com></b>
    <p><descr>specifies if the points are smoothed or not. No smoothing by
    default.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Points</i>:<b>setSize(</b><i>number</i> <b>size)</com></b>
    <p><descr>sets the size of the points. The value is 1 by default.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="lines">3.6.2.11.1 Lines</a></h5>
The <b><class>Lines</class></b> class extends <b><parent>Points</parent></b> and
inherits all its methods. It is used to render a collection of 3D lines.
<ul>
  <li><i><com>Lines</i> <b>Lines(</b><i>table</i> <b>indexes</b>, <i>table</i> <b>coords</b>,
    <i>table</i> <b>colors)</com></b>
    <p><descr>creates a collection of lines with the given indexes (specifying
    the order of connection between points), coordinates and colors. The table
    of coordinates must contain sequentially the values of x, y and z
    coordinates of the points. The table of colors can contain sequentially the
    values red, green, blue and alpha of the colors of every point (in the range
    0 to 1). The colors table may be empty is all the points share the same
    color. By default the lines are rendered as disconnected lines.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Lines</i>:<b>setStipple(</b><i>number</i> <b>pattern</b>, <i>number</i>
    <b>factor)</com></b>
    <p><descr>specifies the pattern used to render the lines. The value of
    pattern is considered as a bit mask: only 1s are rendered. The <i>factor</i>
    value gives a scaling factor for the pattern.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Lines</i>:<b>setModeLineStrip()</com></b>
    <p><descr>specifies that the lines are connected.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Lines</i>:<b>setModeLineLoop()</com></b>
    <p><descr>specifies that the lines are connected and the loop is closed.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="polys">3.6.2.11.2 Polys</a></h5>
The <b><class>Polys</class></b> class extends <b><parent>Lines</parent></b> and
inherits all its methods. It is used to render a collection of 3D triangles.
<ul>
  <li><i><com>Polys</i> <b>Polys(</b><i>table</i> <b>indexes</b>, <i>table</i> <b>coords</b>,
    <i>table</i> <b>colors)</com></b>
    <p><descr>creates a collection of triangles with the given indexes
    (specifying the order of connection between vertexes), coordinates and
    colors. The table of coordinates must contain sequentially the values of x,
    y and z coordinates of the vertexes. The table of colors can contain
    sequentially the values red, green, blue and alpha of the colors of every
    vertex (in the range 0 to 1). The colors table may be empty is all the
    points share the same color. By default the object is rendered as a polygon.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Polys</i>:<b>setMask(</b><i>table</i> <b>mask)</com></b>
    <p><descr>specifies the pattern used to render the triangles. The values in
    the table are considered as a bit mask: only 1s are rendered. The mask is
    arranged in a 32x32 square, so the table holds 32 integers (every integer
    contains 32 bits).</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Polys</i>:<b>setModeTriangs()</com></b>
    <p><descr>specifies that the object is rendered as a collection of
    disconnected triangles.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Polys</i>:<b>setModeTriangStrip()</com></b>
    <p><descr>specifies that the object is rendered as a strip of triangles.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Polys</i>:<b>setModeTriangFan()</com></b>
    <p><descr>specifies that the object is rendered as a fan of triangles.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Polys</i>:<b>setFillPoint()</com></b>
    <p><descr>specifies that the object is not filled but only its vertexes
    appear as points.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Polys</i>:<b>setFillLine()</com></b>
    <p><descr>specifies that the object is not filled but only its edges appear
    as lines.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="quadric">3.6.2.11.3 Quadric</a></h5>
The <b><class>Quadric</class></b> class extends <b><parent>Object</parent></b> and
inherits all its methods. It is used to render a quadric like a cylinder, a disk, a partial disk or a sphere.
<ul>
  <li><com><i>Quadric</i> <b>Cylinder(</b><I>number</I> <B>baseRadius</B> = 0.5, <I>number</I> <B>topRadius</B> = 0.5, <I>number</I> <B>height</B> = 1, <I>number</I> <B>slices</B> = 8, <I>number</I> <B>stack</B> = 4, <I>number</I> <B>loops</B> = 0, <I>number</I> <B>normals</B> = 0, <I>boolean</I> <B>texture</B> = false, <I>number</I> <B>orientation</B> = 0, <I>number</I> <B>style</B> = 0<b>)</b></com>
  <p><descr>creates a cylinder or cone. If <I>loops</I> is not equal to 0, the cyclinder is closed. The last 4 arguments mean: the kind of <I>normals</I> (0 = SMOOTH, 1, FLAT, 2 = NONE); if <I>texture</I> coordinates are generated or not; the <I>orientation</I> (0 = OUTER, 1 = INNER); the drawing <I>style</I> (0 = FILL, 1 = LINES, 2 = POINTS, 3 = SILHOUETTE).</descr>
    </p>
  <li><com><i>Quadric</i> <b>Disk(</b><I>number</I> <B>innerRadius</B> = 0, <I>number</I> <B>outerRadius</B> = 0.5, <I>number</I> <B>slices</B> = 8, <I>number</I> <B>loops</B> = 4, <I>number</I> <B>normals</B> = 0, <I>boolean</I> <B>texture</B> = false, <I>number</I> <B>orientation</B> = 0, <I>number</I> <B>style</B> = 0<b>)</b></com>
  <p><descr>creates a disk. The last 4 arguments has the same meaning as above.</descr>
    </p>
  <li><com><i>Quadric</i> <b>PartialDisk(</b><I>number</I> <B>innerRadius</B> = 0, <I>number</I> <B>outerRadius</B> = 0.5, <I>number</I> <B>slices</B> = 8, <I>number</I> <B>loops</B> = 4, <I>number</I> <B>startAngle</B> = 0, <I>number</I> <B>sweepAngle</B> = 360, <I>number</I> <B>normals</B> = 0, <I>boolean</I> <B>texture</B> = false, <I>number</I> <B>orientation</B> = 0, <I>number</I> <B>style</B> = 0<b>)</b></com>
  <p><descr>creates a partial disk. The last 4 arguments has the same meaning as above.</descr>
    </p>
  <li><com><i>Quadric</i> <b>Sphere(</b><I>number</I> <B>radius</B> = 0.5, <I>number</I> <B>slices</B> = 8, <I>number</I> <B>stacks</B> = 4, <I>number</I> <B>normals</B> = 0, <I>boolean</I> <B>texture</B> = false, <I>number</I> <B>orientation</B> = 0, <I>number</I> <B>style</B> = 0<b>)</b></com>
  <p><descr>creates a sphere. The last 4 arguments has the same meaning as above.</descr>
    </p>
  <li><com><i>Quadric</i>:<b>setMaterial(</b><i>Material</i> <b>material</b><b>)</b></com>
    <p><descr>sets the material of the quadric.</descr>
    </p>
  <li><com><i>Material</i> <i>Quadric</i>:<b>getMaterial()</b></com>
    <p><descr>returns the material of the quadric.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="truetypetext">3.6.2.12 TrueTypeText</a></h5>
The <b><class>TrueTypeText</class></b> class extends <b><parent>Object</parent></b>
and inherits all its methods. It is used to render text using true type fonts.
<ul>
  <li><com><i>TrueTypeText</i> <b>TrueTypeText(</b><i>string</i> <b>text,</b> <i>TrueTypeFont</i> <b>font</b><b>)</b></com>
    <p><descr>creates a text object given a string and its font.
    </p></descr>
  <li><com><i>string</i> <I>TrueTypeText:</I><b>getText(</b><b>)</b></com>
    <p><descr>returns the text of this object.
    </p></descr>
  <li><com><I>TrueTypeText:</I><b>setText(</b><I>string</I> <B>text</B><b>)</b></com>
    <p><descr>sets the text of this object.
    </p></descr>
  <li><com><i>boolean</i> <I>TrueTypeText:</I><b>isEnlighted(</b><b>)</b></com>
    <p><descr>returns true if this text reacts to light sources (default behavior).
    </p></descr>
  <li><com><I>TrueTypeText:</I><b>setEnlighted(</b><I>boolean</I> <B>enlighted</B> = true<b>)</b></com>
    <p><descr>sets the lighting behavior of this text.
    </p></descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="truetypefont">3.6.2.12.1 TrueTypeFont</a></h5>
The <b><class>TrueTypeFont</class></b> class controls the rendering of text using true type fonts. (<I>The descriptions here are taken from the official "<i>OGLFT 0.9</i>" library documentation</I>)
<ul>
  <li><com><i>TrueTypeFont</i>:<b>delete(</b><b>)</b></com>
    <p><descr>deletes this font.</descr>
    </p>
  <li><com><i>TrueTypeFont</i> <b>TrueTypeMonochrome(</b><I>string</I> <B>fileName</B>, <I>number</I> <b>pointSize</b> = 12, <I>number</I> <B>resolution</B> = 100<b>)</b></com>
    <p><descr>creates the font. <br>
This font renders text as texture mapped monochrome quads. <br>
This style is similar to the Monochrome raster style, except instead of using glBitmap to draw the raster image, the image is used as a texture map on a quad. If drawing is confined to the Z plane, then you will see no difference between this style and Monochrome. However, because the quad is a 3D object, it can be transformed by the usual modeling operations; so, texture mapped glyphs can be rotated in the X and Y directions as well as Z direction. Also, if the viewing (or modeling) transformation has a non-unity scale or shear, the glyphs will also be scaled or sheared (unlike the raster styles). Also, there is no problem with clipping glyphs which lie off the screen; texture mapped quads are properly clipped to the screen boundary. <br>
If this is not convincing enough, the performance of texture mapped glyphs is generally as good as or better than the equivalent raster style (especially with hardware texture acceleration). However, they do take up more memory space. 
</descr>
    </p>
  <li><com><i>TrueTypeFont</i> <b>TrueTypeGrayscale(</b><I>string</I> <B>fileName</B>, <I>number</I> <b>pointSize</b> = 12, <I>number</I> <B>resolution</B> = 100<b>)</b></com>
    <p><descr>creates the font. <br>
This font renders text as texture mapped grayscale quads. <br>
This style is similar to the Grayscale raster style, except instead of using glDrawPixels to draw the raster image, the image is used as a texture map on a quad. If drawing is confined to the Z plane, then you will see no difference between this style and Grayscale. However, because the quad is a 3D object, it can be transformed by the usual modeling operations; so, texture mapped glyphs can be rotated in the X and Y directions as well as Z direction. Also, if the viewing (or modeling) transformation has a non-unity scale or shear, the glyphs will also be scaled or sheared (unlike the raster styles). Also, there is no problem with clipping glyphs which lie off the screen; texture mapped quads are properly clipped to the screen boundary. <br>
If this is not convincing enough, the performance of texture mapped glyphs is generally as good as or better than the equivalent raster style (especially with hardware texture acceleration). However, they do consume more memory space. 
</descr>
    </p>
  <li><com><i>TrueTypeFont</i> <b>TrueTypeTranslucent(</b><I>string</I> <B>fileName</B>, <I>number</I> <b>pointSize</b> = 12, <I>number</I> <B>resolution</B> = 100<b>)</b></com>
    <p><descr>creates the font. <br>
This font renders text as texture mapped translucent quads. <br>
This style is similar to the Translucent raster style, except instead of using glDrawPixels to draw the raster image, the image is used as a texture map on a quad. If drawing is confined to the Z plane, then you will see no difference between this style and Translucent. However, because the quad is a 3D object, it can be transformed by the usual modeling operations; so, texture mapped glyphs can be rotated in the X and Y directions as well as Z direction. Also, if the viewing (or modeling) transformation has a non-unity scale or shear, the glyphs will also be scaled or sheared (unlike the raster styles). Also, there is no problem with clipping glyphs which lie off the screen; texture mapped quads are properly clipped to the screen boundary. <br>
If this is not convincing enough, the performance of texture mapped glyphs is generally as good as or better than the equivalent raster style (especially with hardware texture acceleration). However, they do consume more memory space. 
</descr>
    </p>
<!--
  <li><com><i>TrueTypeFont</i> <b>TrueTypeRasterMonochrome(</b><I>string</I> <B>fileName</B>, <I>number</I> <b>pointSize</b> = 12, <I>number</I> <B>resolution</B> = 100<b>)</b></com>
    <p><descr>creates the font. <br>
This font renders text as a monochrome raster image. <br>
This is more or less the standard way in which text is intended to be rendered in OpenGL. It uses the glBitmap call to draw a sequence of monochrome bitmaps.
</descr>
    </p>
  <li><com><i>TrueTypeFont</i> <b>TrueTypeRasterGrayscale(</b><I>string</I> <B>fileName</B>, <I>number</I> <b>pointSize</b> = 12, <I>number</I> <B>resolution</B> = 100<b>)</b></com>
    <p><descr>creates the font. <br>
This font renders text as a grayscale raster image. <br>
The Grayscale style is similar to the Monochrome style. FreeType is used to rasterize a glyph and this is then drawn on the screen using glDrawPixels. The FreeType rasterization is done in anti-aliased mode. When Grayscale draws the glyph image, the resulting text is blended smoothly from the foreground color to the background color. The background of the glyph is opaque, so this style works best over a solid background.
</descr>
    </p>
  <li><com><i>TrueTypeFont</i> <b>TrueTypeRasterTranslucent(</b><I>string</I> <B>fileName</B>, <I>number</I> <b>pointSize</b> = 12, <I>number</I> <B>resolution</B> = 100<b>)</b></com>
    <p><descr>creates the font. <br>
This font renders text as a translucent raster image. <br>
The Translucent style is similar to the Grayscale style. FreeType is used to rasterize a glyph and this is then drawn on the screen using glDrawPixels. The FreeType rasterization is done in anti-aliased mode. When Translucent draws the glyph image, the grayscale levels provided by FreeType are used as Alpha values in the raster image. This allows the glyphs to be smoothly blended into complicated backgrounds. 
</descr>
    </p>
-->
  <li><com><i>TrueTypeFont</i>:<b>setHorizontalJustification(</b><I>number</I> <B>justif</B><b>)</b></com>
    <p><descr>sets the horizontal justification of the font. The values are: 0 = LEFT, 1= ORIGIN (default), 2 = CENTER, 3 = RIGHT. 
</descr>
    </p>
  <li><com><I>number</I> <i>TrueTypeFont</i>:<b>getHorizontalJustification(</b><b>)</b></com>
    <p><descr>returns the horizontal justification of the font. 
</descr>
    </p>
  <li><com><i>TrueTypeFont</i>:<b>setVerticalJustification(</b><I>number</I> <B>justif</B><b>)</b></com>
    <p><descr>sets the vertical justification of the font. The values are: 0 = BOTTOM, 1 = BASELINE (default), 2 = MIDDLE, 3 = TOP. 
</descr>
    </p>
  <li><com><I>number</I> <i>TrueTypeFont</i>:<b>getVerticalJustification(</b><b>)</b></com>
    <p><descr>returns the vertical justification of the font. 
</descr>
    </p>
  <li><com><i>TrueTypeFont</i>:<b>setForegroundColor(</b><I>number</I> <B>r</B>, <I>number</I> <B>g</B>, <I>number</I> <B>b</B>, <I>number</I> <B>a</B> = 1<b>)</b></com>
    <p><descr>sets the foreground color of the font. Values must be in the range from 0 to 1. 
</descr>
    </p>
  <li><com><I>number</I> r, <I>number</I> g, <I>number</I> b, <I>number</I> a = <i>TrueTypeFont</i>:<b>getForegroundColor(</b><b>)</b></com>
    <p><descr>returns the foreground color of the font. 
</descr>
    </p>
  <li><com><i>TrueTypeFont</i>:<b>setBackgroundColor(</b><I>number</I> <B>r</B>, <I>number</I> <B>g</B>, <I>number</I> <B>b</B>, <I>number</I> <B>a</B> = 1<b>)</b></com>
    <p><descr>sets the background color of the font. Values must be in the range from 0 to 1. 
</descr>
    </p>
  <li><com><I>number</I> r, <I>number</I> g, <I>number</I> b, <I>number</I> a = <i>TrueTypeFont</i>:<b>getBackgroundColor(</b><b>)</b></com>
    <p><descr>returns the background color of the font. 
</descr>
    </p>
  <li><com><I>number</I> <i>TrueTypeFont</i>:<b>getHeight(</b><b>)</b></com>
    <p><descr>returns the height (i.e. line spacing) at the current character size. 
</descr>
    </p>
  <li><com><I>number</I> minX, <I>number</I> minY, <I>number</I> maxX, <I>number</I> maxY, <I>number</I> advanceX, <I>number</I> advanceY = <i>TrueTypeFont</i>:<b>getMeasure(</b><I>string</I> <B>text</B><b>)</b></com>
    <p><descr>returns the bounding box info for a string. The values specify the left-most, bottom-most, right-most, top-most positions at which "ink" appears and the (total) advancement.
</descr>
    </p>
  <li><i><com>string TrueTypeFont</i>:<b>getType()</com></b>
    <p><descr>returns the string "<I>TrueTypeFont</I>".</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="truetypepolygonal">3.6.2.12.1.1 TrueTypePolygonal</a></h5>
The <b><class>TrueTypePolygonal</class></b> class extends <b><parent>TrueTypeFont</parent></b> and controls the rendering of text using true type fonts and solid rendering mode. (<I>The descriptions here are taken from the official "<i>OGLFT 0.9</i>" library documentation</I>)
<ul>
  <li><com><i>TrueTypePolygonal</i> <b>TrueTypeOutline(</b><I>string</I> <B>fileName</B>, <I>number</I> <b>pointSize</b> = 12, <I>number</I> <B>resolution</B> = 100<b>)</b></com>
    <p><descr>creates the font. <br>
This font renders text as a polygon outline. <br><BR>
Text is drawn as an outline of each glyph. The contours are extracted from the font file through FreeType. FreeType is used to scale the contours to a given size. Usually the outline is drawn in the foreground color. <br>
The only complexity to this style is selecting the point size. Since the outlines are drawn as a polygon, they are subject to the MODELVIEW transformation. The point size is nominally chosen to be the same as a raster image generated at the given resolution. Some experimentation with point size and resolution may be necessary to achieve the desired results. 
</descr>
    </p>
  <li><com><i>TrueTypePolygonal</i> <b>TrueTypeFilled(</b><I>string</I> <B>fileName</B>, <I>number</I> <b>pointSize</b> = 12, <I>number</I> <B>resolution</B> = 100<b>)</b></com>
    <p><descr>creates the font. <br>
This font renders text as a filled polygons. <br>
Each glyph is drawn as a filled polygon. The contours are extracted from the font file through FreeType. FreeType is used to scale the contours to the given size. Then the GLU tessellation routines are used to tessellate the contours into polygons (well, triangles). By default, these are drawn in GL_FILL polygon mode. <br> 
Usually, the polygons are drawn only in the foreground color. <br>
The only complexity to this style is selecting the point size. Since the glyphs are drawn as polygons, they are subject to the viewing and modeling transformations. The point size is nominally chosen to be the same as a raster image generated at the given resolution. Some experimentation with point size and resolution may be necessary to achieve the desired results. 
</descr>
    </p>
  <li><com><i>TrueTypePolygonal</i>:<b>setTessellationSteps(</b><I>number</I> <B>steps</B><b>)</b></com>
    <p><descr>sets the tessellation steps of the font.</descr>
    </p>
  <li><com><I>number</I> <i>TrueTypePolygonal</i>:<b>getTessellationSteps(</b><b>)</b></com>
    <p><descr>returns the tessellation steps of the font.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="truetypesolid">3.6.2.12.1.2 TrueTypeSolid</a></h5>
The <b><class>TrueTypeSolid</class></b> class extends <b><parent>TrueTypePolygonal</parent></b> and controls the rendering of text with depth using true type fonts and solid rendering mode. (<I>The descriptions here are taken from the official "<i>OGLFT 0.9</i>" library documentation</I>)
<ul>
  <li><com><i>TrueTypeSolid</i> <b>TrueTypeSolid(</b><I>string</I> <B>fileName</B>, <I>number</I> <b>pointSize</b> = 12, <I>number</I> <B>resolution</B> = 100<b>)</b></com>
    <p><descr>creates the font. <br>
This font renders text as solid letters. <br>
Each glyph is drawn as a closed solid. The contours are extracted from the font file through FreeType. FreeType is used to scale the contours to the given size. The contours are passed to the GLE tubing and extrusion library to create the sides of the solid. Then the GLU tessellation routines are used to tessellate the contours into polygons which are used to cap the sides. <br>
Currently, the solids are drawn only in the foreground color. However, proper surface normals are computed so that the solids may be lighted. <br>
The only complexity to this style is selecting the point size. Since the glyphs are drawn as a collection of polygons, they are subject to the viewing and modeling transformations. The point size is nominally chosen to be the same as a raster image generated at the given resolution. Some experimentation with point size and resolution may be necessary to achieve the desired results. 
</descr>
    </p>
  <li><com><i>TrueTypeSolid</i>:<b>setDepth(</b><I>number</I> <B>depth</B><b>)</b></com>
    <p><descr>sets the depth of the font.</descr>
    </p>
  <li><com><I>number</I> <i>TrueTypeSolid</i>:<b>getDepth(</b><b>)</b></com>
    <p><descr>returns the depth of the font.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="unicodetext">3.6.2.12.2 UnicodeText</a></h5>
The <b><class>UnicodeText</class></b> class extends <b><parent>Object</parent></b>
and inherits all its methods. It is used to render text using true type fonts even in unicode.
<ul>
  <li><com><i>UnicodeText</i> <b>UnicodeText(</b><i>string</i> <b>text,</b> <i>UnicodeFont</i> <b>font</b><b>)</b></com>
    <p><descr>creates a text object given a string and its font.
    </p></descr>
  <li><com><i>string</i> <I>UnicodeText:</I><b>getText(</b><b>)</b></com>
    <p><descr>returns the text of this object.
    </p></descr>
  <li><com><i>string</i> <I>UnicodeText:</I><b>getUnicodeText(</b><b>)</b></com>
    <p><descr>returns the unicode text of this object.
    </p></descr>
  <li><com><I>UnicodeText:</I><b>setText(</b><I>string</I> <B>text</B><b>)</b></com>
    <p><descr>sets the text of this object.
    </p></descr>
  <li><com><I>UnicodeText:</I><b>setUnicodeText(</b><I>string</I> <B>unicodeText</B><b>)</b></com>
    <p><descr>sets the unicode text of this object.
    </p></descr>
  <li><com><i>boolean</i> <I>UnicodeText:</I><b>isEnlighted(</b><b>)</b></com>
    <p><descr>returns true if this text reacts to light sources (default behavior).
    </p></descr>
  <li><com><I>UnicodeText:</I><b>setEnlighted(</b><I>boolean</I> <B>enlighted</B> = true<b>)</b></com>
    <p><descr>sets the lighting behavior of this text.
    </p></descr>
  <li><com><I>UnicodeText:</I><b>setAlignment(</b><I>number</I> <B>align</B><b>)</b></com>
    <p><descr>sets the alignment of this text (0 = LEFT, 1 = CENTER, 2 = RIGHT).
    </p></descr>
  <li><com><I>UnicodeText:</I><b>setColor(</b><I>number</I> <B>r</B>, <I>number</I> <B>g</B>, <I>number</I> <B>b</B>, <I>number</I> <B>a</B> = 1<b>)</b></com>
    <p><descr>sets the color of this text (range 0-1).
    </p></descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="unicodefont">3.6.2.12.2.1 UnicodeFont</a></h5>
The <b><class>UnicodeFont</class></b> class controls the rendering of text using true type fonts even in unicode.
<ul>
  <li><com><i>UnicodeFont</i>:<b>delete(</b><b>)</b></com>
    <p><descr>deletes this font.</descr>
    </p>
  <li><com><i>UnicodeFont</i> <b>UnicodeFontBitmap(</b><I>string</I> <B>fileName</B><b>)</b></com>
    <p><descr>creates a font of the bitmap type. This font renders text as bitmaps. In this type alignment does not work (always left alignment) and the text always faces the camera.</descr>
    </p>
  <li><com><i>UnicodeFont</i> <b>UnicodeFontPixmap(</b><I>string</I> <B>fileName</B><b>)</b></com>
    <p><descr>creates a font of the pixel map type. This font renders text as pixel map. In this type alignment does not work (always left alignment) and the text always faces the camera.</descr>
    </p>
  <li><com><i>UnicodeFont</i> <b>UnicodeFontOutline(</b><I>string</I> <B>fileName</B><b>)</b></com>
    <p><descr>creates the a font of the outline type. The default alignment is CENTER.</descr>
    </p>
  <li><com><i>UnicodeFont</i> <b>UnicodeFontPolygon(</b><I>string</I> <B>fileName</B><b>)</b></com>
    <p><descr>creates the a font of the polygon type. The default alignment is CENTER.</descr>
    </p>
  <li><com><i>UnicodeFont</i> <b>UnicodeFontExtruded(</b><I>string</I> <B>fileName</B><b>)</b></com>
    <p><descr>creates the a font of the extruded type. The default alignment is CENTER.</descr>
    </p>
  <li><com><i>UnicodeFont</i> <b>UnicodeFontTextured(</b><I>string</I> <B>fileName</B><b>)</b></com>
    <p><descr>creates the a font of the textured type. In this case, <I>textured</I> means that a texture is used to render character shapes. The default alignment is CENTER.</descr>
    </p>
  <li><com><i>UnicodeFont</i>:<b>setDepth(</b><I>number</I> <B>depth</B><b>)</b></com>
    <p><descr>sets the depth of the font (of course, it works only with <I>UnicodeFont</I>s of extruded type.</descr>
    </p>
  <li><com><i>UnicodeFont</i>:<b>setSize(</b><I>number</I> <B>size</B><b>)</b></com>
    <p><descr>sets the size of the font in <I>pt</I> units.</descr>
    </p>
  <li><com><I>number</I> minX, <I>number</I> minY, <I>number</I> minZ, <I>number</I> maxY, <I>number</I> maxY, <I>number</I> maxZ = <i>UnicodeFont</i>:<b>getBox(</b><I>string</I> <B>text</B>, <I>boolean</I> <B>isUnicode</B> = false<b>)</b></com>
    <p><descr>returns the bounding box info of a given string. The values specify the left-most, bottom-most, right-most, top-most positions at which "ink" appears. If <I>isUnicode</I> is true, the text is considered a unicode text.
</descr>
    </p>
  <li><i><com>string UnicodeFont</i>:<b>getType()</com></b>
    <p><descr>returns the string "<I>UnicodeFont</I>".</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="particlegroup">3.6.2.13 ParticleGroup</a></h5>
The <b><class>ParticleGroup</class></b> class extends <b><parent>Object</parent></b>
and inherits all its methods. It is used to render the particles of a particle system.
<ul>
  <li><com><i>ParticleGroup</i>:<b>delete(</b><b>)</b></com>
    <p><descr>deletes this particle group.</descr>
    </p>
  <li><com><i>ParticleGroup</i>:<b>setMaterial(</b><i>Material</i> <b>material</b><b>)</b></com>
    <p><descr>sets the material of the particle group.</descr>
    </p>
  <li><com><i>Material</i> <i>ParticleGroup</i>:<b>getMaterial()</b></com>
    <p><descr>returns the material of the particle group.</descr>
    </p>
  <li><com><i>ParticleGroup</i>:<b>setConstColor(</b><I>boolean</I> <B>b</B> = true<b>)</b></com>
    <p><descr>specifies if the particle color is constant (in that case the color is taken from the emissive color of the material).</descr>
    </p>
  <li><com><I>boolean</I> <i>ParticleGroup</i>:<b>isConstColor(</b><b>)</b></com>
    <p><descr>returns true if the color of the particles is constant.</descr>
    </p>
  <li><com><i>ParticleGroup</i>:<b>setConstSize(</b><I>boolean</I> <B>b</B> = true<b>)</b></com>
    <p><descr>specifies if the particle size is constant (in that case the size is specified by the <I>sizeScale</I>).</descr>
    </p>
  <li><com><I>boolean</I> <i>ParticleGroup</i>:<b>isConstSize(</b><b>)</b></com>
    <p><descr>returns true if the size of the particles is constant.</descr>
    </p>
  <li><com><i>ParticleGroup</i>:<b>setSizeScale(</b><I>number</I> <B>s</B><b>)</b></com>
    <p><descr>sets the scaling factor for the size of particles.</descr>
    </p>
  <li><com><I>number</I> <i>ParticleGroup</i>:<b>getSizeScale(</b><b>)</b></com>
    <p><descr>returns the scaling factor for the size of particles.</descr>
    </p>
  <li><com><i>ParticleGroup</i>:<b>setBlendAlpha(</b><I>boolean</I> <B>b</B> = true<b>)</b></com>
    <p><descr>specifies the blend of the particle with the background: true means that  the alpha channel is used, false means that the colors are simply added.</descr>
    </p>
  <li><com><I>boolean</I> <i>ParticleGroup</i>:<b>isBlendAlpha(</b><b>)</b></com>
    <p><descr>returns true if the particles are blended with the background using the alpha channel.</descr>
    </p>
  <li><com><i>ParticleGroup</i>:<b>setMode(</b><I>number</I> <B>m</B>, <I>Object</I> <B>obj</B> = nil<b>)</b></com>
    <p><descr>sets the rendering mode of particles. The possible values are: 0 = points; 1 = point sprites; 2 = lines; 3 = triangle sprites; 4 = quad sprites; 5 = objects. In the latter case, also an instance of class <I>Object</I> must be specified.</descr>
    </p>
  <li><com><I>number</I> <i>ParticleGroup</i>:<b>getMode(</b><b>)</b></com>
    <p><descr>returns the rendering mode of particles.</descr>
    </p>
  <li><com><I>number</I> <i>ParticleGroup</i>:<b>getParticlesCount(</b><b>)</b></com>
    <p><descr>returns the number of particles currently shown.</descr>
    </p>
  <li><com><I>number</I> <i>ParticleGroup</i>:<b>getMaxParticles(</b><b>)</b></com>
    <p><descr>returns the maximum number of particles in this group.</descr>
    </p>
  <li><com><i>ParticleGroup</i>:<b>setMaxParticles(</b><I>number</I> <B>max</B><b>)</b></com>
    <p><descr>sets the maximum number of particles in this group.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="particlesystem">3.6.2.13.1 ParticleSystem</a></h5>
The <b><class>ParticleSystem</class></b> class control the simulation of one or more <I>ParticleGroup</I>s. (<I>The descriptions here are taken from the official "<i>Particle 2.1</i>" library documentation</I>)
<ul>
  <li><com><I>ParticleSystem</I> <B>ParticleSystem(</b><b>)</b></com>
    <p><descr>creates a particle system.</descr>
    </p>
  <li><com><i>ParticleSystem</i>:<b>delete(</b><b>)</b></com>
    <p><descr>deletes this particle system.</descr>
    </p>
  <li><com><I>ParticleGroup</I> <i>ParticleSystem</i>:<b>createParticleGroup(</b><b>)</b></com>
    <p><descr>creates a particle group associated to this particle system.</descr>
    </p>
  <li><com><i>ParticleSystem</i>:<b>setCurrentGroup(</b><I>ParticleGroup</I> <B>group</B><b>)</b></com>
    <p><descr>makes current the specified particle group. All the subsequent commands of this particle system will be applied to that group. The group must be associated (created by) this particle system.</descr>
    </p>

<p><li><B>SOURCE STATES</B>
<p><ul>
  <li><com><i>ParticleSystem</i>:<b>setColor(</b><I>number</I> <B>r</B>, <I>number</I> <B>g</B>, <I>number</I> <B>b</B>, <I>number</I> <B>a</B> = 1<b>)</b></com>
    <p><descr>
Specify the color of particles to be created. 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>setColorDomain(</b><I>ParticleDomain</I> <B>d</B>, <I>ParticleDomain</I> <B>a</B><b>)</b></com>
    <p><descr>
Specify the domain for colors and alpha value of new particles. <br>
Your application can interpret the color triple in RGB color space, with colors ranging on 0.0 -> 1.0. For example, the ParticleLine(1, 0, 0, 1, 1, 0)) will choose points on a line between red and yellow. Points outside the 0.0 -> 1.0 range will not be clamped by the Particle System API. The alpha value is usually used for transparency (only the x component of the domain is considered for the alpha channel). <br>
The default color is 1,1,1,1 (opaque white). 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>setSize(</b><I>number</I> <B>x</B>, <I>number</I> <B>y</B>, <I>number</I> <B>z</B><b>)</b></com>
    <p><descr>
Specify the size of particles to be created. 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>setSizeDomain(</b><I>ParticleDomain</I> <B>d</B><b>)</b></com>
    <p><descr>
Specify the domain for the size of particles to be created. <br>
All new particles will have a size chosen randomly from within the specified domain. The size values may be negative. <br>
The size is not mass. It does not affect any particle dynamics, including acceleration and bouncing. It is merely a triple of rendering attributes, like color, and can be interpreted at the whim of the application programmer (thats you). <br>
The default size is 1,1,1. 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>setMass(</b><I>number</I> <B>m</B><b>)</b></com>
    <p><descr>
Specify the mass of particles to be created. <br>
The mass is used in the particle dynamics math, such as F=m*a. It doesn't affect size for bouncing, etc. <br>
The default mass is 1. 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>setAge(</b><I>number</I> <B>age</B>, <I>number</I> <B>sigma</B> = 0<b>)</b></com>
    <p><descr>
Specify the initial age of particles to be created. <br>
The age parameter can be positive, zero, or negative. Giving particles different starting ages allows KillOld() to distinguish between which to kill in interesting ways. Setting sigma to a non-zero value will give the particles an initial age with a normal distribution with mean age and standard deviation sigma. When many particles are created at once this allows a few particles to die at each time step, yielding a more natural effect. <br>
The default age is 0 and its sigma is 0. 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>setVelocity(</b><I>number</I> <B>vx</B>, <I>number</I> <B>vy</B>, <I>number</I> <B>vz</B><b>)</b></com>
    <p><descr>
Specify the velocity of particles to be created. 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>setVelocityDomain(</b><I>ParticleDomain</I> <B>d</B><b>)</b></com>
    <p><descr>
Specify the domain for the initial velocity vector of particles to be created. <br>
The default Velocity vector is 0,0,0. 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>setRotVelocity(</b><I>number</I> <B>vx</B>, <I>number</I> <B>vy</B>, <I>number</I> <B>vz</B><b>)</b></com>
    <p><descr>
Specify the rotational velocity of particles to be created. 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>setRotVelocityDomain(</b><I>ParticleDomain</I> <B>d</B><b>)</b></com>
    <p><descr>
Specify the domain for the initial rotational velocity vector of particles to be created. <br>
For particles that will be rendered with complex shapes, like boulders, a rotation frame may be defined. The frame consists of the velocity vector, the Up vector, and the cross product of those. <br>
The default rotational velocity is 0,0,0. 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>setUpVec(</b><I>number</I> <B>vx</B>, <I>number</I> <B>vy</B>, <I>number</I> <B>vz</B><b>)</b></com>
    <p><descr>
Specify the initial up vector of particles to be created. 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>setUpVecDomain(</b><I>ParticleDomain</I> <B>d</B><b>)</b></com>
    <p><descr>
Specify the domain for the initial up vector of particles to be created. <br>
For particles that will be rendered with complex shapes, like boulders, a rotation frame may be defined. The frame consists of the velocity vector, the Up vector, and the cross product of those.<br>
The default Up vector is 0,1,0. 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>setVertexB(</b><I>ParticleDomain</I> <B>d</B><b>)</b></com>
    <p><descr>
Specify the domain for the initial secondary position of new particles. <br>
The <I>positionB</I> attribute is used to store a destination position for the particle. This is designed for actions such as <I>restore()</I>. <br>
The default <I>positionB</I> is 0,0,0. 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>setVertexBTracks(</b><I>boolean</I> <B>tracks</B> = true<b>)</b></com>
    <p><descr>
Specify that the initial secondary position of new particles be the same as their position. <br>
If true, the <I>positionB</I> attribute of new particles comes from their position, rather than from the <I>vertexB</I> domain. <br>
The default value of <I>vertexBTracks</I> is true. 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>reset(</b><b>)</b></com>
    <p><descr>
Reset all particle creation state to default values. 
</descr></p>
</ul>

<p><li><B>ACTION LISTS</B>
<p><ul>
  <li><com><i>ParticleSystem</i>:<b>setSeed(</b><I>number</I> <B>seed</B><b>)</b></com>
    <p><descr>
Set the random number seed. <br>
The Particle API uses a pseudo-random number generator. The returned number is a function of the numbers already returned. If you start two threads, they will both generate the same particles if given the same commands. If this is not desired, call <I>setSeed()</I> on both of them with different seed values. The API currently uses the C standard library random number generator, whose state is per-thread, so all contexts in the thread share the same random number seed. 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>setTimeStep(</b><I>number</I> <B>dt</B><b>)</b></com>
    <p><descr>
Specify the time step length. <br>
The Particle System API uses a discrete time approximation to all actions. This means that actions are applied to the particles at a particular instant in time as if the action's effect accumulated over a small time interval, dt, with the world being constant over the interval. The clock is then "ticked" by the length of the interval and the actions can then be reapplied with the particles having their updated values. This is the standard method of doing almost all time-varying simulations in computer science. <br>
How does the time step, dt, relate to the application's frame rate? The easiest method is to apply the actions once per frame. If the application prefers to keep time in terms of seconds, dt can be set to (1 / frames_per_second). But more often, it is easier for a time unit to be one frame instead of one second. In this case, dt should be 1.0, which is the default. <br>
For higher quality, the application can apply particle actions more than once per frame. This provides smoother, more realistic results in many subtle ways. Suppose the application wanted to compute three animation steps for each rendered frame. Set dt to 1/3 its previous value using <I>setTimeStep()</I>, then loop three times over all the action code that gets executed per frame, including the calls to Move. If using action lists, this can be simply a loop over the CallActionList() call. The run-time results should be about the same, but with fewer discrete approximation artifacts. Depending on how much non-particle work is done per frame, increasing the number of time steps per frame may or may not affect the frame rate very much. <br>
In terms of numerical integration, particle actions can be thought of as the first derivative of unknown functions dictating the particle attributes (such as position) over time. In order to compute the particle attributes these derivative functions must be integrated. Since closed form integration doesn't make sense for most actions, Euler's method is used instead. Euler's method is simply the method just described  the evaluation of the derivative functions at a particular time and then incrementing the current particle values by these derivative results times dt. In Euler's method, the smaller the dt, the more accurate the results. 
Unlike with other state setting calls, action lists execute using the current dt value set by <I>setTimeStep()</I>, rather than the time step value that was current when the action list was created. Making action lists independent of time step size allows the time step to be changed without recompiling the action list. 
</descr></p>
  <li><com><I>number</I> <i>ParticleSystem</i>:<b>generateActionList(</b><b>)</b></com>
    <p><descr>
Generate an empty action list. <br>
Returns the action list number of the allocated list. Valid action list numbers are non-negative. 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>deleteActionList(</b><I>number</I> <B>list</B><b>)</b></com>
    <p><descr>
Delete one action list. <br>
The list must exist. This removes the specified action list from existence. 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>callActionList(</b><I>number</I> <B>list</B><b>)</b></com>
    <p><descr>
Execute the specified action list on the current particle group. <br>
Call the action functions as specified when this action list was created with <I>newActionList()</I>. The actions are executed with the state values in effect when the action list was created, except the context's current value of <I>dt</I> is used, not the value of <I>dt</I> when the list was created. <I>callActionList()</I> is the only function other than actions that can be stored in an action list. This allows action lists to become atomic operations in more complex action lists. When calling <I>callActionList()</I> during the creation of a new action list, <I>list</I> does not need to indicate an existing action list. It is an error for <I>list</I> to not indicate an existing (generated) action list. 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>newActionList(</b><I>number</I> <B>list</B><b>)</b></com>
    <p><descr>
Begin the creation of the specified action list. <br>
The <I>list</I> must have already been generated using <I>generateActionList()</I>. Most calls other than actions and state setting calls cannot be made between a call to <I>newActionList()</I> and the corresponding call to <I>endActionList()</I>. If called on an action list that has previously been defined, the previous contents of the action list are destroyed and the action list will be created anew. 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>endActionList(</b><b>)</b></com>
    <p><descr>
End the creation of a new action list. <br>
Obviously, it is an error to call <I>endActionList()</I> without a corresponding call to <I>newActionList()</I>. 
</descr></p>
</ul>

<p><li><B>ACTIONS</B>
<p><ul>
  <li><com><i>ParticleSystem</i>:<b>avoid(</b><I>number</I> <B>magnitude</B>, <I>number</I> <B>lookAhead</B>, <I>ParticleDomain</I> <B>dom</B><b>)</b></com>
    <p><descr>
Steer particles away from a domain of space. <br>
Particles are tested to see whether they will pass from being outside the specified domain to being inside it within look_ahead time units from now if the next <I>move()</I> action were to occur now. The specific direction and amount of turn is dependent on the kind of domain being avoided. 
At present the only domains for which <I>avoid()</I> is implemented are <I>ParticleSphere, ParticleRectangle, ParticleTriangle, ParticleDisc</I> and <I>ParticlePlane</I>. <br>
Parameters: <br>
<I>magnitude</I>	- how drastically the particle velocities are modified to avoid the obstacle at each time step	<br>
<I>look_ahead</I> 	- how far forward along the velocity vector to look for the obstacle	<br>
<I>dom</I> 	- the space to avoid
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>bounce(</b><I>number</I> <B>friction</B>, <I>number</I> <B>resilience</B>, <I>number</I> <B>cutoff</B>, <I>ParticleDomain</I> <B>dom</B><b>)</b></com>
    <p><descr>
Bounce particles off an object defined by a domain. <br>
Particles are tested to see whether they will pass from being outside the specified domain to being inside it if the next <I>move()</I> action were to occur now. If they would pass through the surface of the domain, they are instead bounced off it. That is, their velocity vector is decomposed into components normal to the surface and tangent to the surface. The direction of the normal component is reversed, and friction, resilience and cutoff are applied to the components. They are then recomposed into a new velocity heading away from the surface. <br>
Since particles are tested to see whether they would pass through the domain if <I>move()</I> were called now, it is best to have <I>bounce()</I> be the last action that modifies a particle's velocity before calling <I>move()</I>. Also, actions such as <I>randomDisplace()</I> that modify a particle's position directly, rather than modifying its velocity vector, may yield unsatisfying results when used with <I>bounce()</I>. <br>
At present the only domains for which <I>bounce()</I> is implemented are <I>ParticleSphere, ParticleRectangle, ParticleTriangle, ParticleDisc</i> and <i>ParticlePlane</I>. For spheres, the particle bounces off either the inside or the outside of the sphere. For planes, triangles and discs, the particles bounce off either side of the surface. For rectangles, particles bounce off either side of the diamond-shaped patch whose corners are o, o+u, o+u+v, and o+v. See the documentation on domains for further explanation. <br>
<I>bounce()</I> doesn't work correctly with small time step sizes for particles sliding along a surface. The <I>friction</I> and <I>resilience</I> parameters should not be scaled by <I>dt</I>, since a bounce happens instantaneously. On the other hand, they should be scaled by <I>dt</I> because particles sliding along a surface will hit more often if <I>dt</I> is smaller. Adjust these parameters manually when you change <I>dt</I>. <br>
Parameters: <br>
<I>friction </I>	- The tangential component of the outgoing velocity vector is scaled by (1 - friction). 	<br>
<I>resilience</I> 	- The normal component of the outgoing velocity vector is scaled by resilience. 	<br>
<I>cutoff </I>	- Only apply friction if the outgoing tangential velocity is greater than cutoff. This can allow particles to glide smoothly along a surface without sticking. 	<br>
<I>dom</I> 	- Bounce off the surface of this domain. 	
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>copyVertexB(</b><I>boolean</I> <B>copyPos</B> = true, <I>boolean</I> <B>copyVel</B> = false<b>)</b></com>
    <p><descr>
Set the secondary position and velocity from current. <br>
Parameters: <br>
<I>copyPos</I> -	If true, sets the <I>positionB</I> of each particle to the current position of that particle. This makes each particle remember this position so it can later return to it using the <I>restore()</I> action. 	<br>
<I>copyVel</I> -	If true, sets the <I>velocityB</I> of each particle to the current velocity of that particle. This can be useful for computing the orientation of the particle by copying a particle's velocity at the beginning of each time step. Then when drawing a particle, the cross-product velocity and velocityB yields a tangent vector. 	
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>damping(</b><I>number</I> <B>vx</B>, <I>number</I> <B>vy</B>, <I>number</I> <B>vz</B><b>)</b></com>
    <p><descr>
Simulate air by dampening particle velocities. <br>
If a particle's velocity magnitude is within vlow and vhigh, then multiply each component of the velocity by the respective damping constant. Typically, the three components of damping will have the same value. There are no bounds on the damping constants. Thus, by giving values greater than 1.0 they may be used to speed up particles instead of slow them down. <br>
Parameters: <BR>
<I>damping</I> - Component-wise multiply this vector by the velocity vector 	
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>rotDamping(</b><I>number</I> <B>vx</B>, <I>number</I> <B>vy</B>, <I>number</I> <B>vz</B><b>)</b></com>
    <p><descr>
Simulate air by dampening rotational velocities. <br>
If a particle's rotational velocity magnitude is within vlow and vhigh, then multiply each component of the rotational velocity by the respective damping constant. Typically, the three components of damping will have the same value. There are no bounds on the damping constants. Thus, by giving values greater than 1.0 they may be used to speed up particles instead of slow them down. <br>
Parameters: <br>
<I>damping</I> - Component-wise multiply this vector by the rotational velocity vector 	
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>explosion(</b><I>number</I> <B>cx</B>, <I>number</I> <B>cy</B>, <I>number</I> <B>cz</B>, <I>number</I> <B>radius</B>, <I>number</I> <B>magnitude</B>, <I>number</I> <B>sigma</B><b>)</b></com>
    <p><descr>
Exert force on each particle away from explosion center. <br>
Causes an explosion by accelerating all particles away from the center. Particles are accelerated away from the center by an amount proportional to magnitude. The shock wave of the explosion has a gaussian magnitude. The peak of the wave front travels spherically outward from the center at the specified velocity. So at a given time step, particles at a distance (velocity * age) from center will receive the most acceleration, and particles not at the peak of the shock wave will receive a lesser outward acceleration.  <br>
<I>radius</I> is the current radius of the explosion wave's peak. It is up to the application to increment the radius for each call to <I>explosion()</I>. For <I>explosion()</I> calls in action lists, this means you will need to recreate the action list each time step. You can set up a standing wave by not incrementing the radius.  <br>
Parameters:  <br>
<I>center</I> - center point of shock wave 	 <br>
<I>radius</I> -	current radius of wave peak 	 <br>
<I>magnitude</I> -	scales the acceleration applied to particles 	 <br>
<I>sigma</I> -	standard deviation of the gaussian; the sharpness or broadness of the strength of the wave. 	 <br>
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>follow(</b><I>number</I> <B>magnitude</B>, <I>number</I> <B>maxRadius</B><b>)</b></com>
    <p><descr>
Accelerate toward the next particle in the list. <br>
This allows snaky effects where the particles follow each other. Each particle is accelerated toward the next particle in the group. The <I>follow()</I> action does not affect the last particle in the group. This allows controlled effects where the last particle in the group is killed after each time step and replaced by a new particle at a slightly different position. See <I>killOld()</I> to learn how to kill the last particle in the group after each step. <br>
Parameters: <br>
<I>magnitude</I> -	scales each particle's acceleration 	<br>
<I>maxRadius</I> -	defines the sphere of influence of this action. No particle further than max_radius from its predecessor is affected. 	
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>gravitate(</b><I>number</I> <B>magnitude</B>, <I>number</I> <B>maxRadius</B><b>)</b></com>
    <p><descr>
Accelerate each particle toward each other particle. <br>
Each particle is accelerated toward each other particle. This action is more computationally intensive than the others are because each particle is affected by each other particle. <br>
Parameters: <br>
<I>magnitude</I> -	scales each particle's acceleration 	<br>
<I>maxRadius</I> -	defines the sphere of influence of this action. No particle further than max_radius from another particle is affected. 	
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>gravity(</b><I>number</I> <B>vx</B>, <I>number</I> <B>vy</B>, <I>number</I> <B>vz</B><b>)</b></com>
    <p><descr>
Accelerate particles in the given direction. <br>
The gravity acceleration vector is simply added to the velocity vector of each particle at each time step. The magnitude of the gravity vector is the acceleration due to gravity. 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>jet(</b><I>ParticleDomain</I> <B>dom</B>, <I>ParticleDomain</I> <B>acc</B><b>)</b></com>
    <p><descr>
For particles in the domain of influence, accelerate them with a domain. acceleration vector comes from this domain. <br>
For each particle within the jet's domain of influence, <I>dom</I>, <I>jet()</I> chooses an acceleration vector from the domain <I>acc</I> and applies it to the particle's velocity. <br>
Parameters: <br>
<I>dom</I> -	apply jet to particles in this domain 	
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>killOld(</b><I>number</I> <B>age</B>, <I>boolean</I> <B>killLessThan</B> = false<b>)</b></com>
    <p><descr>
Get rid of older particles. <br>
Removes all particles older than <I>age</I>. But if <I>killLessThan</I> is true, it instead removes all particles newer than <I>age</I>. <I>age</I> is not clamped, so negative values are ok. This can be used in conjunction with <I>setAge(-n)</I> to create and then kill a particular set of particles. 
In order to kill a particular particle, set <I>setAge()</I> to a number that will never be a typical age for any other particle in the group, for example -1.0. Then emit the particle using <I>source()</I> or <I>vertex()</I>. Then do the rest of the particle actions and finally call <I>killOld(-0.9, true)</I> to kill the special particle because it is the only one with an age less than -0.9. <br>
Parameters: <br>
<I>killLessThan</I> -	true to kill particles younger than <I>age</I>
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>matchVelocity(</b><I>number</I> <B>magnitude</B>, <I>number</I> <B>maxRadius</B><b>)</b></com>
    <p><descr>
Modify each particles velocity to be similar to that of its neighbors. <br>
Each particle is accelerated toward the weighted mean of the velocities of the other particles in the group. <br>
Parameters: <br>
<I>magnitude</I> -	scales each particle's acceleration 	<br>
<I>maxRadius </I> -	defines the sphere of influence of this action. No particle further than maxRadius from another particle is affected. 	
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>matchRotVelocity(</b><I>number</I> <B>magnitude</B>, <I>number</I> <B>maxRadius</B><b>)</b></com>
    <p><descr>
Modify each particles rotational velocity to be similar to that of its neighbors. <br>
Each particle is accelerated toward the weighted mean of the rotational velocities of the other particles in the group. <br>
Parameters: <br>
<I>magnitude</I> -	scales each particle's acceleration 	<br>
<I>maxRadius</I> -	defines the sphere of influence of this action. No particle further than max_radius from another particle is affected. 	
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>move(</b><I>boolean</I> <B>moveVelocity</B> = true, <I>boolean</I> <B>moveRotVelocity</B> = false<b>)</b></com>
    <p><descr>
Apply the particles' velocities to their positions, and age the particles. <br>
This action actually updates the particle positions by adding the current velocity to the current position and the current rotational velocity to the current up vector. This is typically the last particle action performed in an iteration of a particle simulation, and typically only occurs once per iteration. <br>
The velocity is multiplied by the time step length, <I>dt</I>, before being added to the position. This implements Euler's method of numerical integration with a constant but specifiable step size. See <I>setTimeStep()</I> for more on varying the time step size. <br>
Parameters: <br>
<I>moveVelocity</I> -	apply velocity to position. 	<br>
<I>moveRotationalVelocity</I> -	apply rotational velocity to Up vector. This is an optimization. 	
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>orbitPoint(</b><I>number</I> <B>cx</B>, <I>number</I> <B>cy</B>, <I>number</I> <B>cz</B>, <I>number</I> <B>magnitude</B>, <I>number</I> <B>maxRadius</B><b>)</b></com>
    <p><descr>
Accelerate particles toward the given center point. <br>
For each particle, this action computes the vector to the center point, and accelerates the particle in the vector direction. <br>
Parameters: <br>
<I>center</I> -	accelerate toward this point 	<br>
<I>magnitude</I> -	scales each particle's acceleration 	<br>
<I>maxRadius</I> -	defines the sphere of influence of this action. No particle further than maxRadius from the center is affected. 	
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>randomAccel(</b><I>ParticleDomain</I> <B>dom</B><b>)</b></com>
    <p><descr>
Accelerate particles in random directions. <br>
For each particle, chooses an acceleration vector from the specified domain and adds it to the particle's velocity. Reducing the time step, <I>dt</I>, will make a higher probability of being near the original velocity after unit time. Smaller <i>dt</i> approach a normal distribution of velocity vectors instead of a square wave distribution. 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>randomDisplace(</b><I>ParticleDomain</I> <B>dom</B><b>)</b></com>
    <p><descr>
Immediately displace position by a random amount. <br>
Chooses a displacement vector from the specified domain and adds it to the particle's position. Reducing the time step, <I>dt</I>, will make a higher probability of being near the original position after unit time. Smaller <I>dt</I> approach a normal distribution of particle positions instead of a square wave distribution. Since this action changes particle positions, rather than changing their velocities and depending on the <I>move()</I> action to change the positions, unsatisfying results may occur when used with the <I>avoid()</I> or <I>bounce()</I> actions. In particular, particles may be displaced to the opposite side of the surface without bouncing off it. 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>randomVelocity(</b><I>ParticleDomain</I> <B>dom</B><b>)</b></com>
    <p><descr>
Replace particle velocity with a random velocity. <br>
For each particle, sets the particle's velocity vector to a random vector in the specified domain. This function is not affected by <I>dt</I>. 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>randomRotVelocity(</b><I>ParticleDomain</I> <B>dom</B><b>)</b></com>
    <p><descr>
Immediately assign a random rotational velocity. <br>
For each particle, sets the particle's rotational velocity vector to a random vector in the specified domain. This function is not affected by <I>dt</I>. 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>restore(</b><I>number</I> <B>time</B>, <I>boolean</I> <B>vel</B> = true, <I>boolean</I> <B>rVel</B> = false<b>)</b></com>
    <p><descr>
Over time, restore particles to their target <I>positionB</I> and <I>upB</I>. <br>
If <I>vel</I> is true, computes a new velocity for each particle that will make the particle arrive at its <I>positionB</I> at the specified amount of time in the future. If <I>rVel</I> is true, computes a new rotational velocity that moves up toward <I>upB</I>. The curved path that the particles take is a parametric quadratic. Once the specified amount of time has passed, <I>restore()</I> instead sets <I>position</I> and <I>Up</I> to equal <I>positionB</I> and <I>upB</I> and sets velocity and rotational velocity to 0 to freeze them in place. It is the application's responsibility to decrease <I>timeLeft</I> by <I>dt</I> on each call. When in an action list, this means you need to recreate the action list each time step. The <I>positionB</I> attribute of each particle is typically the particle's position when it was created, or it can be specified within a domain. This is controlled by <I>vertexBTracks()</I>, and <I>vertexB()</I>. The <I>positionB</I> can be set at any time to the particle's current position using the <I>copyVertexB()</I> action. <I>restore(0)</I> is the opposite of <I>copyVertexB()</I>; it sets each particle's <I>position</I> to be equal to its <I>positionB</I>. However, this has the side effect of setting each particle's velocity to 0. <br>
Parameters: <br>
<I>time</I> -	how long more until particles should arrive at target position and orientation 	<br>
<I>vel</I> -	restore positions 	<br>
<I>rVel</I> -	restore up vectors 	
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>sink(</b><I>boolean</I> <B>inside</B>, <I>ParticleDomain</I> <B>dom</B><b>)</b></com>
    <p><descr>
Kill particles that have positions on wrong side of the specified domain. <br>
If <I>inside</I> is true, deletes all particles inside the given domain. If <I>inside</I> is false, deletes all particles outside the given domain. <br>
Parameters: <br>
<I>inside</I> -	true to kill particles inside the domain 	
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>sinkVelocity(</b><I>boolean</I> <B>inside</B>, <I>ParticleDomain</I> <B>dom</B><b>)</b></com>
    <p><descr>
Kill particles that have velocities on wrong side of the specified domain. <br>
If <I>inside</I> is true, deletes all particles whose velocity vectors are inside the given domain. If <I>inside</I> is false, deletes all particles whose velocity vectors are outside the given domain. This allows particles to die when they turn around, get too fast or too slow, etc. For example, use a sphere domain centered at the origin with a radius equal to the minimum velocity to kill particles that are too slow. <br>
Parameters: <br>
<I>inside</I> -	true to kill particles with velocities inside the domain 	
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>sort(</b><I>number</I> <B>ex</B>, <I>number</I> <B>ey</B>, <I>number</I> <B>ez</B>, <I>number</I> <B>lx</B>, <I>number</I> <B>ly</B>, <I>number</I> <B>lz</B>, <I>boolean</I> <B>frontToBack</B>, <I>boolean</I> <B>clampNegative</B><b>)</b></com>
    <p><descr>
Sort the particles by their projection onto the look vector. <br>
Many rendering systems require rendering transparent particles in back-to-front order. The ordering is defined by the eye point and the look vector. These are the same vectors you pass into gluLookAt(), for example. The vector from the eye point to each particle's position is computed, then projected onto the look vector. Particles are sorted back-to-front by the result of this dot product. <br>
Parameters: <br>
<I>front_to_back</I> -	true to sort in front-to-back order instead of back-to-front 	<br>
<I>clamp_negative</I> -	true to set negative dot product values to zero before sorting. This speeds up sorting time. Particles behind the viewer won't be visible so their relative order doesn't matter. 	
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>source(</b><I>number</I> <B>particleRate</B>, <I>ParicleDomain</I> <B>dom</B><b>)</b></com>
    <p><descr>
Add particles with positions in the specified domain. <br>
Adds new particles to the current particle group. The particle positions are chosen from the given domain. All the other particle attributes such as color and velocity are chosen according to their current domains. When the Source action is called within an action list, the particle attribute domains used are those that were current when the Source command was called within the <I>newActionList()</I> / <I>endActionList()</I> block instead of when <I>callActionList()</I> was called. Note that this is unlike OpenGL. If <I>particleRate / dt</I> is not an integer then <I>source()</I> adjusts the number of particles to add during this time step so that the average number added per unit time is <I>particleRate</I>. If too few particles seem to be added each frame, it is probably because the particle group is already full. If this is bad, you can grow the group using <I>setMaxParticles()</I>. <br>
Parameters: <br>
<I>particleRate</I> -	how many particles to add per unit time 	<br>
<I>dom</I> -	particle positions are chosen from this domain 	
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>speedLimit(</b><I>number</I> <B>minSpeed</B>, <I>number</I> <B>maxSpeed</B><b>)</b></com>
    <p><descr>
Clamp particle velocities to the given range. <br>
Computes each particles speed (the magnitude of its velocity vector) and if it is less than <I>minSpeed</I> or greater than <I>maxSpeed</I> the velocity is scaled to within those bounds, while preserving the velocity vectors direction. The vector [0,0,0] is an exception because it has no direction. Such vectors are not modified by <I>speedLimit()</I>. 
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>targetColor(</b><I>number</I> <B>r</B>, <I>number</I> <B>g</B>, <I>number</I> <B>b</B>, <I>number</I> <B>a</B>, <I>number</I> <B>scale</B><b>)</b></com>
    <p><descr>
Change color of all particles toward the specified color. <br>
Modifies the color and alpha of each particle to be scale percent of the way closer to the specified color and alpha. <I>scale</I> is multiplied by <I>dt</I> before scaling the sizes. Thus, using smaller <I>dt</I> causes a slightly faster approach to the target color. <br>
This action makes all colors tend toward the specified, uniform color. The value of <I>scale</I> will usually be very small (less than 0.01) to yield a gradual transition. <br>
Parameters: <br>
<I>scale</I> -	what percent of the way from the current color to the target color to transition in unit time 	
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>targetSize(</b><I>number</I> <B>sizeX</B>, <I>number</I> <B>sizeY</B>, <I>number</I> <B>sizeZ</B>, <I>number</I> <B>scaleX</B>, <I>number</I> <B>scaleY</B>, <I>number</I> <B>scaleZ</B><b>)</b></com>
    <p><descr>
Change sizes of all particles toward the specified size. <br>
Modifies the size of each particle to be scale percent of the way closer to the specified size triple. This makes sizes grow asymptotically closer to the given size. <I>scale</I> is multiplied by <I>dt</I> before scaling the sizes. Thus, using smaller <I>dt</I> causes a slightly faster approach to the target size. The separate scales for each component allow only selected components to be scaled. <br>
This action makes all sizes tend toward the specified, uniform size. The value of scale will usually be very small (less than 0.01) to yield a gradual transition. <br>
Parameters: <br>
<I>size</I> -	target size <br>	
<I>scale</I> -	what percent of the way from the current size to the target size to transition in unit time 	
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>targetVelocity(</b><I>number</I> <B>vx</B>, <I>number</I> <B>vy</B>, <I>number</I> <B>vz</B>, <I>number</I> <B>scale</B><b>)</b></com>
    <p><descr>
Change velocity of all particles toward the specified velocity. <br>
Modifies the velocity of each particle to be scale percent of the way closer to the specified velocity. This makes velocities grow asymptotically closer to the given velocity. <I>scale</I> is multiplied by <I>dt</I> before scaling the velocities. Thus, using smaller <I>dt</I> causes a slightly faster approach to the target velocity. <br>
This action makes all velocities tend toward the specified, uniform velocity. The value of scale will usually be very small (less than 0.01) to yield a gradual transition. <br>
Parameters: <br>
<I>v</I> -	target velocity 	<br>
<I>scale</I> -	what percent of the way from the current velocity to the target velocity to transition in unit time 	
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>targetRotVelocity(</b><I>number</I> <B>vx</B>, <I>number</I> <B>vy</B>, <I>number</I> <B>vz</B>, <I>number</I> <B>scale</B><b>)</b></com>
    <p><descr>
Change rotational velocity of all particles toward the specified rotational velocity. <br>
Modifies the rotational velocity of each particle to be scale percent of the way closer to the specified rotational velocity. This makes rotational velocities grow asymptotically closer to the given rotational velocity. <I>scale</I> is multiplied by <I>dt</I> before scaling the velocities. Thus, using smaller <I>dt</I> causes a slightly faster approach to the target rotational velocity. <br>
This action makes all rotational velocities tend toward the specified, uniform rotational velocity. The value of scale will usually be very small (less than 0.01) to yield a gradual transition. <br>
Parameters: <br>
<I>v</I> -	rotational velocity 	<br>
<I>scale</I> -	what percent of the way from the current rotational velocity to the target rotational velocity to transition in unit time 	
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>vertex(</b><I>number</I> <B>vx</B>, <I>number</I> <B>vy</B>, <I>number</I> <B>vz</B><b>)</b></com>
    <p><descr>
Add a single particle at the specified location. <br>
This action mostly is a shorthand for <I>source(1, ParticlePoint(x, y, z))</I> but allows different callback data per particle. <br>
When called in immediate mode, this action uses a slightly faster method to add a single particle to the current particle group. Also when in immediate mode, exactly one particle will be added per call, instead of an average of <I>1 / dt</I> particles being added. Particle attributes are chosen according to their current domains, as with <I>source()</I>. <br>
This call is patterned after the glVertex() calls. It is useful for creating a particle group with exactly specified initial positions. For example, you can specify a geometrical model using <I>vertex()</I> calls, and then explode or deform it. <br>
Parameters: <br>
<I>v</I> -	position of particle to create 	
</descr></p>
  <li><com><i>ParticleSystem</i>:<b>vortex(</b>
<I>number</I> <B>cx</B>, <I>number</I> <B>cy</B>, <I>number</I> <B>cz</B>,
<I>number</I> <B>ax</B>, <I>number</I> <B>ay</B>, <I>number</I> <B>az</B>,
<I>number</I> <B>tightnessExponent</B>,
<I>number</I> <B>maxRadius</B>,
<I>number</I> <B>inSpeed</B>,
<I>number</I> <B>upSpeed</B>,
<I>number</I> <B>aroundSpeed</B><b>)</b></com>
    <p><descr>
Accelerate particles in a vortex-like way. <br>
The vortex is a complicated action to use, but when done correctly it makes particles fly around like in a tornado. <br>
Parameters: <br>
<I>c</I> -	tip of the vortex 	<br>
<I>a</I> -	the ray along the center of the vortex 	<br>
<I>tightnessExponent</I> -	like a Phong exponent that gives a curve to the vortex silhouette; 1.0 is a cone; greater than 1.0 curves inward. 	<br>
<I>maxRadius</I> -	defines the radius at the top of the vortex and the infinite cylinder of influence. No particle further than max_radius from the axis is affected.<br>
<I>inSpeed</I> -	inward acceleration of particles OUTSIDE the vortex 	<br>
<I>upSpeed</I> -	vertical acceleration of particles INSIDE the vortex. Can be negative to apply gravity. 	<br>
<I>aroundSpeed</I> 	acceleration around vortex of particles INSIDE the vortex. 	
</descr></p>
</ul>

</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="particledomain">3.6.2.13.2 ParticleDomain</a></h5>
The <b><class>ParticleDomain</class></b> class represents ranges of values used to specify several arguments and useful to control <I>ParticleGroup</I>s. (<I>The descriptions here are taken from the official "<i>Particle 2.1</i>" library documentation</I>)
<ul>
  <li><com><i>ParticleDomain</i>:<b>delete(</b><b>)</b></com>
    <p><descr>deletes this particle domain.</descr>
    </p>
  <li><com><I>ParticleDomain</I> <b>ParticleBlob(</b><I>number</I> <B>cx</B>, <I>number</I> <B>cy</B>, <I>number</I> <B>cz</B>, <I>number</I> <B>stdDev</B><b>)</b></com>
    <p><descr>creates a gaussian blob domain.
The point <I>C</I> is the center of a normal probability density of standard deviation <I>stdDev</I>. The density is radially symmetrical. The blob domain allows for some very natural-looking effects because there is no sharp, artificial-looking boundary at the edge of the domain. 
</descr>
    </p>
  <li><com><I>ParticleDomain</I> <b>ParticleBox(</b><I>number</I> <B>ax</B>, <I>number</I> <B>ay</B>, <I>number</I> <B>az</B>, <I>number</I> <B>bx</B>, <I>number</I> <B>by</B>, <I>number</I> <B>bz</B><b>)</b></com>
    <p><descr>creates a axis aligned box domain.
<I>A</I> and <I>B</I> are opposite corners of an axis-aligned box. It doesn't matter which of each coordinate is min and which is max. 
It is only possible to bounce particles off the outside of the box, not the inside. Likewise, particles can only <I>Avoid</I> the box from the outside. To use the <I>Avoid</I> action inside a box, define the box as six planes. 
</descr>
    </p>
  <li><com><I>ParticleDomain</I> <b>ParticleCone(</b><I>number</I> <B>ax</B>, <I>number</I> <B>ay</B>, <I>number</I> <B>az</B>, <I>number</I> <B>bx</B>, <I>number</I> <B>by</B>, <I>number</I> <B>bz</B>, <I>number</I> <B>outerRadius</B>, <I>number</I> <B>innerRadius</B> = 0<b>)</b></com>
    <p><descr>creates a cone domain.
<I>A</I> and <I>B</I> are respectively the apex of the cone and the other endpoint of the axis of the cone. <I>OuterRadius</I> is the radius of the base of the cone. <I>InnerRadius</I> is the radius of the base of a cone to subtract from the first cone to create a conical shell. This is similar to the cylindrical shell, which can be thought of as a large cylinder with a smaller cylinder subtracted from the middle. Both cones share the same apex and axis, which implies that the thickness of the conical shell tapers to 0 at the apex. <I>InnerRadius</I> = 0 for a solid cone with no empty space in the middle.
</descr>
    </p>
  <li><com><I>ParticleDomain</I> <b>ParticleCylinder(</b><I>number</I> <B>ax</B>, <I>number</I> <B>ay</B>, <I>number</I> <B>az</B>, <I>number</I> <B>bx</B>, <I>number</I> <B>by</B>, <I>number</I> <B>bz</B>, <I>number</I> <B>outerRadius</B>, <I>number</I> <B>innerRadius</B> = 0<b>)</b></com>
    <p><descr>creates a cylinder domain.
<I>A</I> and <I>B</I> are respectively are the endpoints of the axis of the cylinder. <I>OuterRadius</I> is the outer radius, and <I>InnerRadius</I> is the inner radius for a cylindrical shell. <I>InnerRadius</I> = 0 for a solid cylinder with no empty space in the middle.
</descr>
    </p>
  <li><com><I>ParticleDomain</I> <b>ParticleDisc(</b><I>number</I> <B>cx</B>, <I>number</I> <B>cy</B>, <I>number</I> <B>cz</B>, <I>number</I> <B>nx</B>, <I>number</I> <B>ny</B>, <I>number</I> <B>nz</B>, <I>number</I> <B>outerRadius</B>, <I>number</I> <B>innerRadius</B> = 0<b>)</b></com>
    <p><descr>creates a disc domain.
The point <I>C</I> is the center of a disc in the plane with normal <I>N</I>. The disc has an <I>OuterRadius</I>. If <I>InnerRadius</I> is greater than 0, it the domain is a flat washer, rather than a disk. The normal will get normalized, so it need not already be unit length.
</descr>
    </p>
  <li><com><I>ParticleDomain</I> <b>ParticleLine(</b><I>number</I> <B>ax</B>, <I>number</I> <B>ay</B>, <I>number</I> <B>az</B>, <I>number</I> <B>bx</B>, <I>number</I> <B>by</B>, <I>number</I> <B>bz</B><b>)</b></com>
    <p><descr>creates a line domain.
<I>A</I> and <I>B</I> are the endpoints of the segment.
</descr>
    </p>
  <li><com><I>ParticleDomain</I> <b>ParticlePlane(</b><I>number</I> <B>ax</B>, <I>number</I> <B>ay</B>, <I>number</I> <B>az</B>, <I>number</I> <B>nx</B>, <I>number</I> <B>ny</B>, <I>number</I> <B>nz</B><b>)</b></com>
    <p><descr>creates a plane domain.
<I>A</I> and <I>N</I> are one point of the plane and the normal vector.
</descr>
    </p>
  <li><com><I>ParticleDomain</I> <b>ParticlePoint(</b><I>number</I> <B>ax</B>, <I>number</I> <B>ay</B>, <I>number</I> <B>az</B><b>)</b></com>
    <p><descr>creates a point domain.
A single point.
.</descr>
    </p>
  <li><com><I>ParticleDomain</I> <b>ParticleRectangle(</b><I>number</I> <B>ax</B>, <I>number</I> <B>ay</B>, <I>number</I> <B>az</B>, <I>number</I> <B>ux</B>, <I>number</I> <B>uy</B>, <I>number</I> <B>uz</B>, <I>number</I> <B>vx</B>, <I>number</I> <B>vy</B>, <I>number</I> <B>vz</B><b>)</b></com>
    <p><descr>creates a rhombus-shape domain.
<I>A</I> is a point on the plane. <I>U</I> and <I>V</I> are (non-parallel) basis vectors in the plane. They don't need to be normal or orthogonal.</descr>
    </p>
  <li><com><I>ParticleDomain</I> <b>ParticleSphere(</b><I>number</I> <B>cx</B>, <I>number</I> <B>cy</B>, <I>number</I> <B>cz</B>, <I>number</I> <B>outerRadius</B>, <I>number</I> <B>innerRadius</B> = 0<b>)</b></com>
    <p><descr>creates a sphere domain.
<I>C</I> is the center of the sphere. <I>OuterRadius</I> is the outer radius of the spherical shell and <I>InnerRadius</I> is the inner radius.
</descr>
    </p>
  <li><com><I>ParticleDomain</I> <b>ParticleTriangle(</b><I>number</I> <B>ax</B>, <I>number</I> <B>ay</B>, <I>number</I> <B>az</B>, <I>number</I> <B>bx</B>, <I>number</I> <B>by</B>, <I>number</I> <B>bz</B>, <I>number</I> <B>cx</B>, <I>number</I> <B>cy</B>, <I>number</I> <B>cz</B><b>)</b></com>
    <p><descr>creates a triangle domain.
<I>A</I>, <I>B</I> and <I>C</I> are the vertices of the triangle. The triangle can be used to define an arbitrary geometrical model for particles to bounce off, or generate particles on its surface (and explode them), etc.
</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="spark">3.6.2.14 Spark</a></h5>
The <b><class>Spark</class></b> class extends <b><parent>Object</parent></b>
and inherits all its methods. It is used to render a spark.
<ul>
  <li><com><i>Spark</i> <b>Spark(</b><i>number</i> <b>x</b> = 0, <i>number</i> <b>y</b> = 0, <i>number</i> <b>z</b> = 0<b>)</b></com>
    <p><descr>creates a spark from the position of this object to the target point. The default values for its parameters are described below.</descr>
    </p>
  <li><com><i>Spark</i>:<b>setTarget(</b><i>number</i> <b>x</b>, <i>number</i> <b>y</b>, <i>number</i> <b>z</b><b>)</b></com>
    <p><descr>sets the target point.</descr>
    </p>
  <li><com><i>Spark</i>:<b>setUpdateTime(</b><i>number</i> <b>time</b><b>)</b></com>
    <p><descr>sets the time interval after which the spark shape is updated. The default value is <I>0.04</I>.</descr>
    </p>
  <li><com><i>Spark</i>:<b>setSparksCount(</b><i>number</i> <b>count</b><b>)</b></com>
    <p><descr>sets the number of sub-sparks that this spark is made of. The default value is <I>16</I>.</descr>
    </p>
  <li><com><i>Spark</i>:<b>setSparksOffset(</b><i>number</i> <b>offset</b><b>)</b></com>
    <p><descr>sets the maximum displacement of each sub-spark in this spark. The default value is <I>0.04</I>.</descr>
    </p>
  <li><com><i>Spark</i>:<b>setSegmentsCount(</b><i>number</i> <b>count</b><b>)</b></com>
    <p><descr>sets the number of segments that this spark is made of. The default value is <I>32</I>.</descr>
    </p>
  <li><com><i>Spark</i>:<b>setSegmentsOffset(</b><i>number</i> <b>max</b>, <i>number</i> <b>random</b>, <i>number</i> <b>adjust</b><b>)</b></com>
    <p><descr>sets the displacement of segment in this spark. The arguments are: <I>max</I>, the maximum displacement, <I>random</I>, the maximum random step of the displacement at each update time, <I>adjust</I>, the discretization of the displacement of adjacent segments. The default values are respectively <I>0.5</I>, <I>0.1</I>, <I>0.075</I>.</descr>
    </p>
  <li><com><i>Spark</i>:<b>setColor(</b><i>number</i> <b>r</b>, <i>number</i> <b>g</b>, <i>number</i> <b>b</b><b>)</b></com>
    <p><descr>sets the color. The default value is (<I>0.4</I>,<I>0.3</I>,<I>0.8</I>)</descr>
    </p>
  <li><com><i>Spark</i>:<b>setWidth(</b><i>number</i> <b>width</b><b>)</b></com>
    <p><descr>sets the width of the spark "ribbon". The default value is <I>0.02</I>.</descr>
    </p>
  <li><i><com>Spark</i>:<b>computeMaxRadius()</com></b>
    <p><descr>computes the max radius according to the specified target.</descr>
    </p></ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="overlayObject">
<h4>3.6.3 OverlayObject</h4>
</a>The <b><class>OverlayObject</class></b> extends <b><parent>Void</parent></b> and is the base
class of all the objects that must be rendered and moved through the overlay
layer. That layer is a 2D overlay rendered on the 3D scene.
<ul>
  <li><i><com>OvelayObject</i>:<b>show()</com></b>
    <p><descr>makes this object visible.</descr>
    <p>&nbsp;
  <li><i><com>OvelayObject</i>:<b>hide()</com></b>
    <p><descr>makes this object invisible.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>OvelayObject</i>:<b>isVisible()</com></b>
    <p><descr>returns true if the object is visible.</descr>
    <p>&nbsp;
  <li><i><com>OvelayObject</i>:<b>setLayer(</b><i>number</i> <b>layer)</com></b>
    <p><descr>sets the layer level of this object. Only the objects with values
    greater or equal to -1 are rendered. Objects with <i>layer</i> equal to -1
    are in front of all the objects with greater <i>layer</i> values. The GUI is
    placed at layer zero, so negative or null values are in front of it, while
    positive values behind.</descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="overlayFader">3.6.3.0 OverlayFader</a></h5>
The <b><class>OverlayFader</class></b> class extends <b><parent>OverlayObject</parent></b>
and inherits all its methods. It is a rectangle that completely covers the
screen and may be used for fading effects changing its color.
<ul>
  <li><i><com>OverlayFader</i> <b>OverlayFader(</b><i>number</i> <b>red </b>= 0<b>,
    </b><i>number</i> <b>green</b> = 0<b>, </b><i>number</i> <b>blue</b> = 0<b>,
    </b><i>number</i> <b>alpha</b> = 1<b>)</com></b>
    <p><descr>creates an overlay fader, given the optional arguments <i>red</i>,
    <i>green</i>, <i>blue</i> and <i>alpha</i> (color components range from 0 to
    1). A value of 1 for <i>alpha</i> means that the fader is opaque.</descr>
    </p>
  <li><i><com>OverlayFader</i>:<b>setColor(</b><i>number</i> <b>red, </b><i>number</i>
    <b>green, </b><i>number</i> <b>blue, </b><i>number</i> <b>alpha)</com></b>
    <p><descr>changes the color of the fader (color components range from 0 to
    1). A value of 1 for <i>alpha</i> means that the fader is opaque.</descr>
    </p>
  <li><i><com>number</i> r, <i>number</i> g, <i>number</i> b, <i>number</i> a = <i>OverlayFader</i>:<b>getColor()</com></b>
    <p><descr>returns the color of the fader (color components range from 0 to
    1). A value of 1 for <i>alpha</i> means that the fader is opaque.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="overlayTexts">
<h5>3.6.3.1 OverlayTexts</h5>
</a>The <b><class>OverlayTexts</class></b> class extends <b><parent>OverlayObject</parent></b>
and inherits all its methods. It is an overlay object that displays several
texts.
<ul>
  <li><i><com>OverlayTexts</i> <b>OverlayTexts(</b><i>Font</i> <b>font)</com></b>
    <p><descr>creates an overlay object, that contains texts, given the
    specified <i>font</i> object.</descr>
    </p>
  <li><i><com>OverlayTexts</i>:<b>setLocation(</b><i>number</i> <b>x,</b> <i>number</i>
    <b>y)</com></b>
    <p><descr>moves the texts from the current position to the point of
    coordinates <i>(x,y)</i>.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y = <i>OverlayTexts</i>:<b>getLocation()</com></b>
    <p><descr>returns the coordinates of the current position of the texts.</descr>
    </p>
  <li><i><com>OverlayTexts</i>:<b>setRotation(</b><i>number</i> <b>angleOfRotation)</com></b>
    <p><descr>sets the rotation angle of this object (in radians).</descr>
    <p>&nbsp;
  <li><i><com>number</i> angleOfRotation = <i>OverlayTexts</i>:<b>getRotation()</com></b>
    <p><descr>returns the rotation angle of this object (in radians).</descr>
    </p>
  <li><i><com>OverlayText</i> text = <i>OverlayTexts</i>:<b>getTextAt(</b><i>number</i>
    <b>x,</b> <i>number</i> <b>y)</com></b>
    <p><descr>returns the text, included in this container, that is written at
    the given coordinates.</descr>
    </p>
  <li><i><com>OverlayText</i> text = <i>OverlayTexts</i>:<b>getText(</b><i>number</i>
    <b>index)</com></b>
    <p><descr>returns the text, included in this container, with the given
    index.</descr>
    </p>
  <li><i><com>OverlayTexts</i>:<b>add(</b><i>OverlayText</i> text<b>)</com></b>
    <p><descr>adds a text to this collection of text.</descr>
    </p>
  <li><i><com>OverlayTexts</i>:<b>remove(</b><i>OverlayText</i> text<b>)</com></b>
    <p><descr>removes a text from this collection of text.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>OverlayTexts</i>:<b>getCount()</com></b>
    <p><descr>returns the number of the texts included in this collection.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="overlayText">3.6.3.1.1 OverlayText</a></h5>
The <b><class>OverlayText</class></b> class extends <b><parent>Void</parent></b>
and represents a single text object that must be added to an <b>OverlayTexts</b>
container. It is shown on the screen only when its container is added to the <b>Overlay</b>.
<ul>
  <li><i><com>OverlayText</i> <b>OverlayText(</b><i>string</i><b> text)</com></b>
    <p><descr>creates an overlay text, given the specified <i>text</i> string.</descr>
    </p>
  <li><i><com>OverlayText</i>:<b>show()</com></b>
    <p><descr>makes this text visible.</descr>
    <p>&nbsp;
  <li><i><com>OverlayText</i>:<b>hide()</com></b>
    <p><descr>makes this text invisible.</descr>
    <p>&nbsp;
  <li><i><com>OverlayText</i>:<b>setAlignmentLeft()</com></b>
    <p><descr>aligns the text to the left.</descr>
    <p>&nbsp;
  <li><i><com>OverlayText</i>:<b>setAlignmentCenter()</com></b>
    <p><descr>aligns the text to the center.</descr>
    <p>&nbsp;
  <li><i><com>OverlayText</i>:<b>setAlignmentRight()</com></b>
    <p><descr>aligns the text to the right.</descr>
    <p>&nbsp;
  <li><i><com>OverlayText</i>:<b>setScale(</b><i>number</i> <b>scale)</com></b>
    <p><descr>changes the scale of the text according to the <i>scale</i>
    argument, for example the value <i>2</i> doubles the default height of the
    font.</descr>
    </p>
  <li><i><com>OverlayText</i>:<b>setColor(</b><i>number</i> <b>red, </b><i>number</i>
    <b>green, </b><i>number</i> <b>blue, </b><i>number</i> <b>alpha</b> = 1<b>)</com></b>
    <p><descr>changes the color of the text (color components range from 0 to
    1). A value of 1 for <i>alpha</i> means no transparency.</descr>
    </p>
  <li><i><com>OverlayText</i>:<b>setLocation(</b><i>number</i> <b>x,</b> <i>number</i>
    <b>y)</com></b>
    <p><descr>moves the text from the current position to the point of
    coordinates <i>(x,y)</i> relative the position of the container.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y = <i>OverlayText</i>:<b>getLocation()</com></b>
    <p><descr>returns the coordinates of the current position of the text
    relative to the position of the container.</descr>
    </p>
  <li><i><com>OverlayText</i>:<b>setRotation(</b><i>number</i> <b>angleOfRotation)</com></b>
    <p><descr>sets the rotation angle of this object (in radians).</descr>
    <p>&nbsp;
  <li><i><com>number</i> angleOfRotation = <i>OverlayText</i>:<b>getRotation()</com></b>
    <p><descr>returns the rotation angle of this object (in radians).</descr>
    </p>
  <li><i><com>OverlayText</i>:<b>setText(</b><i>string</i> <b>text)</com></b>
    <p><descr>sets the string of the text.</descr></p>
  <li><i><com>string OverlayText</i>:<b>getText()</com></b>
    <p><descr>returns the string of the text.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="overlayTrueTypeTexts">
<h5>3.6.3.1.2 OverlayTrueTypeTexts</h5>
</a>The <b><class>OverlayTrueTypeTexts</class></b> class extends <b><parent>OverlayTexts</parent></b>
and inherits all its methods. It is an overlay object that displays several texts using a true type font.
<ul>
  <li><i><com>OverlayTrueTypeTexts</i> <b>OverlayTrueTypeTexts(</b><i>TrueTypeFont</i> <b>font)</com></b>
    <p><descr>creates an overlay object, that contains texts, given the
    specified <i>font</i> object.</descr>
    </p>
  <li><i><com>OverlayTrueTypeTexts</i>:<b>setTransparent(</b><i>boolean</i> <b>transp</b> = true<b>)</com></b>
    <p><descr>sets the transparency of these texts.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="overlayUnicodeTexts">
<h5>3.6.3.1.2.1 OverlayUnicodeTexts</h5>
</a>The <b><class>OverlayUnicodeTexts</class></b> class extends <b><parent>OverlayTexts</parent></b>
and inherits all its methods. It is an overlay object that displays several texts, even in unicode, using a true type font.
<ul>
  <li><i><com>OverlayUnicodeTexts</i> <b>OverlayUnicodeTexts(</b><i>UnicodeFont</i> <b>font)</com></b>
    <p><descr>creates an overlay object, that contains texts, given the
    specified <i>font</i> object.</descr>
    </p>
  <li><i><com>OverlayUnicodeTexts</i>:<b>setTransparent(</b><i>boolean</i> <b>transp</b> = true<b>)</com></b>
    <p><descr>sets the transparency of these texts.</descr>
    </p>
  <li><i><com>OverlayUnicodeTexts</i>:<b>add(</b><i>OverlayUnicodeText</i> text<b>)</com></b>
    <p><descr>adds a text to this collection of texts.</descr>
    </p>
  <li><i><com>OverlayUnicodeTexts</i>:<b>remove(</b><i>OverlayUnicodeText</i> text<b>)</com></b>
    <p><descr>removes a text from this collection of texts.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>OverlayUnicodeTexts</i>:<b>getCount()</com></b>
    <p><descr>returns the number of the texts included in this collection.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="overlayUnicodeText">3.6.3.1.2.2 OverlayUnicodeText</a></h5>
The <b><class>OverlayUnicodeText</class></b> class extends <b><parent>OverlayText</parent></b>
and represents a single text object that must be added to an <b>OverlayUnicodeTexts</b>
container. It is shown on the screen only when its container is added to the <b>Overlay</b>.
<ul>
  <li><i><com>OverlayUnicodeText</i> <b>OverlayUnicodeText(</b><i>string</i><b> text)</com></b>
    <p><descr>creates an unicode overlay text, given the specified (non-unicode) <i>text</i> string.</descr>
    </p>
  <li><i><com>OverlayUnicodeText</i>:<b>setUnicodeText(</b><i>string</i> <b>text)</com></b>
    <p><descr>sets the unicode string of the text.</descr></p>
  <li><i><com>string OverlayUnicodeText</i>:<b>getUnicodeText()</com></b>
    <p><descr>returns the unicode string of the text.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="font">
<h5>3.6.3.1.3 Font</h5>
</a>The <b><class>Font</class></b> class extends <b><parent>Void</parent></b>
and is used to define a font for overlay texts. Fonts may be of two kind:
Textured and bitmap. The first type uses a texture to render the characters,
while the latter uses a face outline (<i>not portable - it works only on Windows</i>).
<ul>
  <li><i><com>TexturedFont</i> <b>TexturedFont(</b><i>number</i> <b>height</b>, <i>number</i>
    <b>width</b>, <i>number</i> <b>spacing</b>, <i>Image</i> <b>image)</com></b>
    <p><descr>creates a textured font from the given image. The image must be a
    square with 16x16 characters (in ASCII order left-right, top-bottom).
    Moreover the image must be in grayscale format: white pixels are opaque,
    while black pixels are fully transparent (and gray shades are in between).
    The parameters <i>width</i> and <i>height</i> give the character dimensions
    in pixels, while <i>spacing</i> specifies the pixels from the beginning of a
    character to the other in the same word.</descr>
    <p>&nbsp;
  <li><i><com>BitmapFont</i> <b>BitmapFont(</b><br>
    &nbsp;&nbsp; <i>string</i> <b>faceName,</b> <i>number</i> <b>height,</b> <i>number</i>
    <b>width,</b><br>
&nbsp;&nbsp;&nbsp;<i>boolean</i> <b>bold</b> = false, <i>boolean</i> <b>italic</b>
    = false<b><br>
    )</com></b>
    <p><descr>creates a bitmap font with the given <i>faceName</i> (for example
    &quot;Arial&quot;), height and width. The optional arguments <i>bold</i> and
    <i>italic</i> specify if the font has bold or italic style: the value <b>false</b>
    means that the style is not bold or italic.</descr>
    <p>&nbsp;
  <li><i><com>number Font</i>:<b>getHeight()</com></b>
    <p><descr>returns the height of the font.</descr>
    <p>&nbsp;
  <li><i><com>number Font</i>:<b>getWidth()</com></b>
    <p><descr>returns the width of the font.</descr>
    <p>&nbsp;
  <li><i><com>string Font</i>:<b>getType()</com></b>
    <p><descr>returns the string "<I>Font</I>".</descr>
    <p>&nbsp;
  <li><i><com>Font</i>:<b>delete()</com></b>
    <p><descr>deletes a font from memory. Its reference could be still owned by
    other objects, but the use of this method is safe.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="overlaySprite">
<h5>3.6.3.2 OverlaySprite</h5>
</a>The <b><class>OverlaySprite</class></b> class extends <b><parent>OverlayObject</parent></b>
and inherits all its methods. It is an overlay object that displays an image.
<ul>
  <li><i><com>OverlaySprite</i> <b>OverlaySprite(<br>
&nbsp;&nbsp;&nbsp; </b><i>number</i> <b>width, </b><i>number</i> <b>height, </b><i>Texture</i>
    <b>texture, </b><i>boolean</i> <b>hasAlpha</b> = true<b><br>
    )</com></b>
    <p><descr>creates an overlay object, that displays an image, given the
    specified <i>width</i>, <i>height</i> and <i>texture</i>. The optional
    argument <i>hasAlpha</i> specifies if the texture has an alpha layer or not.</descr>
    </p>
  <li><i><com>OverlaySprite</i>:<b>setColor(</b><i>number</i> <b>red, </b><i>number</i>
    <b>green, </b><i>number</i> <b>blue, </b><i>number</i> <b>alpha</b> = 1<b>)</com></b>
    <p><descr>changes the color of the sprite (color components range from 0 to
    1). A value of 1 for <i>alpha</i> means no transparency.</descr>
    </p>
  <li><i><com>OverlaySprite</i>:<b>setLocation(</b><i>number</i> <b>x,</b> <i>number</i>
    <b>y)</com></b>
    <p><descr>moves the sprite from the current position to the point of
    coordinates <i>(x,y)</i>. The reference location is at the center of the
    sprite.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y = <i>OverlaySprite</i>:<b>getLocation()</com></b>
    <p><descr>returns the coordinates of the current position of the sprite.</descr>
    <p>&nbsp;
  <li><i><com>OverlaySprite</i>:<b>setRotation(</b><i>number</i> <b>angleOfRotation)</com></b>
    <p><descr>sets the rotation angle of this object (in radians).</descr>
    <p>&nbsp;
  <li><i><com>number</i> angleOfRotation = <i>OverlaySprite</i>:<b>getRotation()</com></b>
    <p><descr>returns the rotation angle of this object (in radians).</descr>
    </p>
  <li><i><com>OverlaySprite</i>:<b>setDimension(</b><i>number</i> <b>w,</b> <i>number</i>
    <b>h)</com></b>
    <p><descr>sets the size of the sprite given the width <i>w</i> and the
    height <i>h</i>.</descr>
    <p>&nbsp;
  <li><i><com>number</i> w, <i>number</i> h = <i>OverlaySprite</i>:<b>getDimension()</com></b>
    <p><descr>returns the size (width and height) of the sprite.</descr>
    </p>
  <li><i><com>OverlaySprite</i>:<b>setTextureCoord(</b><i>number</i> <b>left,</b>
    <i>number</i> <b>bottom, </b><i>number</i> <b>right, </b><i>number</i> <b>top)</com></b>
    <p><descr>sets the texture coordinates of the corners of the sprite.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="overlayGui">
<h5>3.6.3.2.0 OverlayGui</h5>
</a>The <b><class>OverlayGui</class></b> class extends <b><parent>OverlayObject</parent></b> and inherits all its methods. It defines several function useful to interact with a GUI, usually attached to an <I>OverlayViewport</I>.
<ul>
  <li><com><I>OverlayGui</I>:<b>initialize(</b><I>string</I> <B>fontFileName</B>, <I>number</I> <B>width</B>, <I>number</I> <B>height</B><b>)</b></com>
    <p><descr>initializes the GUI attached to this object. <I>FontFileName</I> is the file name of the true type font used by the GUI, while <I>width</I> and <I>height</I> are the dimensions of the viewport.</descr>
    </p>
  <li><com><I>OverlayGui</I>:<b>terminate(</b><b>)</b></com>
    <p><descr>deinitializes the GUI attached to this object.</descr>
    </p>
  <li><com><I>OverlayGui</I>:<b>activateGui(</b><b>)</b></com>
    <p><descr>this GUI becomes the active one and intercepts all the commands.</descr>
    </p>
  <li><com><I>OverlayGui</I>:<b>deactivateGui(</b><b>)</b></com>
    <p><descr>the main GUI becomes the active one and intercepts all the commands.</descr>
    </p>
  <li><com><I>OverlayGui</I>:<b>setKeyModifiers(</b><I>boolean</I> <B>shiftPressed</B>, <I>boolean</I> <B>ctrlPressed</B>, <I>boolean</I> <B>altPressed</B><b>)</b></com>
    <p><descr>specifies if the SHIFT, CTRL and ALT keys must be considered pressed or not.</descr>
    </p>
  <li><com><I>OverlayGui</I>:<b>applicationResized(</b><I>number</I> <B>width</B>, <I>number</I> <B>height</B><b>)</b></com>
    <p><descr>specifies that the GUI viewport was resized. Returns true if the event was processed.</descr>
    </p>
  <li><com><I>boolean</I> <I>OverlayGui</I>:<b>onLeftButtonDown(</b><I>number</I> <B>x</B>, <I>number</I> <B>y</B><b>)</b></com>
    <p><descr>specifies that the left mouse button was pressed. Returns true if the event was processed.</descr>
    </p>
  <li><com><I>boolean</I> <I>OverlayGui</I>:<b>onLeftButtonUp(</b><I>number</I> <B>x</B>, <I>number</I> <B>y</B><b>)</b></com>
    <p><descr>specifies that the left mouse button was released. Returns true if the event was processed.</descr>
    </p>
  <li><com><I>boolean</I> <I>OverlayGui</I>:<b>onMiddleButtonDown(</b><I>number</I> <B>x</B>, <I>number</I> <B>y</B><b>)</b></com>
    <p><descr>specifies that the middle mouse button was pressed. Returns true if the event was processed.</descr>
    </p>
  <li><com><I>boolean</I> <I>OverlayGui</I>:<b>onMiddleButtonUp(</b><I>number</I> <B>x</B>, <I>number</I> <B>y</B><b>)</b></com>
    <p><descr>specifies that the middle mouse button was released. Returns true if the event was processed.</descr>
    </p>
  <li><com><I>boolean</I> <I>OverlayGui</I>:<b>onRightButtonDown(</b><I>number</I> <B>x</B>, <I>number</I> <B>y</B><b>)</b></com>
    <p><descr>specifies that the right mouse button was pressed. Returns true if the event was processed.</descr>
    </p>
  <li><com><I>boolean</I> <I>OverlayGui</I>:<b>onRightButtonUp(</b><I>number</I> <B>x</B>, <I>number</I> <B>y</B><b>)</b></com>
    <p><descr>specifies that the right mouse button was released. Returns true if the event was processed.</descr>
    </p>
  <li><com><I>boolean</I> <I>OverlayGui</I>:<b>onMouseMove(</b><I>number</I> <B>x</B>, <I>number</I> <B>y</B><b>)</b></com>
    <p><descr>specifies that the mouse was moved. Returns true if the event was processed.</descr>
    </p>
  <li><com><I>boolean</I> <I>OverlayGui</I>:<b>onChar(</b><I>number</I> <B>code</B><b>)</b></com>
    <p><descr>specifies that the <I>code</I> character was typed. Returns true if the event was processed.</descr>
    </p>
  <li><com><I>boolean</I> <I>OverlayGui</I>:<b>onKeyDown(</b><I>number</I> <B>key</B><b>)</b></com>
    <p><descr>specifies that the <I>key</I> was pressed. Returns true if the event was processed.</descr>
    </p>
  <li><com><I>boolean</I> <I>OverlayGui</I>:<b>onKeyUp(</b><I>number</I> <B>key</B><b>)</b></com>
    <p><descr>specifies that the <I>key</I> was released. Returns true if the event was processed.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="overlayWorldView">
<h5>3.6.3.2.1 OverlayWorldView</h5>
</a>The <b><class>OverlayWorldView</class></b> class extends <b><parent>OverlayGui</parent></b>
and inherits all its methods. It is an overlay object similar to a sprite that
displays a different view of the world, like the main window but from a
different perspective. The differences with sprites are the following: The
rotations are not enabled and the reference location is at the lower left of the
viewport, not at the center.
<ul>
  <li><i><com>OverlayWorldView</i> <b>OverlayWorldView(</b><i>number</i> <b>width,
    </b><i>number</i> <b>height)</com></b>
    <p><descr>creates an overlay world view given the specified <i>width</i>, <i>height</i>.</descr></p>
  <li><i><com>Camera</i> <i>OverlayWorldView</i>:<b>getCamera()</com></b>
    <p><descr>returns the camera of this world view.</descr></p>
  <li><i><com>OverlayWorldView</i>:<b>setLocation(</b><i>number</i> <b>x,</b> <i>number</i>
    <b>y)</com></b>
    <p><descr>moves the world view from the current position to the point of
    coordinates <i>(x,y)</i>.</descr></p>
  <li><i><com>number</i> x, <i>number</i> y = <i>OverlayWorldView</i>:<b>getLocation()</com></b>
    <p><descr>returns the coordinates of the current position of the world view.</descr></p>
  <li><i><com>OverlayWorldView</i>:<b>setDimension(</b><i>number</i> <b>w,</b> <i>number</i>
    <b>h)</com></b>
    <p><descr>sets the size of the world view given the width <i>w</i> and the
    height <i>h</i>.</descr></p>
  <li><i><com>number</i> w, <i>number</i> h = <i>OverlayWorldView</i>:<b>getDimension()</com></b>
    <p><descr>returns the size (width and height) of the world view.</descr></p>
  <li><i><com>OverlayWorldView</i>:<b>setPerspective(</b><i>number</i> <b>fieldOfView,</b>
    <i>number</i> <b>minClip,</b> <i>number</i> <b>maxClip)</com></b>
    <p><descr>sets the perspective properties: angle of view (in degrees),
    minimum and maximum clipping plane distances.</descr></p>
  <li><i><com>OverlayWorldView</i>:<b>setOrtho(</b><i>number</i> <b>maxClip</b>
    = 1<b>)</com></b>
    <p><descr>puts the world view in ortho mode (no perspective) with the given
    maximum clipping plane distance.</descr></p>
  <li><i><com>boolean</i> <i>OverlayWorldView</i>:<b>isOrtho()</com></b>
    <p><descr>return true is the world view is in ortho mode, false if in
    perspective mode.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="overlayViewport">
<h5>3.6.3.2.2 OverlayViewport</h5>
</a>The <b><class>OverlayViewport</class></b> class extends <b><parent>OverlayWorldView</parent></b>
and inherits all its methods. It is an overlay object similar to a sprite that
displays a world, like the main window, with some limitations. While <i>OverlayWorldView</i>
shows the main world from another perspective, an <i>OverlayViewport</i> shows
its own collection of objects.
<ul>
  <li><i><com>OverlayViewport</i> <b>OverlayViewport(</b><i>number</i> <b>width,
    </b><i>number</i> <b>height)</com></b>
    <p><descr>creates an overlay viewport given the specified <i>width</i>, <i>height</i>.</descr></p>
  <li><i><com>OverlayViewport</i>:<b>setColor(</b><i>number</i> <b>red, </b><i>number</i>
    <b>green, </b><i>number</i> <b>blue,</b> <i>number</i> <b>alpha</b> = 1<b>)</com></b>
    <p><descr>changes the background color of the viewport (color components
    range from 0 to 1). A value different from 1 for <i>alpha</i> means that the
    viewport is transparent.</descr></p>
  <li><i><com>OverlayViewport</i>:<b>setAmbient(</b><i>number</i> <b>red,</b> <i>number</i>
    <b>green,</b> <i>number</i> <b>blue)</com></b>
    <p><descr>sets the overall ambient color for the viewport (color components
    range from 0 to 1).</descr>
    <p>&nbsp;
  <li><i><com>OverlayViewport</i>:<b>setBackground(</b><i>Background</i> <b>background)</com></b>
    <p><descr>sets the current background of the viewport.</descr>
    <p>&nbsp;
  <li><i><com>OverlayViewport</i>:<b>setSun(</b><i>Sun</i> <b>sun)</com></b>
    <p><descr>sets the current sun for the viewport.</descr>
    <p>&nbsp;
  <li><i><com>OverlayViewport</i>:<b>setTerrain(</b><i>Terrain</i> <b>terrain)</com></b>
    <p><descr>sets the current terrain for the viewport.</descr>
    <p>&nbsp;
  <li><i><com>OverlayViewport</i>:<b>setScenery(</b><i>Scenery</i> <b>scenery)</com></b>
    <p><descr>sets the current scenery for the viewport.</descr>
    <p>&nbsp;
  <li><i><com>OverlayViewport</i>:<b>addObject(</b><i>Object</i> <b>object)</com></b>
    <p><descr>adds a new object to the viewport.</descr>
    <p>&nbsp;
  <li><i><com>OverlayViewport</i>:<b>removeObject(</b><i>Object</i> <b>object)</com></b>
    <p><descr>removes an object from the viewport.</descr>
    <p>&nbsp;
  <li><i><com>OverlayViewport</i>:<b>deleteObjects()</com></b>
    <p><descr>removes all the objects from the viewport.</descr>
    <p>&nbsp;
  <li><i><com>OverlayViewport</i>:<b>addShadow(</b><i>Shadow</i> <b>shadow)</com></b>
    <p><descr>adds a new shadow to the viewport.</descr>
    <p>&nbsp;
  <li><i><com>OverlayViewport</i>:<b>removeShadow(</b><i>Shadow</i> <b>shadow)</com></b>
    <p><descr>removes a shadow from the viewport.</descr>
    <p>&nbsp;
  <li><i><com>OverlayViewport</i>:<b>deleteShadows()</com></b>
    <p><descr>removes all the shadows from the viewport.</descr>
    <p>&nbsp;
  <li><i><com>OverlayViewport</i>:<b>empty()</com></b>
    <p><descr>removes the sun, the background, the terrain and all the objects
    from the viewport.</descr>
    <p>&nbsp;
  <li><i><com>OverlayViewport</i>:<b>enableFog(</b><i>number</i> <b>distance,</b>
    <i>number</i> <b>red,</b> <i>number</i> <b>green,</b> <i>number</i> <b>blue)</com></b>
    <p><descr>enables the fog effect with the given characteristic distance and
    color (color components range from 0 to 1).</descr>
    <p>&nbsp;
  <li><i><com>OverlayViewport</i>:<b>disableFog()</com></b>
    <p><descr>disables the fog effect for the viewport.</descr><br>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="overlayPoints">
<h5>3.6.3.3 OverlayPoints</h5>
</a>The <b><class>OverlayPoints</class></b> class extends <b><parent>OverlayObject</parent></b>
and inherits all its methods. It is an overlay object that displays a collection
of 2D points.
<ul>
  <li><i><com>OverlayPoints</i> <b>OverlayPoints(</b><i>table</i> <b>coords</b>,
    <i>table</i> <b>colors)</com></b>
    <p><descr>creates a collection of points with the given coordinates and
    colors. The table of coordinates must contain sequentially the values of x
    and y coordinates of the points. The table of colors can contain
    sequentially the values red, green, blue and alpha of the colors of every
    point (in the range 0 to 1). The colors table may be empty is all the points
    share the same color.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>number</i> <i>OverlayPoints</i>:<b>getCount()</com></b>
    <p><descr>returns the number of points.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>OverlayPoints</i>:<b>setCoordsData(</b><i>number</i> <b>index</b>,
    <i>number</i> <b>x</b>, <i>number</i> <b>y)</com></b>
    <p><descr>sets the coordinates of the point corresponding to <i>index</i>.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y = <i>OverlayPoints</i>:<b>getCoordsData(</b><i>number</i>
    <b>index)</com></b>
    <p><descr>returns the coordinates of the point corresponding to <i>index</i>.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>OverlayPoints</i>:<b>setColorsData(</b><i>number</i> <b>index</b>,
    <i>number</i> <b>r</b>, <i>number</i> <b>g</b>, <i>number</i> <b>b</b>, <i>number</i>
    <b>a</b> = 1<b>)</com></b>
    <p><descr>sets color of the point corresponding to <i>index</i>.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>number</i> r, <i>number</i> g, <i>number</i> b, <i>number</i> a = <i>OverlayPoints</i>:<b>getColorsData(</b><i>number</i>
    <b>index)</com></b>
    <p><descr>returns the color components of the point corresponding to <i>index</i>.
    Returns <i>nil</i> if the points have no color data.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>OverlayPoints</i>:<b>setSmooth(</b><i>boolean</i> <b>smooth</b> =
    true<b>)</com></b>
    <p><descr>specifies if the points are smoothed or not. No smoothing by
    default.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>OverlayPoints</i>:<b>setSize(</b><i>number</i> <b>size)</com></b>
    <p><descr>sets the size of the points. The value is 1 by default.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>OverlayPoints</i>:<b>setColor(</b><i>number</i> <b>red, </b><i>number</i>
    <b>green, </b><i>number</i> <b>blue,</b> <i>number</i> <b>alpha</b> = 1<b>)</com></b>
    <p><descr>changes the color of all the points if no per-vertex color data
    was given. Color components range from 0 to 1. A value of 1 for <i>alpha</i>
    means no transparency.</descr>
    <p>&nbsp;
  <li><i><com>OverlayPoints</i>:<b>setLocation(</b><i>number</i> <b>x,</b> <i>number</i>
    <b>y)</com></b>
    <p><descr>moves the points from the current position to the coordinates <i>(x,y)</i>.
    The reference location is at the origin of the points.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y = <i>OverlayPoints</i>:<b>getLocation()</com></b>
    <p><descr>returns the coordinates of the current position of the points.</descr>
    <p>&nbsp;
  <li><i><com>OverlayPoints</i>:<b>setRotation(</b><i>number</i> <b>angleOfRotation)</com></b>
    <p><descr>sets the rotation angle of this object (in radians).</descr>
    <p>&nbsp;
  <li><i><com>number</i> angleOfRotation = <i>OverlayPoints</i>:<b>getRotation()</com></b>
    <p><descr>returns the rotation angle of this object (in radians).</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="overlayLines">3.6.3.3.1 OverlayLines</a></h5>
The <b><class>OverlayLines</class></b> class extends <b><parent>OverlayPoints</parent></b>
and inherits all its methods. It is used to render a collection of 2D lines.
<ul>
  <li><i><com>OverlayLines</i> <b>OverlayLines(</b><i>table</i> <b>indexes</b>, <i>table</i>
    <b>coords</b>, <i>table</i> <b>colors)</com></b>
    <p><descr>creates a collection of lines with the given indexes (specifying
    the order of connection between points), coordinates and colors. The table
    of coordinates must contain sequentially the values of x and y coordinates
    of the points. The table of colors can contain sequentially the values red,
    green, blue and alpha of the colors of every point (in the range 0 to 1).
    The colors table may be empty is all the points share the same color. By
    default the lines are rendered as disconnected lines.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>OverlayLines</i>:<b>setStipple(</b><i>number</i> <b>pattern</b>, <i>number</i>
    <b>factor)</com></b>
    <p><descr>specifies the pattern used to render the lines. The value of
    pattern is considered as a bit mask: only 1s are rendered. The <i>factor</i>
    value gives a scaling factor for the pattern.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>OverlayLines</i>:<b>setModeLineStrip()</com></b>
    <p><descr>specifies that the lines are connected.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>OverlayLines</i>:<b>setModeLineLoop()</com></b>
    <p><descr>specifies that the lines are connected and the loop is closed.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="overlayPolys">3.6.3.3.2 OverlayPolys</a></h5>
The <b><class>OverlayPolys</class></b> class extends <b><parent>OverlayLines</parent></b>
and inherits all its methods. It is used to render a collection of 2D triangles.
<ul>
  <li><i><com>OverlayPolys</i> <b>OverlayPolys(</b><i>table</i> <b>indexes</b>, <i>table</i>
    <b>coords</b>, <i>table</i> <b>colors)</com></b>
    <p><descr>creates a collection of triangles with the given indexes
    (specifying the order of connection between vertexes), coordinates and
    colors. The table of coordinates must contain sequentially the values of x
    and y coordinates of the vertexes. The table of colors can contain
    sequentially the values red, green, blue and alpha of the colors of every
    vertex (in the range 0 to 1). The colors table may be empty is all the
    points share the same color. By default the object is rendered as a polygon.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>OverlayPolys</i>:<b>setMask(</b><i>table</i> <b>mask)</com></b>
    <p><descr>specifies the pattern used to render the triangles. The values in
    the table are considered as a bit mask: only 1s are rendered. The mask is
    arranged in a 32x32 square, so the table holds 32 integers (every integer
    contains 32 bits).</descr>
    </p>
    <p>&nbsp;
  <li><i><com>OverlayPolys</i>:<b>setModeTriangs()</com></b>
    <p><descr>specifies that the object is rendered as a collection of
    disconnected triangles.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>OverlayPolys</i>:<b>setModeTriangStrip()</com></b>
    <p><descr>specifies that the object is rendered as a strip of triangles.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>OverlayPolys</i>:<b>setModeTriangFan()</com></b>
    <p><descr>specifies that the object is rendered as a fan of triangles.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>OverlayPolys</i>:<b>setFillPoint()</com></b>
    <p><descr>specifies that the object is not filled but only its vertexes
    appear as points.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>OverlayPolys</i>:<b>setFillLine()</com></b>
    <p><descr>specifies that the object is not filled but only its edges appear
    as lines.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="underlayObject">
<h4>3.6.4 UnderlayObject</h4>
</a>The <b><class>UnderlayObject</class></b> extends <b><parent>Void</parent></b> and is the base
class of all the objects that must be rendered in the hidden underlay layer: A
pre-processing for subsequent rendering.
<ul>
  <li><i><com>UnderlayObject</i>:<b>setFrozen(</b><i>boolean</i> <b>frozen</b> =
    true<b>)</com></b>
    <p><descr>makes this object frozen or not. In the frozen state, the object
    rendered in the last not frozen frame is used for actual rendering.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>UnderlayObject</i>:<b>isFrozen()</com></b>
    <p><descr>returns true if the object is frozen.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="viewportTexture">3.6.4.0 ViewportTexture</a></h5>
The <b><class>ViewportTexture</class></b> class extends <b><parent>UnderlayObject</parent></b>
(as parent) and <b>Texture</b> (as godparent) and inherits all their methods. It
is a texture in which is rendered an <i>OverlayViewport</i> or an <i>OverlayWorldView</i>.
Usually it is used to attach dynamic textures to meshes.
<ul>
  <li><i><com>ViewportTexture</i> <b>ViewportTexture(</b><i>number</i> <b>width</b>,
    <i>number</i> <b>height</b><b>)</com></b>
    <p><descr>creates a dynamic texture with the specified width and height.</descr>
    </p>
  <li><i><com>ViewportTexture</i>:<b>setViewport(</b><i>OverlayWorldView</i> <b>viewport</b>
    = nil<b>)</com></b>
    <p><descr>attaches the given viewport to this texture. Form now on the
    texture owns the viewport object. Pass <i>nil</i> to detach the viewport
    (this also deletes the viewport from memory).</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="aviTexture">3.6.4.1 AviTexture</a></h5>
The <b><class>AviTexture</class></b> class extends <b><parent>UnderlayObject</parent></b>
(as parent) and <b>Texture</b> (as godparent) and inherits all their methods. It
is a texture in which is rendered an <i>AVI</i> movie. Usually it is used to
attach dynamic textures to meshes.
<ul>
  <li><com><i>AviTexture</i> <b>AviTexture(</b><i>string</i> <b>fileName</b>, <i>number</i>
    <b>width</b>, <i>number</i> <b>height</b><b>)</b></com>
    <p><descr>creates an AVI texture that shows the given AVI file, with the
    specified width and height.</descr>
    </p>
  <li><com><i>number</i> <i>AviTexture</i>:<b>getCurrentFrame(</b><b>)</b></com>
    <p><descr>returns the current shown frame.</descr></p>
  <li><com><i>number</i> <i>AviTexture</i>:<b>getFramesCount(</b><b>)</b></com>
    <p><descr>returns the number of frames.</descr></p>
  <li><com><i>number</i> <i>AviTexture</i>:<b>getFrameRate(</b><b>)</b></com>
    <p><descr>returns the frame rate of the movie.</descr></p>
  <li><com><i>AviTexture</i>:<b>setCurrentFrame(</b><i>number</i> <b>frame</b><b>)</b></com>
    <p><descr>sets the current frame in the movie.</descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<h5><a name="graphicTexture">3.6.4.2 GraphicTexture</a></h5>
The <b><class>GraphicTexture</class></b> class extends <b><parent>UnderlayObject</parent></b>
(as parent) and <b>Texture</b> (as godparent) and inherits all their methods. It
is a texture in which is rendered a 2D image created through the <A HREF="APOCALYX-manual-luagd.htm">GD library</A>.
Remember that a global variable must hold the reference to the 2D image used by an instance of this class
(in fact the variable is responsible for the destruction of the image and not the texture).
Usually it is used to attach dynamic textures to meshes.
<ul>
  <li><com><i>GraphicTexture</i> <b>GraphicTexture(</b><i>GdImage</i> <b>gdImage</b><b>)</b></com>
    <p><descr>creates a graphic texture that shows the given <I>gdImage</I> (the latter must be a true color image).</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="sample">
<h3>3.7 Sample</h3>
</a>The <b><class>Sample</class></b> class extends <b><parent>Void</parent></b>
and represents the data used to create sounds. When no more needed, samples must
be explicitly released using the <i>delete()</i> function to free the occupied
memory.
<ul>
  <li><i><com>Sound</i> <i>Sample</i>:<b>createSound()</com></b>
    <p><descr>returns a sound created from the sampled data of this object.</descr>
    <p>&nbsp;
  <li><i><com>Sample</i>:<b>setVolume(</b><i>number</i> <b>volume)</com></b>
    <p><descr>sets the default volume of this sample. The argument value ranges
    from 0 to 255.</descr>
    <p>&nbsp;
  <li><i><com>Sample</i>:<b>setPan(</b><i>number</i> <b>pan)</com></b>
    <p><descr>sets the default pan value for this sample. The argument value
    ranges from 0 to 255: 0 is full left, 255 is full right.</descr>
    <p>&nbsp;
  <li><i><com>Sample</i>:<b>setFrequency(</b><i>number</i> <b>frequency)</com></b>
    <p><descr>sets the default frequency value for this sample.</descr>
    <p>&nbsp;
  <li><i><com>Sample</i>:<b>setPriority(</b><i>number</i> <b>priority)</com></b>
    <p><descr>sets the default priority value for this sample. The argument
    value ranges from 0 to 255: 0 is the lowest priority, 255 is the highest
    priority.</descr>
    <p>&nbsp;
  <li><i><com>Sample</i>:<b>setLooping(</b><i>boolean</i> <b>looping)</com></b>
    <p><descr>sets the looping sample mode: a <b>nil</b> value means that the
    sample doesn't loop.</descr>
    <p>&nbsp;
  <li><i><com>Sample</i>:<b>delete()</com></b>
    <p><descr>deletes the sample from memory.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="sample3d">
<h4>3.7.1 Sample3D</h4>
</a>The <b><class>Sample3D</class></b> class extends <b><parent>Sample</parent></b>
and inherits all its methods. It is the same as its parent class, but adds a
method useful for 3D sounds.
<ul>
  <li><i><com>Sample3D</i> <b>Sample3D(</b><i>number</i> <b>frequency</b> =
    8000, <i>number</i> <b>bits</b> = 8<b>)</com></b>
    <p><descr>creates an empty 3D sample wit the given playback frequency and
    resolution bits.</descr>
    <p>&nbsp;
  <li><i><com>Sound3D</i> <i>Sample3D</i>:<b>create3DSound()</com></b>
    <p><descr>returns a 3D sound created from the sampled data of this object.</descr>
    <p>&nbsp;
  <li><i><com>Sample3D</i>:<b>setMinDistance(</b><i>number</i> <b>minDistance)</com></b>
    <p><descr>sets the distance from which the sound begins to falloff. Below <i>minDistance</i>
    the sound volume is equal to the maximum sound volume.</descr>
    <p>&nbsp;
  <li><i><com>Sample3D</i>:<b>playAt(</b><i>number</i> <b>posX</b>, <i>number</i>
    <b>posY</b>, <i>number</i> <b>posZ</b>, <i>number</i> <b>velX</b> = 0, <i>number</i>
    <b>velY</b> = 0, <i>number</i> <b>velZ</b> = 0<b>)</com></b>
    <p><descr>plays a 3D sound with the specified position and velocity.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="sound">
<h4>3.7.2 Sound</h4>
</a>The <b><class>Sound</class></b> class extends <b><parent>Void</parent></b>
and is used for sounds that can be played. When no more needed, sounds must be
explicitly released using the <i>delete()</i> function to free the occupied
memory.
<ul>
  <li><i><com>Sound</i>:<b>setVolume(</b><i>number</i> <b>volume)</com></b>
    <p><descr>sets the volume of this sound. The argument value ranges from 0 to
    255.</descr>
    <p>&nbsp;
  <li><i><com>Sound</i>:<b>setPan(</b><i>number</i> <b>pan)</com></b>
    <p><descr>sets the pan value for this sound. The argument value ranges from
    0 to 255: 0 is full left, 255 is full right.</descr>
    <p>&nbsp;
  <li><i><com>Sound</i>:<b>setFrequency(</b><i>number</i> <b>frequency)</com></b>
    <p><descr>sets the frequency value for this sound.</descr>
    <p>&nbsp;
  <li><i><com>Sound</i>:<b>setPriority(</b><i>number</i> <b>priority)</com></b>
    <p><descr>sets the priority value for this sound. The argument value ranges
    from 0 to 255: 0 is the lowest priority, 255 is the highest priority.</descr>
    <p>&nbsp;
  <li><i><com>Sound</i>:<b>play(</b><i>number</i> <b>priority</b> = 255<b>)</com></b>
    <p><descr>plays a sound and sets the priority value for this sound. The
    priority argument is optional.</descr>
    <p>&nbsp;
  <li><i><com>Sound</i>:<b>stop()</com></b>
    <p><descr>stops playing this sound.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>Sound</i>:<b>isPlaying()</com></b>
    <p><descr>returns true if the sound is playing.</descr>
    <p>&nbsp;
  <li><com><i>Sound</i>:<b>reset()</com></b>
    <p><descr>removes the buffers queued in this sound.</descr>
    <p>&nbsp;
  <li><i><com>Sound</i>:<b>delete()</com></b>
    <p><descr>deletes the sound from memory.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="sound3d">
<h5>3.7.2.1 Sound3D</h5>
</a>The <b><class>Sound3D</class></b> class extends <b><parent>Sound</parent></b>
and inherits all its methods. It is the same as its parent class, but adds a
method useful for 3D sounds.
<ul>
  <li><i><com>Sound3D</i>:<b>setAttributes(</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>posX,</b> <i>number</i> <b>posY,</b> <i>number</i>
    <b>posZ,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>velX,</b> <i>number</i> <b>velY,</b> <i>number</i>
    <b>velZ</b><br>
    <b>)</com></b>
    <p><descr>sets the position and velocity of the sound source.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="source">
<h5>3.7.2.2 Source</h5>
</a>The <b><class>Source</class></b> class extends <b><parent>Void</parent></b>
and is used to represent sound sources. It associates a sound to a specific
object in the world and keeps track of the changes in position and velocity of
that object to modify the attributes of the sound.
<ul>
  <li><i><com>Source</i> <b>Source(</b><i>Sample3D</i> <b>sample</b>, <i>Object</i>
    <b>object</b>, <i>boolean</i> <b>playing</b> = true<b>)</com></b>
    <p><descr>creates a sound source given a sample and an object. If <i>playing</i>
    is true (default) the sound start playing immediately.</descr>
    <p>&nbsp;
  <li><i><com>Source</i>:<b>setSound3D(</b><i>Sound3D</i> <b>sound)</com></b>
    <p><descr>replaces the sound attached to this source.</descr>
    <p>&nbsp;
  <li><i><com>Sound3D</i> <i>Source</i>:<b>getSound3D()</com></b>
    <p><descr>returns the sound attached to this source.</descr>
    <p>&nbsp;
  <li><i><com>Source</i>:<b>setObject(</b><i>Object</i> <b>sound)</com></b>
    <p><descr>replaces the object attached to this source.</descr>
    <p>&nbsp;
  <li><i><com>Object</i> <i>Source</i>:<b>getObject()</com></b>
    <p><descr>returns the object attached to this source.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="capturedevice">
<h4>3.7.3 CaptureDevice</h4>
</a>The <b><class>CaptureDevice</class></b> class extends <b><parent>Void</parent></b>
and represents a device suitable for the capture of mono sound samples. This
class is available only in the <i>OpenAL</i> version of the engine, not in the <i>FMOD</i>
version.
<ul>
  <li><i><com>CaptureDevice</i> <b>CaptureDevice(</b><i>number</i> <b>maxSamples</b>,
    <i>number</i> <b>frequency</b>, <i>number</i> <b>bits)</com></b>
    <p><descr>returns a capture device corresponding to the given parameters.
    The <i>maxSamples</i> parameters specifies the number of samples that the
    buffer can hold, the <i>frequency</i> argument is the sampling rate (44100,
    22050, 11025 etc.) and <i>bits</i> specifies the precision of samples (8 or
    16 bits).</descr>
    <p>&nbsp;
  <li><i><com>CaptureDevice</i>:<b>delete()</com></b>
    <p><descr>deletes the capture device.</descr>
    <p>&nbsp;
  <li><i><com>CaptureDevice</i>:<b>start()</com></b>
    <p><descr>starts the acquisition of sound samples.</descr>
    <p>&nbsp;
  <li><i><com>CaptureDevice</i>:<b>stops()</com></b>
    <p><descr>stops the acquisition of sound samples.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>CaptureDevice</i>:<b>getMaxSamples()</com></b>
    <p><descr>returns the maximum number of samples that the buffer can hold.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>CaptureDevice</i>:<b>getAcquiredSamples()</com></b>
    <p><descr>returns the number of samples that the device has currently
    acquired (the value refers to data that is available in the hardware for a
    capture action)</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>CaptureDevice</i>:<b>getAvailableSamples()</com></b>
    <p><descr>returns the number of samples currently in the buffer (the value
    referes to data effectively available after a capture).</descr>
    <p>&nbsp;
  <li><i><com>CaptureDevice</i>:<b>setAvailableSamples(</b><i>number</i> <b>val)</com></b>
    <p><descr>sets the number of available samples in the buffer. Useful to
    modify or simulate a real capture.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>CaptureDevice</i>:<b>getSample(</b><i>number</i> <b>index)</com></b>
    <p><descr>returns the value of the sample at <i>index</i>. The returned
    value is always a floating point in the range -1 to 1.</descr>
    <p>&nbsp;
  <li><i><com>CaptureDevice</i>:<b>setSample(</b><i>number</i> <b>index</b>, <i>number</i>
    <b>value)</com></b>
    <p><descr>sets the value of the sample at <i>index</i>. The value must be a
    floating point in the range -1 to 1. Useful to modify or simulate a real
    capture.</descr>
    <p>&nbsp;
  <li><i><com>CaptureDevice</i>:<b>capture()</com></b>
    <p><descr>captures the sound data in the hardware buffer and freezes it.</descr>
    <p>&nbsp;
  <li><i><com>CaptureDevice</i>:<b>writeToSample3D(</b><i>Sample3D</i> <b>sample)</com></b>
    <p><descr>writes the captured sound data in the given sample object.</descr>
    <p>&nbsp;
  <li><i><com>Sample3D</i> <i>CaptureDevice</i>:<b>createSample3D()</com></b>
    <p><descr>creates a sample object from the captured sound data.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>CaptureDevice</i>:<b>saveAsWav(</b><i>string</i> <b>fileName)</com></b>
    <p><descr>saves the buffer contents as a WAV file.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="music">
<h3>3.8  MidiMusic <I>aka</I> Music</h3>
</a>The <b><class>Music</class></b> class extends <b><parent>Void</parent></b>
and represents a player of MIDI music files. When no more needed, music objects must
be explicitly released using the <i>delete()</i> function to free the occupied
memory.
<ul>
  <li><i><com>Music</i> <b>Music(</b><i>string</i> <b>fileName)</com></b>
    <p><descr>loads the music stored in the specified file.</descr>
    <p>&nbsp;
  <li><i><com>Music</i>:<b>setVolume(</b><i>number</i> <b>volume)</com></b>
    <p><descr>sets the volume of this music. The argument value ranges from 0 to
    255.</descr>
    <p>&nbsp;
  <li><i><com>Music</i>:<b>setLooping(</b><i>boolean</i><b> looping</b> = true<b>)</com></b>    <p><descr>sets the looping music mode: a <b>nil</b> value means that the
    music doesn't loop.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Music</i>:<b>isPlaying()</com></b>
    <p><descr>returns <b>false</b> if the music is not playing any more.</descr>
    <p>&nbsp;
  <li><i><com>Music</i>:<b>play()</com></b>
    <p><descr>plays the music.</descr>
    <p>&nbsp;
  <li><i><com>Music</i>:<b>stop()</com></b>
    <p><descr>stops playing this music.</descr>
    <p>&nbsp;
  <li><i><com>Music</i>:<b>delete()</com></b>
    <p><descr>deletes the music from memory.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="mediacontrol">
<h4>3.8.1 MediaControl</h4>
</a>The <b><class>MediaControl</class></b> class extends <b><parent>Void</parent></b>
and represents a generic player of media files, for example MP3 files. When no
more needed, these objects must be explicitly released using the <i>delete()</i>
function to free the occupied memory.
<ul>
  <li><i><com>MediaControl</i> <b>MediaControl(</b><i>string</i> <b>fileName)</com></b>
    <p><descr>creates an objects to play the specified file. A <i>nil</i> is
    returned if any error occurred.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>MediaControl</i>:<b>open(</b><i>string</i> <b>fileName)</com></b>
    <p><descr>opens a specified file. Return <i>false</i> on error.</descr>
    <p>&nbsp;
  <li><i><com>MediaControl</i>:<b>close()</com></b>
    <p><descr>closes the file, but the object remains available to open other
    files.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>MediaControl</i>:<b>getStart()</com></b>
    <p><descr>returns the start position in the opened media file.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>MediaControl</i>:<b>getEnd()</com></b>
    <p><descr>returns the end position in the opened media file.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>MediaControl</i>:<b>getPosition()</com></b>
    <p><descr>returns the current position in the opened media file.</descr>
    <p>&nbsp;
  <li><i><com>MediaControl</i>:<b>setRepeat(</b><i>boolean</i> <b>repeat)</com></b>
    <p><descr>specifies if the reproduction must be repeated or not.</descr>
    <p>&nbsp;
  <li><i><com>MediaControl</i>:<b>setVolume(</b><i>number</i> <b>volume)</com></b>
    <p><descr>sets the volume. A value of 1 means &quot;normal&quot; volume.</descr>
    <p>&nbsp;
  <li><i><com>MediaControl</i>:<b>setSpeed(</b><i>number</i> <b>speed)</com></b>
    <p><descr>sets the reproduction speed. A value of 1 means &quot;normal&quot;
    speed.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>MediaControl</i>:<b>setPosition(</b><i>number</i> <b>pos)</com></b>
    <p><descr>sets the current position in the opened media file.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>MediaControl</i>:<b>play()</com></b>
    <p><descr>plays the file.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>MediaControl</i>:<b>playFromTo(</b><i>number</i> <b>from</b>,
    <i>number</i> <b>to)</com></b>
    <p><descr>plays the file from position <i>from</i> to position <i>to</i>.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>MediaControl</i>:<b>stop()</com></b>
    <p><descr>stops the reproduction.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>MediaControl</i>:<b>pause()</com></b>
    <p><descr>pauses the reproduction.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>MediaControl</i>:<b>resume()</com></b>
    <p><descr>resumes the reproduction after a pause.</descr>
    <p>&nbsp;
  <li><i><com>MediaControl</i>:<b>delete()</com></b>
    <p><descr>deletes the object from memory.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="oggmusic">
<h4>3.8.2  OggMusic</h4>
</a>The <b><class>OggMusic</class></b> class extends <b><parent>Void</parent></b>
and represents a player of Ogg-Vorbis music files. When no more needed, music objects must
be explicitly released using the <i>delete()</i> function to free the occupied
memory.
<ul>
  <li><i><com>OggMusic</i> <b>OggMusic(</b><i>string</i> <b>fileName)</com></b>
    <p><descr>loads the music stored in the specified file.</descr>
    <p>&nbsp;
  <li><i><com>OggMusic</i>:<b>setVolume(</b><i>number</i> <b>volume)</com></b>
    <p><descr>sets the volume of this music. The argument value ranges from 0 to
    255.</descr>
    <p>&nbsp;
  <li><i><com>OggMusic</i>:<b>setLooping(</b><i>boolean</i><b> looping</b> = true<b>)</com></b>
    <p><descr>sets the looping music mode: a <b>false</b> value means that the
    music doesn't loop.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>OggMusic</i>:<b>isPlaying()</com></b>
    <p><descr>returns <b>false</b> if the music is not playing any more.</descr>
    <p>&nbsp;
  <li><i><com>OggMusic</i>:<b>play()</com></b>
    <p><descr>plays the music.</descr>
    <p>&nbsp;
  <li><i><com>OggMusic</i>:<b>stop()</com></b>
    <p><descr>stops playing this music.</descr>
    <p>&nbsp;
  <li><i><com>OggMusic</i>:<b>delete()</com></b>
    <p><descr>deletes the music from memory.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="simulator">
<h3>3.9 Simulator</h3>
</a>The <b><class>Simulator</class></b> class extends <b><parent>Void</parent></b>
and is used to hold the data needed for physics simulations. When no more
needed, the simulator must be explicitly removed using the <i>delete()</i>
function to free the occupied memory.
<ul>
  <li><i><com>Simulator</i> <b>Simulator()</com></b>
    <p><descr>creates a physics simulator.</descr>
    <p>&nbsp;
  <li><i><com>Simulator</i>:<b>addParticleSet(</b><i>ParticleSet</i> <b>particleSet)</com></b>
    <p><descr>adds a particle set to this simulator.</descr>
    <p>&nbsp;
  <li><i><com>Simulator</i>:<b>empty()</com></b>
    <p><descr>removes all the physical objects from this simulator.</descr>
    <p>&nbsp;
  <li><i><com>number Simulator</i>:<b>getDeltaT()</com></b>
    <p><descr>returns the fixed time step of the simulator.</descr>
    <p>&nbsp;
  <li><i><com>Simulator</i>:<b>runStep(</b><i>number</i> <b>timeStep)</com></b>
    <p><descr>advances the simulation of <i>timeStep</i> seconds.</descr>
    <p>&nbsp;
  <li><i><com>Simulator</i>:<b>delete()</com></b>
    <p><descr>deletes the simulator from memory.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<h4><a name="body">3.9.0 Body</a></h4>
The <b><class>Body</class></b> class extends <b><parent>Void</parent></b> and
represents a rigid body whose physical behavior can be simulated in a simulator
object.
<ul>
  <li><i><com>Body</i> <b>Body(<br>
&nbsp;&nbsp;&nbsp; </b><i>Simulator</i> <b>sim,</b> <i>StaticEnvironment</i>
    <b>environ,<br>
&nbsp;&nbsp;&nbsp; </b><i>function</i><b> applyForces, </b><i>Reference </i><b>reference<br>
    )</com></b>
    <p><descr>creates a body given: the <i>simulator</i> that holds the position
    and orientation of this body; the <i>environment</i> that specifies some
    physical properties that the body is subject to; the (callback) function <i>applyForces</i>;
    the <i>reference</i> that is attached to this body. Its <i>applyForces</i>
    argument is a function that is defined as follows:</p>
    <ul>
      <li><b><com>applyForces(</b><i>Body </i><b>body)</com><br>
        </b><br>
        <descr>      the <i>applyForces()</i> function accept a <i>body</i> as
        argument to which forces and torques will be applied. This function is
        called by the physics simulator at every time step.<br>
    </ul>
    <p>&nbsp;
  <li><i><com>number Body</i>:<b>getID()</com></b>
    <p><descr>returns the identification number this body.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Body</i>:<b>setID(</b><i>number</i> <b>id)</com></b>
    <p><descr>sets the identification number this body.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>number Body</i>:<b>getColliderHit()</com></b>
    <p><descr>returns the identification number of the physical object hit in
    the last collision. The number is reset to -1 (no collision) after the call.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Body</i>:<b>setRadius(</b><i>number</i> <b>r)</com></b>
    <p><descr>sets the radius of this object. The collision detector represents
    objects with simple spheres.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>Body</i>:<b>setPosition(</b><i>number</i> <b>x</b>, <i>number</i> <b>y</b>,
    <i>number</i> <b>z)</com></b>
    <p><descr>sets the position of the body.</descr>
    <p>&nbsp;
  <li><i><com>number </i>posX, <i>number</i> posY, <i>number </i>posZ = <i>Body</i>:<b>getPosition()</com></b>
    <p><descr>returns the position of the body.</descr>
    </p>
</ul>
<ul>
  <li><i><com>Body</i>:<b>setVelocity(</b><i>number</i> <b>x</b>, <i>number</i> <b>y</b>,
    <i>number</i> <b>z)</com></b>
    <p><descr>sets the velocity of the body.</descr>
    </p>
  </li>
  <li><i><com>number </i>velX, <i>number</i> velY, <i>number </i>velZ = <i>Body</i>:<b>getVelocity()</com></b>
    <p><descr>returns the velocity of the body.</descr>
    </p>
  </li>
</ul>
<ul>
  <li><i><com>Body</i>:<b>setOrientation(</b><i>number</i> <b>theta</b>, <i>number</i>
    <b>phi</b>, <i>number</i> <b>rho)</com></b>
    <p><descr>sets the orientation of the body.</descr>
    </p>
  </li>
  <li><i><com>number </i>theta, <i>number</i> phi, <i>number </i>rho = <i>Body</i>:<b>getOrientation()</com></b>
    <p><descr>returns the orientation of the body.</descr>
    </p>
</ul>
<ul>
  <li><i><com>Body</i>:<b>setAngularVelocity(</b><i>number</i> <b>theta</b>, <i>number</i>
    <b>phi</b>, <i>number</i> <b>rho)</com></b>
    <p><descr>sets the angular velocity of the body.</descr>
    </p>
  </li>
  <li><i><com>number </i>theta, <i>number</i> phi, <i>number </i>rho = <i>Body</i>:<b>getAngularVelocity()</com></b>
    <p><descr>returns the angular velocity of the body.</descr>
    </p>
  </li>
  <li><i><com>number Body</i>:<b>getMass()</com></b>
    <p><descr>returns the mass of the body.</p>
  </li>
  <li><i>Body</i>:<b>setMass(</b><i>number</i> mass<b>)</com></b>
    <p><descr>sets the mass of the body.</p>
  </li>
  <li><i>Body</i>:<b>setMomentOfInertia(</b><i>number</i> <b>mx</b>, <i>number</i>
    <b>my</b>, <i>number</i> <b>mz)</b>
    <p>sets the moment of inertia of the body.</descr>
    </p>
  </li>
  <li><i><com>number </i>mx, <i>number</i> my, <i>number </i>mz = <i>Body</i>:<b>getMomentOfInertia()</com></b>
    <p><descr>returns the moment of inertia of the body.</descr>
    </p>
  </li>
  <li><i><com>Body</i>:<b>addForce(</b><i>number</i> <b>fx</b>, <i>number</i> <b>fy</b>,
    <i>number</i> <b>fz)</com></b>
    <p><descr>adds a force to this body. A call makes sense only in the <i>applyForces()</i>
    function.</descr>
    </p>
  </li>
  <li><i><com>number </i>fx, <i>number</i> fy, <i>number </i>fz&nbsp; = <i>Body</i>:<b>getForce()</com></b>
    <p><descr>returns the force applied to the body. A call makes sense only in
    the <i>applyForces()</i> function.</descr>
    </p>
  <li><i><com>Body</i>:<b>addTorque(</b><i>number</i> <b>tx</b>, <i>number</i> <b>ty</b>,
    <i>number</i> <b>tz)</com></b>
    <p><descr>adds a torque to this body. A call makes sense only in the <i>applyForces()</i>
    function.</descr>
    </p>
  </li>
  <li><i><com>number </i>tx, <i>number</i> ty, <i>number </i>tz&nbsp; = <i>Body</i>:<b>getTorque()</com></b>
    <p><descr>returns the torque applied to the body. A call makes sense only in
    the <i>applyForces()</i> function.</descr>
    </p>
  <li><i><com>Body</i>:<b>updateReference()</com></b>
    <p><descr>updates the position and orientation of the reference attached to
    the body.</descr>
    </p>
  </li>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="particleset">
<h4>3.9.1 ParticleSet</h4>
</a>The <b><class>ParticleSet</class></b> class extends <b><parent>Void</parent></b>
and represents a set of particles whose physical behavior can be simulated in a
simulator object.
<ul>
  <li><i><com>number ParticleSet</i>:<b>getID()</com></b>
    <p><descr>returns the identification number this particle set.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>ParticleSet</i>:<b>setID(</b><i>number</i> <b>id)</com></b>
    <p><descr>sets the identification number this particle set.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>ParticleSet</i>:<b>setRadius(</b><i>number</i> <b>r)</com></b>
    <p><descr>sets the radius of this object. The collision detector represents
    objects with simple spheres.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>number ParticleSet</i>:<b>getParticlesCount()</com></b>
    <p><descr>returns the number of particles in this particle set.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>boolean ParticleSet</i>:<b>wasTerrainHit()</com></b>
    <p><descr>returns <i>true</i> if this particle set hit the ground during the
    last simulator step. The value is reset to <i>false</i> (no collision) after
    the call.</p>
    <p>&nbsp;
  <li><i><com>boolean ParticleSet</i>:<b>wasEnvironmentHit()</com></b>
    <p><descr>returns <i>true</i> if this particle set hit the environment
    (including ground) during the last simulator step. The value is reset to <i>false</i>
    (no collision) after the call.</p>
    <p>&nbsp;
  <li><i><com>number ParticleSet</i>:<b>getColliderHit()</com></b>
    <p><descr>returns the identification number of the physical object hit in
    the last collision. The number is reset to -1 (no collision) after the call.</descr>
    </p>
    <p>&nbsp;
  <li><i><com>ParticleSet</i>:<b>setPosition(</b><i>number</i> <b>idx</b>, <i>number</i>
    <b>x</b>, <i>number</i> <b>y</b>, <i>number</i> <b>z)</com></b>
    <p><descr>sets the position of the <i>idx</i>th particle.</descr>
    </p>
  </li>
  <li><i><com>number </i>posX, <i>number</i> posY, <i>number </i>posZ = <i>ParticleSet</i>:<b>getPosition(</b><i>number</i>
    <b>idx)</com></b>
    <p><descr>returns the position of the <i>idx</i>th particle.</descr>
    </p>
</ul>
<ul>
  <li><i><com>ParticleSet</i>:<b>setVelocity(</b><i>number</i> <b>idx</b>, <i>number</i>
    <b>x</b>, <i>number</i> <b>y</b>, <i>number</i> <b>z)</com></b>
    <p><descr>sets the velocity of the <i>idx</i>th particle.</descr>
    </p>
  </li>
  <li><i><com>number </i>velX, <i>number</i> velY, <i>number </i>velZ = <i>ParticleSet</i>:<b>getVelocity(</b><i>number</i>
    <b>idx)</com></b>
    <p><descr>returns the velocity of the <i>idx</i>th particle.</descr>
    </p>
  </li>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="assembly">
<h5>3.9.1.1 Assembly</h5>
</a>The <b><class>Assembly</class></b> class extends <b><parent>ParticleSet</parent></b>
and inherits all its methods. It adds some constraint to the particle movement.
<ul>
  <li><i><com>Assembly</i> <b>Assembly(<br>
    <i>&nbsp;&nbsp;&nbsp; </i></b><i>Simulator</i> <b>sim,</b> <i>StaticEnvironment</i>
    <b>environ,</b><br>
    <b><i>&nbsp;&nbsp;&nbsp; </i></b><i>table</i> <b>particlesPositions, </b><i>table
    </i><b>stickIndexes,</b><br>
    <b><i>&nbsp;&nbsp;&nbsp; </i></b><i>function</i> <b>applyForces<br>
    )</com></b>
    <p><descr>creates an assembly (a constrained set of particles) given: the <i>simulator</i>;
    the <i>environment</i> that specifies some physical properties that the
    particles are subject to; <i>particlePositions</i>: the table of the initial
    positions of the particles (all the coordinates of the positions must be
    specified one after the other in the order x, y, z); <i>stickIndexes</i>:
    the table of the indexes of the couple of particles that are linked by the
    sticks (all the indexes must be specified in order one after the other in
    the same table). Its <i>applyForces</i> argument is a function that is
    defined as follows:</p>
    <ul>
      <li><b><com>applyForces(</b><i>Assembly </i><b>assembly)</com><br>
        </b><br>
        the <i>applyForces()</i> function accept an <i>assembly</i> as argument
        to which forces will be applied. This function is called by the physics
        simulator at every time step.</descr><br>
    </ul>
    <br>
  <li><i><com>Assembly</i>:<b>addForce(</b><i>number</i> <b>particleIndex,</b> <i>number</i>
    <b>fX,</b> <i>number</i> <b>fY,</b> <i>number</i> <b>fZ)</com></b>
    <p><descr>adds a force to a given particle of this assembly. A call makes
    sense only in the <i>applyForces()</i> function.</descr>
    <p>&nbsp;
  <li><i><com>Assembly</i>:<b>addNail(</b><i>number</i> <b>particleIndex,</b> <i>number</i>
    <b>posX,</b> <i>number</i> <b>posY,</b> <i>number</i> <b>posZ)</com></b>
    <p><descr>adds a nail to the assembly: This means that a particle of the
    assembly has a fixed position no matter what the simulator says.</descr>
    <p>&nbsp;
  <li><i><com>Assembly</i>:<b>setNailPosition(</b><i>number</i> <b>nailIndex,</b>
    <i>number</i> <b>posX,</b> <i>number</i> <b>posY,</b> <i>number</i> <b>posZ)</com></b>
    <p><descr>changes the position of a given nail defined for this assembly.</descr>
    <p>&nbsp;
  <li><i><com>Assembly</i>:<b>getNailsCount()</com></b>
    <p><descr>returns the number of nails defined for this assembly.</descr>
    <p>&nbsp;
  <li><i><com>Assembly</i>:<b>setRelaxationCycles(</b><i>number</i> <b>cycles)</com></b>
    <p><descr>sets the number of <i>relaxation</i> cycles needed by this
    assembly of particles. The physics simulator executes one iteration every
    1/100th of second. If the set of particles is complex, further integration
    cycles reduce the elasticity of the assembly.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="machinery">
<h5>3.9.1.1.0 Machinery</a></h5>
The <b><class>Machinery</class></b> class extends <b><parent>Assembly</parent></b>
and inherits all its methods. It is used to simulate a complex object with
several types of constraints attached.
<ul>
  <li><i><com>Machinery</i> <b>Machinery(<br>
    <i>&nbsp;&nbsp;&nbsp; </i></b><i>Simulator</i> <b>sim,</b> <i>StaticEnvironment</i>
    <b>environ, </b><i>number </i><b>mass,<br>
    <i>&nbsp;&nbsp;&nbsp; </i></b><i>table</i> <b>particlesPositions, </b><i>table
    </i><b>stickIndexes,</b><br>
    <b><i>&nbsp;&nbsp;&nbsp; </i></b><i>table</i> <b>textureCoords,</b><i> table
    </i><b>trianglesIndexes,<br>
    <i>&nbsp;&nbsp;&nbsp; </i></b><i>table </i><b>ropeIndexes</b> = {}<b>, </b><i>table
    </i><b>ropeLens2</b> = {}<b>,</b><br>
    <b>&nbsp;&nbsp;&nbsp; </b><i>table </i><b>bumperIndexes</b> = {}<b>, </b><i>table
    </i><b>bumperLens2</b> = {}<b>,</b><br>
    <b>&nbsp;&nbsp;&nbsp; </b><i>table </i><b>springIndexes</b> = {}<b>, </b><i>table
    </i><b>springKs</b> = {}<b>,</b><br>
    <b>&nbsp;&nbsp;&nbsp; </b><i>table </i><b>damperIndexes</b> = {}<b>, </b><i>table
    </i><b>damperKs</b> = {}<b>,</b><br>
    <b>&nbsp;&nbsp;&nbsp; </b><i>table </i><b>paddingIndexes</b> = {}<b>, </b><i>table
    </i><b>paddingKs</b> = {},<br>
    <b>&nbsp;&nbsp;&nbsp; </b><i>table </i><b>nailIndexes</b> = {}<b><br>
    )</com></b>
    <p><descr>creates a machinery (a constrained assembly of particles) given:
    the <i>simulator</i>; the <i>environment</i> that specifies some physical
    properties that the particles are subject to; the <i>mass</i> of the
    particles; <i>particlePositions</i>: the table of the initial positions of
    the particles (all the coordinates of the positions must be specified one
    after the other in the order x, y, z); <i>stickIndexes</i>: the table of the
    indexes of the couple of particles that are linked by the sticks (all the
    indexes must be specified in order one after the other in the same table); <i>textureCoords</i>:
    the table of the texture coordinates applied to the mesh associated with
    this object (all the <i>u</i>, <i>v</i> coordinates must be specified in
    order one after the other in the same table); <i>triangleIndexes</i>: the
    table of the indexes of vertexes that build every triangle of the mesh
    associated with this object (all the <i>a,</i> <i>b</i>,<i> c</i> indexes
    must be specified in order one after the other in the same table); <i>ropeIndexes</i>:
    the table of the indexes of the couple of particles that are linked by the
    ropes (a rope prevents two particles to move at a distance higher that a
    given value); <i>ropeLens2</i>: the table of the squared length of every
    rope; <i>bumperIndexes</i>: the table of the indexes of the couple of
    particles that are linked by the bumpers (a bumper prevents two particles to
    move at a distance lower that a given value); <i>bumperLens2</i>: the table
    of the square length of every bumper; <i>springIndexes</i>: the table of the
    indexes of the couple of particles that are linked by the springs (a spring
    links two particles with a force proportional to their distance); <i>springKs</i>:
    the table of the elastic constant of every spring; <i>damperIndexes</i>: the
    table of the indexes of the couple of particles that are linked by the
    dampers (a damper links two particles with a force proportional to their
    relative velocity); <i>damperKs</i>: the table of the damping constant of
    every damper; <i>paddingIndexes</i>: the table of the indexes of the couple
    of particles that are linked by the paddings (a padding like a stick but the
    recovery of the stick length is not immediate); <i>paddingKs</i>: the table
    of the constant of every padding; <i>nailIndexes</i>: the table of the
    indexes of the particles that are fixed in world space.</descr> 
    </p>
  <li><i><com>Mesh</i> <i>Machinery</i>:<b>getMesh()</com></b>
    <p><descr>returns the mesh object associated to this machinery.</descr>
    <p>&nbsp;
  <li><i><com>Machinery</i>:<b>setAirDragEnabled(</b><i>boolean</i> <b>enabled</b>
    = true<b>)</com></b>
    <p><descr>enables (or disables) air drag for the machinery. It is disabled
    by default.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="cloth">
<h5>3.9.1.1.1 Cloth</h5>
</a>The <b><class>Cloth</class></b> class extends <b><parent>Assembly</parent></b>
and inherits all its methods. It is used to simulate a rectangular cloth.
<ul>
  <li><i><com>Cloth</i> <b>Cloth(</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>uCount,</b> <i>number</i> <b>vCount,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>origX,</b> <i>number</i> <b>origY,</b> <i>number</i>
    <b>origZ,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>uGenX,</b> <i>number</i> <b>uGenY,</b> <i>number</i>
    <b>uGenZ,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>vGenX,</b> <i>number</i> <b>vGenY,</b> <i>number</i>
    <b>vGenZ,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>particlesMass,</b> <i>Simulator</i> <b>sim,</b>
    <i>StaticEnvironment</i> <b>environ<br>
    )</com></b>
    <p><descr>creates a cloth given: the number of vertexes per side (<i>uCount</i>
    and <i>vCount</i>); the position of its upper-left corner (<i>orig</i>); two
    directions that generate the sides of the cloth (<i>uGen</i> and <i>vGen</i>);
    the mass of its particles; the simulator that holds the particles of this
    cloth; the environment that specifies some physical properties that the
    particles are subject to.</descr>
    <p>&nbsp;
  <li><i><com>Mesh</i> <i>Cloth</i>:<b>getMesh()</com></b>
    <p><descr>returns the mesh object associated to this cloth.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="staticenvironment">
<h4>3.9.2 StaticEnvironment</h4>
</a>The <b><class>StaticEnvironment</class></b> class extends <b><parent>Void</parent></b>
and specifies some physical properties of the environment and constraints that
the particles are subject to. When no more needed, the object must be explicitly
removed using the <i>delete()</i> function to free the occupied memory.
<ul>
  <li><i><com>StaticEnvironment</i> <b>StaticEnvironment(</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>windX,</b> <i>number</i> <b>windY,</b> <i>number</i>
    <b>windZ,</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>terrainHeight</b> = 0<b>,</b> <i>Obstruction</i>
    <b>obstruction</b> = nil<br>
    <b>)</com></b>
    <p><descr>creates an environment for a cloth given the specified wind
    velocity, terrain height and obstruction.</descr>
    <p>&nbsp;
  <li><i><com>StaticEnvironment</i>:<b>setTerrainFriction(</b><i>boolean</i><b>
    hasFriction)</com></b>
    <p><descr>if the argument is <i>true</i> the terrain of this environment has
    full friction (default state) otherwise is is frictionless.</descr>
    <p>&nbsp;
  <li><i><com>StaticEnvironment</i>:<b>addObstruction(</b><i>Obstruction</i><b>
    obstruction)</com></b>
    <p><descr>adds an <i>obstruction</i> to this environment.</descr>
    <p>&nbsp;
  <li><i><com>StaticEnvironment</i>:<b>removeObstruction(</b><i>Obstruction</i><b>
    obstruction)</com></b>
    <p><descr>removes an <i>obstruction</i> from this environment.</descr>
    <p>&nbsp;
  <li><i><com>StaticEnvironment</i>:<b>setWind(</b><i>number</i> <b>windX,</b> <i>number</i>
    <b>windY,</b> <i>number</i> <b>windZ)</com></b>
    <p><descr>sets the wind velocity for this environment.</descr>
    <p>&nbsp;
  <li><i><com>StaticEnvironment</i>:<b>delete()</com></b>
    <p><descr>deletes the environment from memory.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="obstruction">
<h5>3.9.2.1 Obstruction</h5>
</a>The <b><class>Obstruction</class></b> class extends <b><parent>Void</parent></b>
and is used to define regions of space that particles can't enter. There are
several constructors that create different kinds of obstructions, but all of
them is of type <b>Obstruction</b>: They are <b>SphericalObstruction</b>, <b>CylindricalObstruction</b>,
<b>BoxedObstruction</b>, <b>PrismaticObstruction</b>, <b>PyramidalObstruction</b>,
<b>HeightFieldObstruction</b> and <b>PatchedObstruction</b>.
<ul>
  <li><i><com>Obstruction</i>:<b>setPosition(</b><i>number</i> <b>posX,</b> <i>number</i>
    <b>posY,</b> <i>number</i> <b>posZ)</com></b>
    <p><descr>sets the position of this obstruction.</descr>
    <p>&nbsp;
  <li><i><com>Obstruction</i>:<b>setParticleProjected(</b><i>boolean </i><b>projected</b>
    = true<b>)</com></b>
    <p><descr>if the <i>particleProjected</i> flag is set, every particle that
    enters the obstruction is brought outside along the normal to the surface
    nearest the particle, otherwise it is brought again to its last position.
    The effect corresponds to infinite friction between the particle and the
    obstruction in the latter case, to null friction in the first one.</descr>
    <p>&nbsp;
  <li><i><com>Obstruction</i> <b>SphericalObstruction(</b><i><br>
&nbsp;&nbsp;&nbsp; number</i> <b>posX,</b> <i>number</i> <b>posY,</b> <i>number</i>
    <b>posZ,</b> <i>number</i> <b>radius<br>
    )</com></b>
    <p><descr>creates a spherical obstruction given the position of its center
    and its radius.</descr>
    <p>&nbsp;
  <li><i><com>Obstruction</i> <b>CylindricalObstruction(</b><i><br>
&nbsp;&nbsp;&nbsp; number</i> <b>posX,</b> <i>number</i> <b>posY,</b> <i>number</i>
    <b>posZ,<br>
    </b>&nbsp;&nbsp;&nbsp; <i>number</i> <b>radius,</b> <i>number</i> <b>height<br>
    )</com></b>
    <p><descr>creates a cylindrical obstruction given its position, radius and
    height.</descr>
    <p>&nbsp;
  <li><i><com>Obstruction</i> <b>BoxedObstruction(<br>
&nbsp;&nbsp;&nbsp;&nbsp; </b><i>number</i> <b>posX,</b> <i>number</i> <b>posY,</b>
    <i>number</i> <b>posZ,<br>
    </b>&nbsp;&nbsp;&nbsp; <i>number</i> <b>width,</b> <i>number</i> <b>height,</b>
    <i>number</i> <b>depth<br>
    )</com></b>
    <p><descr>creates an axes aligned boxed obstruction given its position and
    dimension.</descr><br>
    <p>&nbsp;
  <li><i><com>Obstruction</i> <b>PrismaticObstruction(</b><i><br>
&nbsp;&nbsp;&nbsp; number</i> <b>posX,</b> <i>number</i> <b>posY,</b> <i>number</i>
    <b>posZ,<br>
    </b>&nbsp;&nbsp;&nbsp; <i>number</i> <b>ax,</b> <i>number</i> <b>ay,</b> <i>number</i>
    <b>az,<br>
    </b>&nbsp;&nbsp;&nbsp; <i>number</i> <b>bx,</b> <i>number</i> <b>by,</b> <i>number</i>
    <b>bz,<br>
    </b>&nbsp;&nbsp;&nbsp; <i>number</i> <b>cx,</b> <i>number</i> <b>cy,</b> <i>number</i>
    <b>cz<br>
    )</com></b>
    <p><descr>creates a prismatic obstruction given its position and the vectors
    that are perpendicular to its planes (the six vectors are the three given
    and their opposites; the length of the vectors corresponds to the distance
    of the planes from the center of the prism).</descr><br>
    <p>&nbsp;
  <li><i><com>Obstruction</i> <b>PyramidalObstruction(</b><i><br>
&nbsp;&nbsp;&nbsp; number</i> <b>posX,</b> <i>number</i> <b>posY,</b> <i>number</i>
    <b>posZ,<br>
    </b>&nbsp;&nbsp;&nbsp; <i>number</i> <b>ax,</b> <i>number</i> <b>ay,</b> <i>number</i>
    <b>az,<br>
    </b>&nbsp;&nbsp;&nbsp; <i>number</i> <b>bx,</b> <i>number</i> <b>by,</b> <i>number</i>
    <b>bz,<br>
    </b>&nbsp;&nbsp;&nbsp; <i>number</i> <b>cx,</b> <i>number</i> <b>cy,</b> <i>number</i>
    <b>cz,<br>
    </b>&nbsp;&nbsp;&nbsp; <i>number</i> <b>dx,</b> <i>number</i> <b>dy,</b> <i>number</i>
    <b>dz<br>
    )</com></b>
    <p><descr>creates a pyramidal obstruction given its position and the vectors
    that are perpendicular to its four lateral faces (the length of the vectors
    corresponds to the distance of the planes from the center of the pyramid).</descr><br>
    <p>&nbsp;
  <li><i><com>Obstruction</i> <b>HeightFieldObstruction(</b><i>HeightField</i><b>
    heightField, </b><i>number</i><b> offset</b> = 0<b>)</com></b>
    <p><descr>creates an obstruction that corresponds to the shape of the <i>height
    field</i>. An <i>offset</i> parameter may be specified.</descr>
    <p>&nbsp;
  <li><i><com>Obstruction</i> <b>PatchedObstruction(</b><i>Patches</i><b>
    patches, </b><i>number</i><b> offset</b> = 0<b>)</com></b>
    <p><descr>creates an obstruction that corresponds to the shape of the
    terrain (<i>patches</i> style). An <i>offset</i> parameter may be specified.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="zip">
<h3>3.10 Zip</h3>
</a>The <b><class>Zip</class></b> class extends <b><parent>Void</parent></b> and
provides methods to retrieve the data contained in ZIP files.
<ul>
  <li><com><i>Zip</i> <b>Zip(</b><i>string</i> <b>fileName</b>, <i>boolean</i> <b>realZip</b>
    = true<b>)</b></com>
    <p><descr>creates an object associated to the ZIP file with the given name.
    If <i>realZip</i> is true (default), the file name corresponds to a real zip
    file, so the methods of this class read zipped files in the archive. If <i>realZip</i>
    is false, the file name is instead a path in the file system (remember to
    end it with &quot;\\&quot;), so the methods of this class read normal files
    from the directory corresponding to the given path. In the latter case, if
    the path is &quot;&quot; (zero length string) , the files are read from the
    application directory.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Zip</i>:<b>gotoFirstFile()</com></b>
    <p><descr>positions the zipped file pointer at the first file in the list.
    Returns <i>false</i> if no error occurred.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Zip</i>:<b>gotoNextFile()</com></b>
    <p><descr>positions the zipped files pointer at the next file in the list.
    Returns <i>false</i> if no error occurred.</descr>
    <p>&nbsp;
  <li><i><com>string</i> <i>Zip</i>:<b>getZippedFileName()</com></b>
    <p><descr>returns the name of the file at the current position of the zipped
    file pointer.</descr>
    <p>&nbsp;
  <li><i><com>string</i> <i>Zip</i>:<b>getString(</b><i>string</i> <b>imageName)</com></b>
    <p><descr>returns a string reading the file corresponding to <i>imageName</i>
    from this ZIP file.</descr>
    <p>&nbsp;
  <li><i><com>Image</i> <i>Zip</i>:<b>getImage(</b><i>string</i> <b>imageName)</com></b>
    <p><descr>returns an image with the given name extracted from this ZIP file.</descr>
    <p>&nbsp;
  <li><i><com>Texture</i> <i>Zip</i>:<b>getTexture(</b><i>string</i> <b>textureName,</b>
    <i>bool</i> <b>repeat</b> = false<b>,</b> <i>bool</i> <b>doMipmaps</b> =
    true<b>,</b> <i>bool</i> <b>is1D</b> = false<b>)</com></b>
    <p><descr>returns a texture with the given name extracted from this ZIP
    file. The optional <i>repeat</i> parameter specifies if the texture must be
    repeated over a surface: The default value is <b>false</b>. The optional <i>doMipmaps</i>
    parameter requests the generation of texture mipmaps: The default value is <b>true</b>.
    The last parameter specifies the dimensionality of the texture; if set, the
    texture is 1D, otherwise it is 2D.</descr>
    <p>&nbsp;
  <li><i><com>BumpedTexture</i> <i>Zip</i>:<b>getBumpedTexture(</b><i>string</i>
    <b>textureName,</b> <i>bool</i> <b>repeat</b> = false<b>)</com></b>
    <p><descr>returns a bumped texture with the given name extracted from this
    ZIP file. The optional <i>repeat</i> parameter specifies if the texture must
    be repeated over a surface: The default value is <b>false</b>.</descr>
    <p>&nbsp;
  <li><i><com>Texture</i> <i>Zip</i>:<b>getCubeMapTexture(</b><i>table</i> <b>imageNames,</b>
    <i>bool</i> <b>doMipmaps</b> = true<b>)</com></b>
    <p><descr>returns a cube map texture. The elements of the table must be
    strings corresponding to images stored in the ZIP file. The optional <i>doMipmaps</i>
    parameter requests the generation of texture mipmaps: The default value is <b>true</b>.</descr>
    <p>&nbsp;
  <li><i><com>Objects</i> <i>Zip</i>:<b>getMeshes(</b><i>string</i> <b>meshName)</com></b>
    <p><descr>returns a collection of meshes with the given name extracted from
    this ZIP file.</descr>
    <p>&nbsp;
  <li><i><com>Mesh</i> <i>Zip</i>:<b>getMesh(</b><i>string</i> <b>meshName)</com></b>
    <p><descr>returns a mesh with the given name extracted from this ZIP file.</descr>
    <p>&nbsp;
  <li><i><com>Objects</i> <i>Zip</i>:<b>getShaderMeshes(</b><i>string</i> <b>meshName)</com></b>
    <p><descr>returns a collection of meshes (with a <i>shaderShape</i>
    attached) with the given name extracted from this ZIP file.</descr>
    <p>&nbsp;
  <li><i><com>ShaderMesh</i> <i>Zip</i>:<b>getShaderMesh(</b><i>string</i> <b>meshName)</com></b>
    <p><descr>returns a mesh (with a <i>shaderShape</i> attached) with the given
    name extracted from this ZIP file.</descr>
    <p>&nbsp;
  <li><i><com>Objects</i> <i>Zip</i>:<b>getBumpedMeshes(</b><i>string</i> <b>meshName)</com></b>
    <p><descr>returns a collection of bumped meshes with the given name
    extracted from this ZIP file.</descr>
    <p>&nbsp;
  <li><i><com>BumpedMesh</i> <i>Zip</i>:<b>getBumpedMesh(</b><i>string</i> <b>meshName)</com></b>
    <p><descr>returns a bumped mesh with the given name extracted from this ZIP
    file.</descr>
    <p>&nbsp;
  <li><i><com>BasicModel</i> <i>Zip</i>:<b>getMD2Model(</b><i>string</i> <b>modelName,
    <i>string</i> imageName = nil, <i>string</i> alphaName = nil)</com></b>
    <p><descr>returns an animated model in MD2 format with the given name
    extracted from this ZIP file. If an image and an alpha channel are
    specified, they are attached to the model.</descr>
    <p>&nbsp;
  <li><i><com>Model</i> <i>Zip</i>:<b>getMD3Model(</b><i>string</i> <b>modelName</b>,
    <i>string</i> <b>imageName</b> = nil, <i>string</i> <b>alphaName</b> = nil<b>)</com></b>
    <p><descr>returns an animated model in MD3 format with the given name
    extracted from this ZIP file. If the image name and optionally its alpha
    channel are available, a texture derived from the given image is attached to
    the model.</descr>
    <p>&nbsp;
  <li><i><com>AdvancedModel</i> <i>Zip</i>:<b>getCal3DModel(</b><i>string</i> <b>modelName</b>,
    <i>boolean</i> <b>useHardware</b> = false<b>)</com></b>
    <p><descr>returns an animated model in <i>Cal3D</i> format with the given
    name extracted from this ZIP file. If <i>useHardware</i> is <i>true</i>,
    hardware capabilities are used for rendering (but remember that the spring
    system and level of detail are unavailable if this mode is set).</descr>
    <p>&nbsp;
  <li><i><com>BasicModel</i> <i>Zip</i>:<b>getBasicModel(</b><i>string</i> <b>modelName,
    <i>string</i> imageName = nil, <i>string</i> alphaName = nil)</com></b>
    <p><descr>returns an animated model in MD2 format with the given name
    extracted from this ZIP file. If an image and an alpha channel are
    specified, they are attached to the model.</descr>
    <p>&nbsp;
  <li><i><com>Model</i> <i>Zip</i>:<b>getModel(</b><i>string</i> <b>modelName</b>,
    <i>string</i> <b>imageName</b> = nil, <i>string</i> <b>alphaName</b> = nil<b>)</com></b>
    <p><descr>returns an animated model in MD3 format with the given name
    extracted from this ZIP file. If the image name and optionally its alpha
    channel are available, a texture derived from the given image is attached to
    the model.</descr>
    <p>&nbsp;
  <li><i><com>AdvancedModel</i> <i>Zip</i>:<b>getAdvancedModel(</b><i>string</i>
    <b>modelName</b>, <i>boolean</i> <b>useHardware</b> = false<b>)</com></b>
    <p><descr>returns an animated model in <i>Cal3D</i> format with the given
    name extracted from this ZIP file. If <i>useHardware</i> is <i>true</i>,
    hardware capabilities are used for rendering (but remember that the spring
    system and level of detail are unavailable if this mode is set).</descr>
    <p>&nbsp;
  <li><i><com>Bot</i> <i>Zip</i>:<b>getBot(</b><i>string</i> <b>botName</b>, <i>boolean</i>
    <b>ownsCache</b> = false)</com>
    <p><descr>returns the complete model of a bot (collection of animated models
    that represents a character) with the given name extracted from this ZIP
    file. If <i>ownsCache</i> is <i>true</i> the model uses its own cache for
    rendering purposes, otherwise shares a common cache with all the other
    models in the scene.</descr>
    <p>&nbsp;
  <li><i><com>Bsp</i> <i>Zip</i>:<b>getLevel(</b><i>string</i> <b>levelName,</b>
    <i>number</i> <b>gammaCorrection</b> = 1<b>)</com></b>
    <p><descr>returns the complete level in a BSP file with the given name
    extracted from this ZIP file. A gamma correction for the scene may be
    specified (1 is no gamma correction for default).</descr>
    <p>&nbsp;
  <li><i><com>Sample</i> <i>Zip</i>:<b>getSample(</b><i>string</i> <b>sampleName)</com></b>
    <p><descr>returns a sound sample with the given name extracted from this ZIP
    file.</descr>
    <p>&nbsp;
  <li><i><com>Sample3D</i> <i>Zip</i>:<b>getSample3D(</b><i>string</i> <b>sampleName)</com></b>
    <p><descr>returns a 3d sound sample with the given name extracted from this
    ZIP file.</descr>
    <p>&nbsp;
  <li><i><com>Music</i> <i>Zip</i>:<b>getMusic(</b><i>string</i> <b>musicName)</com></b>
    <p><descr>returns a midi music with the given name extracted from this ZIP file.</descr>
    <p>&nbsp;
  <li><i><com>Music</i> <i>Zip</i>:<b>getMidiMusic(</b><i>string</i> <b>musicName)</com></b>
    <p><descr>the same as above.</descr>
    <p>&nbsp;
  <li><i><com>Zip</i>:<b>delete()</com></b>
    <p><descr>deletes the object from memory.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="newzip">
<h3>3.10.1 NewZip</h3>
</a>The <b><class>NewZip</class></b> class provides methods to write data in ZIP
files.
<ul>
  <li><com><i>NewZip</i> <b>NewZip(</b><i>string</i> <b>fileName</b><b>)</b></com>
    <p><descr>creates a ZIP file with the given name.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>NewZip</i>:<b>openFile(</b><i>string</i> <b>fileName</b><b>)</com></b>
    <p><descr>creates a file in the current ZIP file. Return true on success.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>NewZip</i>:<b>writeInFile(</b><i>string</i> <b>data</b><b>)</com></b>
    <p><descr>writes data in the opened file of the current ZIP file. Returns
    true on success.</descr>
    <p>&nbsp;
  <li><i><com>NewZip</i>:<b>delete()</com></b>
    <p><descr>deletes the reference from memory and closes the ZIP file.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="socket">
<h3>3.11 Socket</h3>
</a>The <b><class>Socket</class></b> class extends <b><parent>Void</parent></b>
and provides a mechanism to access net resources. When no more needed, the
socket may be explicitly removed using the <i>delete()</i> function to free the
occupied memory. Explicit constructors of <b>Socket</b> objects are provided by
the derived classes <b>SocketStream</b><i>, </i>that uses the TCP protocol, and <b>SocketDatagram</b>,
that uses the UDP protocol.<br>
The following piece of code, with obvious meaning, is a sample of use:
<pre>
  local host = Host(&quot;192.168.1.1&quot;)
  local socket = SocketStream(1000)
  if socket:connect(host) then
    while 1 do
      if socket:waitForEvent(1000) then
        if socket:isReadEvent() then
          if socket:receive() then
            print(socket:getBuffer())
          else
            break
          end
        elseif socket:isConnectEvent() then
          socket:getFile(&quot;index.php&quot;)
        elseif socket:isCloseEvent() then
          break
          end
        end
      end
    end
    socket:disconnect()
  end
</pre>
<p>These are its methods:</p>
<ul>
  <li><i><com>Socket</i>:<b>delete()</com></b>
    <p><descr>deletes the socket.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Socket</i>:<b>connect(</b><i>Host</i> <b>host</b>, <i>number</i>
    <b>port</b> = 80<b>)</com></b>
    <p><descr>connects the socket to the given host and port. Returns <i>nil</i>
    on failure.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Socket</i>:<b>listen(</b><i>number</i> <b>port</b>
    = 80<b>)</com></b>
    <p><descr>listens the given port for incoming connections. It must be used
    in alternative to connect when this socket is a server waiting for client
    connections. If listen is successful, a call to <i>accept()</i> must follow
    to get a socket for the client. Returns <i>nil</i> on error.</descr>
    <p>&nbsp;
  <li><i><com>Socket</i> <i>Socket</i>:<b>accept(</b><i>number</i> <b>bufferLen</b>
    = 1024<b>)</com></b>
    <p><descr>accepts a connection when the socket is listening to a port for
    incoming clients. It must be used after a <i>listen()</i> call. If no client
    asks to connect, returns <i>nil</i>.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Socket</i>:<b>disconnect()</com></b>
    <p><descr>disconnects the socket. Returns <i>nil</i> on failure.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Socket</i>:<b>waitForEvent(</b><i>number</i> <b>timeOut</b>
    = 0<b>)</com></b>
    <p><descr>the socket waits for an event for the specified number of
    milliseconds. Returns <i>nil</i> on failure.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Socket</i>:<b>isConnectEvent()</com></b>
    <p><descr>returns <i>nil</i> if the event is not a <b>connect</b> event.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Socket</i>:<b>isReadEvent()</com></b>
    <p><descr>returns <i>nil</i> if the event is not a <b>read</b> event.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Socket</i>:<b>isWriteEvent()</com></b>
    <p><descr>returns <i>nil</i> if the event is not a <b>write</b> event.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Socket</i>:<b>isCloseEvent()</com></b>
    <p><descr>returns <i>nil</i> if the event is not a <b>close</b> event.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Socket</i>:<b>getFile(</b><i>string</i> <b>fileName)</com></b>
    <p><descr>the socket requests the given file name to the host. Returns <i>nil</i>
    on failure.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Socket</i>:<b>receive()</com></b>
    <p><descr>the socket receives data from the host in the buffer. Returns <i>nil</i>
    on failure.</descr>
    <p>&nbsp;
  <li><i><com>string</i> <i>Socket</i>:<b>getBuffer()</com></b>
    <p><descr>retrieves the read data from the buffer and copies it in a string.
    Returns <i>nil</i> on failure.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="socketstream">
<h4>3.11.0 SocketStream</h4>
</a>The <b><class>SocketStream</class></b>class extends <b><parent>Socket</parent></b>
and inherits all its methods. It provides and explicit constructor to create a
socket that uses the TCP protocol.
<ul>
  <li><i><com>Socket</i> <b>SocketStream(</b><i>number</i> <b>bufferLen</b> =
    1024<b>)</com></b>
    <p><descr>creates a socket with the given buffer size. The protocol used is
    TCP.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="socketdatagram">
<h4>3.11.1 SocketDatagram</h4>
</a>The <b><class>SocketDatagram </class></b> class extends <b><parent>Socket</parent></b>
and inherits all its methods. It provides and explicit constructor to create a
socket that uses the UDP protocol.
<ul>
  <li><i><com>Socket</i> <b>SocketDatagram(</b><i>number</i> <b>bufferLen</b> =
    1024<b>)</com></b>
    <p><descr>creates a socket with the given buffer size. The protocol used is
    UDP.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<a name="host">
<h4>3.11.2 Host</h4>
</a>The <b><class>Host</class></b> class extends <b><parent>Void</parent></b>
and represents a net host from which data may be retrieved through the use of
sockets.<br>
<ul>
  <li><i><com>Host</i> <b>Host(</b><i>string</i> <b>hostName)</com></b>
    <p><descr>creates a host with the given name.</descr>
    <p>&nbsp;
  <li><i><com>Host</i>:<b>delete()</com></b>
    <p><descr>deletes the host.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="odeworld">
<h3>3.12 OdeWorld</h3>
</a>ODE (<i>Open Dynamics Engine 0.5 - Copyright © 2001,2002 Russell L. Smith</i>)
is a physics engine suitable for the simulation of rigid bodies with joints and
collision detection.<br>
The <b><class>OdeWorld</class></b> class is a container for rigid body and
joints.<br>
When no more needed, the world must be explicitly removed using the <i>delete()</i>
function to free the occupied memory.
<ul>
  <li><b><com>OdeClose()</com></b>
    <p><descr>deallocates all the memory occupied by the physics engine when it
    is no more needed.</descr>
    <p>&nbsp;
  <li><i><com>OdeWorld</i> <b>OdeWorld()</com></b>
    <p><descr>creates a world.</descr>
    <p>&nbsp;
  <li><i><com>OdeWorld</i>:<b>delete()</com></b>
    <p><descr>deletes the world. This function must be explicitly called to
    release the world.</descr>
    <p>&nbsp;
  <li><i><com>OdeWorld</i>:<b>setGravity(</b><i>number</i> <b>x</b>, <i>number</i>
    <b>y</b>, <i>number</i> <b>z)</com></b>
    <p><descr>sets the world global gravity vector. The units are m/s/s so earth
    gravity is (0,-9.81,0) assuming y up. The default is no gravity (0,0,0).</descr>
    <p>&nbsp;
  <li><i><com>OdeWorld</i>:<b>setERP(</b><i>number</i> <b>erp)</com></b>
    <p><descr>sets the global ERP value that controls how much correction is
    performed each time step. Typical values are in the range 0.1-0.8. The
    default is 0.2.</descr>
    <p>&nbsp;
  <li><i><com>OdeWorld</i>:<b>setCFM(</b><i>number</i> <b>cfm)</com></b>
    <p><descr>sets the global CFM (constraint force mixing) value. Typical
    values are in the range 10<sup>-10</sup>-1. The default is 10<sup>-10</sup>.</descr>
    <p>&nbsp;
  <li><i><com>OdeWorld</i>:<b>setAutoDisableFlag(</b><i>boolean</i> <b>flag)</com></b><br>
    <i><com>OdeWorld</i>:<b>setAutoDisableLinearThreshold(</b><i>number</i> <b>linearThreshold)</com></b><br>
    <i><com>OdeWorld</i>:<b>setAutoDisableAngularThreshold(</b><i>number</i> <b>angularThreshold)</com></b><br>
    <i><com>OdeWorld</i>:<b>setAutoDisableSteps(</b><i>number</i> <b>steps)</com></b><br>
    <i><com>OdeWorld</i>:<b>setAutoDisableTime(</b><i>number</i> <b>time)</com></com></b>
    <p><descr>sets the auto disable parameters (the simulation is stopped for
    bodies with values below the given thresholds if the flag is true). The
    default values are: flag = false; linear threshold = 0.01; angular threshold
    = 0.01; steps = 10; time = 0.</descr>
    <p>&nbsp;
  <li><i><com>OdeWorld</i>:<b>step(</b><i>number</i> <b>stepSize)</com></b>
    <p><descr>steps the world. This method is very accurate but needs a lot of
    memory and can be slow.</descr>
    <p>&nbsp;
  <li><i><com>OdeWorld</i>:<b>quickStep(</b><i>number</i> <b>stepSize)</com></b>
    <p><descr>steps the world. This uses an iterative method that is less
    accurate than <i>step()</i>, but a lot faster for large systems.</descr>
    <p>&nbsp;
  <li><i><com>OdeWorld</i>:<b>setContactMaxCorrectiongVel(</b><i>number</i> <b>vel)</com></b>
    <p><descr>sets the maximum correcting velocity that contacts are allowed to
    generate. The default value is infinity.</descr>
    <p>&nbsp;
  <li><i><com>OdeWorld</i>:<b>setContactSurfaceLayer(</b><i>number</i> <b>depth)</com></b>
    <p><descr>sets the depth of the surface around all geometry objects. The
    default value is zero.</descr>
    <p>&nbsp;
  <li><i><com>OdeBody</i> <i>OdeWorld</i>:<b>createBody()</com></b>
    <p><descr>creates a rigid body with default values in this world.</descr>
    <p>&nbsp;
  <li><i><com>OdeSocket</i> <i>OdeWorld</i>:<b>createSocket(</b><i>OdeJointGroup</i>
    <b>group</b> = nil<b>)</com></b>
    <p><descr>creates a ball-and-socket joint and add it to the given joint
    group if specified.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge</i> <i>OdeWorld</i>:<b>createHinge(</b><i>OdeJointGroup</i>
    <b>group</b> = nil<b>)</com></b>
    <p><descr>creates a hinge joint and add it to the given joint group if
    specified.</descr>
    <p>&nbsp;
  <li><i><com>OdeSlider</i> <i>OdeWorld</i>:<b>createSlider(</b><i>OdeJointGroup</i>
    <b>group</b> = nil<b>)</com></b>
    <p><descr>creates a slider joint and add it to the given joint group if
    specified.</descr>
    <p>&nbsp;
  <li><i><com>OdeWorld</i>:<b>createContacts(</b><i>OdeContactsInfo</i> <b>info</b>,
    <i>OdeJointGroup</i> <b>group)</com></b>
    <p><descr>creates contact joints and add them to the given joint group.</descr>
    <p>&nbsp;
  <li><i><com>OdeUniversal</i> <i>OdeWorld</i>:<b>createUniversal(</b><i>OdeJointGroup</i>
    <b>group</b> = nil<b>)</com></b>
    <p><descr>creates an universal joint and add it to the given joint group if
    specified.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge2</i> <i>OdeWorld</i>:<b>createHinge2(</b><i>OdeJointGroup</i>
    <b>group</b> = nil<b>)</com></b>
    <p><descr>creates a hinge of the second type joint and add it to the given
    joint group if specified.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i> <i>OdeWorld</i>:<b>createMotor(</b><i>OdeJointGroup</i>
    <b>group</b> = nil<b>)</com></b>
    <p><descr>creates an angular motor joint and add it to the given joint group
    if specified.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="odebody">
<h4>3.12.1 OdeBody</h4>
</a>The <b><class>OdeBody</class></b> class represents a rigid body attached to
a particular world.<br>
When no more needed, the body must be explicitly removed using the <i>delete()</i>
function to free the occupied memory.
<ul>
  <li><i><com>OdeBody</i>:<b>delete()</com></b>
    <p><descr>deletes the body. This function must be explicitly called to
    release the body.</descr>
    <p>&nbsp;
  <li><i><com>OdeBody</i>:<b>setPosition(</b><i>number</i> <b>x</b>, <i>number</i>
    <b>y</b>, <i>number</i> <b>z)</com></b><br>
    <i><com>OdeBody</i>:<b>setRotation(</b><i>Transform</i> <b>mat)</com></b><br>
    <i><com>OdeBody</i>:<b>setLinearVel(</b><i>number</i> <b>x</b>, <i>number</i> <b>y</b>,
    <i>number</i> <b>z)</com></b><br>
    <i><com>OdeBody</i>:<b>setAngularVel(</b><i>number</i> <b>x</b>, <i>number</i> <b>y</b>,
    <i>number</i> <b>z)</com></b>
    <p><descr>sets the position, rotation (taken from the rotation of a <i>Transform</i>
    object), linear and angular velocity of the body.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>OdeBody</i>:<b>getPosition()</com></b><br>
    <i><com>OdeBody</i>:<b>getTransform(</b><i>Transform</i> <b>mat)</b><br>
    <i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>OdeBody</i>:<b>getLinearVel()</com></b><br>
    <i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>OdeBody</i>:<b>getAngularVel()</com></b>
    <p><descr>returns the position, transform (stores the translation and
    rotation matrix in a <i>Transform</i> object), linear and angular velocity
    of the body.</descr>
    <p>&nbsp;
  <li><i><com>OdeBody</i>:<b>getMass(</b><i>OdeMass</i> <b>mass)</com></b>
    <p><descr>copies the mass properties of the body in the <i>mass</i> object.</descr>
    <p>&nbsp;
  <li><i><com>OdeBody</i>:<b>setMass(</b><i>OdeMass</i> <b>mass)</com></b>
    <p><descr>copies the mass properties of the <i>mass</i> object in the body.</descr>
    <p>&nbsp;
  <li><i><com>OdeBody</i>:<b>addForce(</b><i>number</i> <b>fx</b>, <i>number</i>
    <b>fy</b>, <i>number</i> <b>fz)</com></b><br>
    <i><com>OdeBody</i>:<b>addTorque(</b><i>number</i> <b>tx</b>, <i>number</i> <b>ty</b>,
    <i>number</i> <b>tz)</com></b><br>
    <i><com>OdeBody</i>:<b>addRelForce(</b><i>number</i> <b>fx</b>, <i>number</i> <b>fy</b>,
    <i>number</i> <b>fz)</com></b><br>
    <i><com>OdeBody</i>:<b>addRelTorque(</b><i>number</i> <b>tx</b>, <i>number</i> <b>ty</b>,
    <i>number</i> <b>tz)</com></b><br>
    <i><com>OdeBody</i>:<b>addForceAtPos(</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>fx</b>, <i>number</i> <b>fy</b>, <i>number</i>
    <b>fz</b>,<br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>px</b>, <i>number</i> <b>py</b>, <i>number</i>
    <b>pz)</com></b><br>
    <i><com>OdeBody</i>:<b>addForceAtRelPos(</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>fx</b>, <i>number</i> <b>fy</b>, <i>number</i>
    <b>fz</b>,<br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>px</b>, <i>number</i> <b>py</b>, <i>number</i>
    <b>pz)</com></b><br>
    <i><com>OdeBody</i>:<b>addRelForceAtPos(</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>fx</b>, <i>number</i> <b>fy</b>, <i>number</i>
    <b>fz</b>,<br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>px</b>, <i>number</i> <b>py</b>, <i>number</i>
    <b>pz)</com></b><br>
    <i><com>OdeBody</i>:<b>addRelForceAtRelPos(</b><br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>fx</b>, <i>number</i> <b>fy</b>, <i>number</i>
    <b>fz</b>,<br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>px</b>, <i>number</i> <b>py</b>, <i>number</i>
    <b>pz)</com></b>
    <p><descr>accumulates the given forces or torques applied to the body. The
    different functions can also apply the forces to a given position (<i>AtPos</i>)
    and the specified values can be given in the relative reference frame of the
    body (<i>Rel</i>).</descr>
    <p>&nbsp;
  <li><i><com>number</i> rx, <i>number</i> ry, <i>number</i> rz = <i>OdeBody</i>:<b>getRelPointPos(</b><i>number</i>
    <b>px</b>, <i>number</i> <b>py</b>, <i>number</i> <b>pz)</com></b><br>
    <i><com>number</i> rx, <i>number</i> ry, <i>number</i> rz = <i>OdeBody</i>:<b>getRelPointVel(</b><i>number</i>
    <b>px</b>, <i>number</i> <b>py</b>, <i>number</i> <b>pz)</com></b><br>
    <i><com>number</i> rx, <i>number</i> ry, <i>number</i> rz = <i>OdeBody</i>:<b>getPointVel(</b><i>number</i>
    <b>px</b>, <i>number</i> <b>py</b>, <i>number</i> <b>pz)</com></b><br>
    <i><com>number</i> rx, <i>number</i> ry, <i>number</i> rz = <i>OdeBody</i>:<b>getPosRelPoint(</b><i>number</i>
    <b>px</b>, <i>number</i> <b>py</b>, <i>number</i> <b>pz)</com></b><br>
    <i><com>number</i> rx, <i>number</i> ry, <i>number</i> rz = <i>OdeBody</i>:<b>getVectorToWorld(</b><i>number</i>
    <b>px</b>, <i>number</i> <b>py</b>, <i>number</i> <b>pz)</com></b><br>
    <i><com>number</i> rx, <i>number</i> ry, <i>number</i> rz = <i>OdeBody</i>:<b>getVectorFromWorld(</b><i>number</i>
    <b>px</b>, <i>number</i> <b>py</b>, <i>number</i> <b>pz)</com></b>
    <p><descr>the first three functions returns the coordinates of the given
    point on a body (<i>Rel</i> if point is given in body relative coordinates)
    and returns that point's position or velocity in global coordinates.<br>
    The fourth function takes a point in global coordinates and returns the
    point's position in body relative coordinates.<br>
    The last two functions, given a vector expressed in the body (or world)
    coordinates, rotate it to the world (or body) coordinate system.</descr>
    <p>&nbsp;
  <li><i><com>OdeBody</i>:<b>setEnabled(</b><i>boolean</i> <b>enabled</b> = true<b>)</com></b>
    <p><descr>enables or disables a body manually. The body is automatically
    re-enabled if it is connected through a joint to an enabled body.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>OdeBody</i>:<b>isEnabled()</com></b>
    <p><descr>return true if the body is enabled, false otherwise.</descr>
    <p>&nbsp;
  <li><i><com>OdeBody</i>:<b>setAutoDisableFlag(</b><i>boolean</i> <b>flag)</com></b><br>
    <i><com>OdeBody</i>:<b>setAutoDisableLinearThreshold(</b><i>number</i> <b>linearThreshold)</com></b><br>
    <i><com>OdeBody</i>:<b>setAutoDisableAngularThreshold(</b><i>number</i> <b>angularThreshold)</com></b><br>
    <i><com>OdeBody</i>:<b>setAutoDisableSteps(</b><i>number</i> <b>steps)</com></b><br>
    <i><com>OdeBody</i>:<b>setAutoDisableTime(</b><i>number</i> <b>time)</com></b>
    <p><descr>sets the auto disable parameters of the body (the simulation is
    stopped for bodies with values below the given thresholds if the flag is
    true). The default values are: flag = false; linear threshold = 0.01;
    angular threshold = 0.01; steps = 10; time = 0.</descr>
    <p>&nbsp;
  <li><i><com>OdeBody</i>:<b>setFiniteRotationMode(</b><i>boolean</i> <b>mode)</com></b>
    <p><descr>sets the rotation mode for the object. If false (default) the
    rotation is infinitesimal, if true it is finite. The latter is good when
    angular velocity is high.</descr>
    <p>&nbsp;
  <li><i><com>OdeBody</i>:<b>setFiniteRotationAxis(</b><i>number</i> <b>x</b>, <i>number</i>
    <b>y</b>, <i>number</i> <b>z)</com></b>
    <p><descr>sets the direction of the finite rotation. If (0,0,0) full finite
    rotations are performed, otherwise partial finite rotations followed by an
    infinitesimal rotation. The latter is good for wheels.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>OdeBody</i>:<b>getJointsCount()</com></b>
    <p><descr>returns the number of joints in this body.</descr>
    <p>&nbsp;
  <li><i><com>OdeJoint</i> <i>OdeBody</i>:<b>getJoint(</b><i>number</i> <b>index)</com></b>
    <p><descr>returns the joint corresponding to the index.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>OdeBody</i>:<b>isConnectedTo(</b><i>OdeBody</i> <b>other)</com></b>
    <p><descr>returns true if the body is connected to the other with a joint.</descr>
    <p>&nbsp;
  <li><i><com>OdeBody</i>:<b>setGravityMode(</b><i>boolean</i> <b>mode)</com></b>
    <p><descr>sets whether the body is influenced by gravity (true by default).</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="odemass">
<h4>3.12.1.1 OdeMass</h4>
</a>The <b><class>OdeMass</class></b> class represents the mass properties
(mass, center of gravity and inertia matrix) of a rigid body.
<ul>
  <li><i><com>OdeMass</i> <b>OdeMass()</com></b>
    <p><descr>creates a <i>mass</i> object.</descr>
  <li><i><com>OdeMass</i>:<b>delete()</com></b>
    <p><descr>deletes the <i>mass</i> object.</descr>
    <p>&nbsp;
  <li><i><com>OdeMass</i>:<b>setParameters(</b><i>number</i> <b>mass</b>,<br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>cgX</b>, <i>number</i> <b>cgY</b>, <i>number</i>
    <b>cgZ</b>,<br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>I11</b>, <i>number</i> <b>I22</b>, <i>number</i>
    <b>I33</b>,<br>
&nbsp;&nbsp;&nbsp;<i>number</i> <b>I12</b>, <i>number</i> <b>I13</b>, <i>number</i>
    <b>I23)</com></b>
    <p><descr>sets the mass parameters: <i>mass</i> is the total mass; <i>cgX</i>
    is the center of gravity; <i>IXX</i> is the inertia matrix.</descr>
    <p>&nbsp;
  <li><i><com>OdeMass</i>:<b>setSphere(</b><i>number</i> <b>mass</b>, <i>number</i>
    <b>radius)</com></b>
    <p><descr>sets the mass parameters to represent a sphere with the given
    radius and mass.</descr>
    <p>&nbsp;
  <li><i><com>OdeMass</i>:<b>setCappedCylinder(</b><i>number</i> <b>mass</b>, <i>number</i>
    <b>direction</b>, <i>number</i> <b>radius</b>, <i>number</i> <b>length)</com></b>
    <p><descr>sets the mass parameters to represent a capped cylinder (a
    cylinder with one spherical cap at both ends) with the given mass, radius
    and length. The <i>direction</i> parameter is 1 for the x axis, 2 for the y
    axis and 3 for the z axis.</descr>
    <p>&nbsp;
  <li><i><com>OdeMass</i>:<b>setCylinder(</b><i>number</i> <b>mass</b>, <i>number</i>
    <b>direction</b>, <i>number</i> <b>radius</b>, <i>number</i> <b>length)</com></b>
    <p><descr>sets the mass parameters to represent a cylinder with the given
    mass, radius and length. The <i>direction</i> parameter is 1 for the x axis,
    2 for the y axis and 3 for the z axis.</descr>
    <p>&nbsp;
  <li><i><com>OdeMass</i>:<b>setBox(</b><i>number</i> <b>mass</b>, <i>number</i>
    <b>lx</b>, <i>number</i> <b>ly</b>, <i>number</i> <b>lz)</com></b>
    <p><descr>sets the mass parameters to represent a box with the given length
    along the three axes.</descr>
    <p>&nbsp;
  <li><i><com>OdeMass</i>:<b>adjust(</b><i>number</i> <b>newMass)</com></b>
    <p><descr>sets the mass to the new value.</descr>
    <p>&nbsp;
  <li><i><com>OdeMass</i>:<b>translate(</b><i>number</i> <b>x</b>, <i>number</i>
    <b>y</b>, <i>number</i> <b>z)</com></b>
    <p><descr>adjusts the mass parameters to represent an object translated by
    the given amount relative to the body frame.</descr>
    <p>&nbsp;
  <li><i><com>OdeMass</i>:<b>rotate(</b><i>Transform</i> <b>mat)</com></b>
    <p><descr>adjusts the mass parameters to represent an object rotated
    according to the rotation of the given transform.</descr>
    <p>&nbsp;
  <li><i><com>OdeMass</i>:<b>add(</b><i>OdeMass</i> <b>otherMass)</com></b>
    <p><descr>adds the given mass to the current mass.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="odejoint">
<h4>3.12.2 OdeJoint</h4>
</a>The <b><class>OdeJoint</class></b> class represents the generic joint from
which all the others are derived.
<ul>
  <li><i><com>OdeJoint</i>:<b>delete()</com></b>
    <p><descr>deletes the joint and the attached bodies are disconnected. This
    function has no effect if the joint belongs to a joint group.</descr>
    <p>&nbsp;
  <li><i><com>OdeJoint</i>:<b>attach(</b><i>OdeBody</i> <b>body</b>, <i>OdeBody</i>
    <b>other)</com></b>
    <p><descr>attaches two bodies through this joint. If the joint was already
    attached to bodies, it is detached first. A <i>nil</i> body refers to the
    static environment. If both bodies are <i>nil</i> the joint has no effect on
    the simulation.</descr>
    <p>&nbsp;
  <li><i><com>OdeBody</i> <i>OdeJoint</i>:<b>getBody(</b><i>number</i> <b>index)</com></b>
    <p><descr>returns first or second body attached to the joint. Returns <i>nil</i>
    when no body fills the specified index.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>OdeJoint</i>:<b>getType()</com></b>
    <p><descr>returns the type pf this joint (unknown = 0, socket = 1, hinge =
    2, slider = 3, contact = 4, universal = 5, hinge2 = 6, fixed = 7, null = 8,
    motor = 9).</descr>
    <p>&nbsp;
  <li><com><i>OdeJoint</i>:<b>setBreakable(</b><i>boolean</i> <b>breakable</b> =
    true<b>)</b></com>
    <p><descr>specifies if the joint is breakable or not. This function is an
    third-party addition to original ODE code.</descr>
    <p>&nbsp;
  <li><com><i>OdeJoint</i>:<b>setBreakForce(</b><i>number</i> <b>fx</b>, <i>number</i>
    <b>fy</b>, <i>number</i> <b>fz</b><b>)</b></com>
    <p><descr>specifies the maximum force that the joint can sustain without
    breaking (the force is given in the first body reference frame; it is
    directed in the opposite verse in the second body reference frame).</descr>
    <p>&nbsp;
  <li><com><i>OdeJoint</i>:<b>setBreakTorque(</b><i>number</i> <b>tx</b>, <i>number</i>
    <b>ty</b>, <i>number</i> <b>tz</b><b>)</b></com>
    <p><descr>specifies the maximum torque that the joint can sustain without
    breaking (the torque is given in the first body reference frame; it is
    directed in the opposite verse in the second body reference frame).</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="odesocket">
<h5>3.12.2.1 OdeSocket</h5>
</a>The <b><class>OdeSocket</class></b> class extends <i><parent>OdeJoint</parent></i> and
inherits all its methods. It represents a ball-and-socket joint.
<ul>
  <li><i><com>OdeSocket</i>:<b>setAnchor(</b><i>number</i> <b>x</b>, <i>number</i>
    <b>y</b>, <i>number</i> <b>z)</com></b>
    <p><descr>sets the anchor to the given point in world coordinates.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>OdeSocket</i>:<b>getAnchor()</com></b>
    <p><descr>returns the anchor position in world coordinates.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>OdeSocket</i>:<b>getAnchor2()</com></b>
    <p><descr>returns the anchor position (on the second body) in world coordinates.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="odehinge">
<h5>3.12.2.2 OdeHinge</h5>
</a>The <b><class>OdeHinge</class></b> class extends <i><parent>OdeJoint</parent></i> and
inherits all its methods. It represents a hinge.
<ul>
  <li><i><com>OdeHinge</i>:<b>setAnchor(</b><i>number</i> <b>x</b>, <i>number</i>
    <b>y</b>, <i>number</i> <b>z)</com></b>
    <p><descr>sets the anchor to the given point in world coordinates.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge</i>:<b>setAxis(</b><i>number</i> <b>x</b>, <i>number</i> <b>y</b>,
    <i>number</i> <b>z)</com></b>
    <p><descr>sets the axis to the given direction in world coordinates.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>OdeHinge</i>:<b>getAnchor()</com></b>
    <p><descr>returns the anchor position in world coordinates.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>OdeHinge</i>:<b>getAnchor2()</com></b>
    <p><descr>returns the anchor position (on the second body) in world coordinates.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>OdeHinge</i>:<b>getAxis()</com></b>
    <p><descr>returns the axis direction in world coordinates.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>OdeHinge</i>:<b>getAngle()</com></b>
    <p><descr>returns the angle of rotation around the axis direction.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>OdeHinge</i>:<b>getAngleRate()</com></b>
    <p><descr>returns the angulat velocity around the axis direction.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge</i>:<b>setLowStop(</b><i>number</i> <b>loStop)</com></b>
    <p><descr>sets the low stop angle. Set this to <i>nil</i> to remove any
    limit. It must be greater than <i>-pi</i> to be effective.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge</i>:<b>setHighStop(</b><i>number</i> <b>hiStop)</com></b>
    <p><descr>sets the high stop angle. Set this to <i>nil</i> to remove any
    limit. It must be lower than <i>pi</i> to be effective.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge</i>:<b>setSpeed(</b><i>number</i> <b>speed)</com></b>
    <p><descr>sets the angular speed of the motor.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge</i>:<b>setMaxTorque(</b><i>number</i> <b>max)</com></b>
    <p><descr>sets the maximum torque that the motor will use to achieve the
    desired speed. It must be positive or null. If null the motor is turned off.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge</i>:<b>setFudgeFactor(</b><i>number</i> <b>factor)</com></b>
    <p><descr>sets the fudge factor. It should have a value between zero and
    one. Useful to reduce the effect of &quot;jumpiness&quot; caused by a force
    excess when stops are reached.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge</i>:<b>setBounce(</b><i>number</i> <b>bounce)</com></b>
    <p><descr>sets the restitution parameter. In the range zero to one, zero
    means that the stops are not bouncy at all, while one means maximum
    bounciness.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge</i>:<b>setCFM(</b><i>number</i> <b>cfm)</com></b>
    <p><descr>sets the constraint force mixing value used when not at stop.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge</i>:<b>setStopERP(</b><i>number</i> <b>erp)</com></b>
    <p><descr>sets the error reduction parameter used by the stops.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge</i>:<b>setStopCFM(</b><i>number</i> <b>cfm)</com></b>
    <p><descr>sets the constraint force mixing value used by the stops.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge</i>:<b>addTorque(</b><i>number</i> <b>torque)</com></b>
    <p><descr>applies a torque to the hinge.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="odeslider">
<h5>3.12.2.3 OdeSlider</h5>
</a>The <b><class>OdeSlider</class></b> class extends <i><parent>OdeJoint</parent></i> and
inherits all its methods. It represents a slider joint.
<ul>
  <p>&nbsp;
  <li><i><com>OdeSlider</i>:<b>setAxis(</b><i>number</i> <b>x</b>, <i>number</i>
    <b>y</b>, <i>number</i> <b>z)</com></b>
    <p><descr>sets the axis to the given direction in world coordinates.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>OdeSlider</i>:<b>getAxis()</com></b>
    <p><descr>returns the axis direction in world coordinates.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>OdeSlider</i>:<b>getLength()</com></b>
    <p><descr>returns the slider extension.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>OdeSlider</i>:<b>getLengthRate()</com></b>
    <p><descr>returns the slider extension velocity.</descr>
    <p>&nbsp;
  <li><i><com>OdeSlider</i>:<b>setLowStop(</b><i>number</i> <b>loStop)</com></b>
    <p><descr>sets the low stop length. Set this to <i>nil</i> to remove any
    limit.</descr>
    <p>&nbsp;
  <li><i><com>OdeSlider</i>:<b>setHighStop(</b><i>number</i> <b>hiStop)</com></b>
    <p><descr>sets the high stop length. Set this to <i>nil</i> to remove any
    limit.</descr>
    <p>&nbsp;
  <li><i><com>OdeSlider</i>:<b>setSpeed(</b><i>number</i> <b>speed)</com></b>
    <p><descr>sets the linear speed of the motor.</descr>
    <p>&nbsp;
  <li><i><com>OdeSlider</i>:<b>setMaxForce(</b><i>number</i> <b>max)</com></b>
    <p><descr>sets the maximum force that the motor will use to achieve the
    desired speed. It must be positive or null. If null the motor is turned off.</descr>
    <p>&nbsp;
  <li><i><com>OdeSlider</i>:<b>setFudgeFactor(</b><i>number</i> <b>factor)</com></b>
    <p><descr>sets the fudge factor. It should have a value between zero and
    one. Useful to reduce the effect of &quot;jumpiness&quot; caused by a force
    excess when stops are reached.</descr>
    <p>&nbsp;
  <li><i><com>OdeSlider</i>:<b>setBounce(</b><i>number</i> <b>bounce)</com></b>
    <p><descr>sets the restitution parameter. In the range zero to one, zero
    means that the stops are not bouncy at all, while one means maximum
    bounciness.</descr>
    <p>&nbsp;
  <li><i><com>OdeSlider</i>:<b>setCFM(</b><i>number</i> <b>cfm)</com></b>
    <p><descr>sets the constraint force mixing value used when not at stop.</descr>
    <p>&nbsp;
  <li><i><com>OdeSlider</i>:<b>setStopERP(</b><i>number</i> <b>erp)</com></b>
    <p><descr>sets the error reduction parameter used by the stops.</descr>
    <p>&nbsp;
  <li><i><com>OdeSlider</i>:<b>setStopCFM(</b><i>number</i> <b>cfm)</com></b>
    <p><descr>sets the constraint force mixing value used by the stops.</descr>
    <p>&nbsp;
  <li><i><com>OdeSlider</i>:<b>addForce(</b><i>number</i> <b>force)</com></b>
    <p><descr>applies a force to the slider.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="odecontactsinfo">
<h5>3.12.2.4 OdeContactsInfo</h5>
</a>The <b><class>OdeContactsInfo</class></b> represents all the information
necessary to resolve contacts and collisions between two different bodies.
<ul>
  <li><i><com>OdeContactsInfo</i> <b>OdeContactsInfo(</b><i>number</i> <b>maxCount)</com></b>
    <p><descr>creates an object with information about two bodies' contacts (up
    to <i>maxCount</i> contacts).</descr>
    <p>&nbsp;
  <li><i><com>OdeContactsInfo</i>:<b>delete()</com></b>
    <p><descr>deletes the object.</descr>
    <p>&nbsp;
  <li><i><com>OdeContactsInfo</i>:<b>setFrictionDir(</b><i>number</i> <b>x</b>, <i>number</i> <b>y</b>, <i>number</i> <b>z</b>, <i>number</i> <b>idx</b> = -1<b>)</com></b>
    <p><descr>sets the first friction direction of the contact corresponding to <I>idx</I> (a negative value means set all contacts).</descr>
    <p>&nbsp;
  <li><i><com>OdeContactsInfo</i>:<b>setMu(</b><i>number</i> <b>mu</b> = nil, <I>number</I> <B>idx</B> = -1<b>)</com></b>
    <p><descr>sets the friction coefficient of the contact corresponding to <I>idx</I> (a negative value means set all contacts). If <i>nil</i> the friction value if infinite.</descr>
    <p>&nbsp;
  <li><i><com>OdeContactsInfo</i>:<b>setMu2(</b><i>number</i> <b>mu</b> = nil, <I>number</I> <B>idx</B> = -1<b>)</com></b>
    <p><descr>sets the friction coefficient of the contact corresponding to <I>idx</I> (a negative value means set all contacts) in the second friction direction (given by the cross product of the first direction and the normal to the collision point). If <i>nil</i> the friction value if infinite.</descr>
    <p>&nbsp;
  <li><i><com>OdeContactsInfo</i>:<b>setMotion1(</b><i>number</i> <b>motion</b> = nil, <I>number</I> <B>idx</B> = -1<b>)</com></b>
    <p><descr>sets the speed of the contact surface in the first friction direction of the contact corresponding to <I>idx</I> (a negative value means set all contacts).
    <p>&nbsp;
  <li><i><com>OdeContactsInfo</i>:<b>setMotion2(</b><i>number</i> <b>motion</b> = nil, <I>number</I> <B>idx</B> = -1<b>)</com></b>
    <p><descr>sets the speed of the contact surface in the second friction direction (given by the cross product of the first direction and the normal to the collision point) of the contact corresponding to <I>idx</I> (a negative value means set all contacts).
    <p>&nbsp;
  <li><i><com>OdeContactsInfo</i>:<b>setSlip1(</b><i>number</i> <b>motion</b> = nil, <I>number</I> <B>idx</B> = -1<b>)</com></b>
    <p><descr>sets the coefficient of force-dependent-slip in the first friction direction of the contact corresponding to <I>idx</I> (a negative value means set all contacts).
    <p>&nbsp;
  <li><i><com>OdeContactsInfo</i>:<b>setSlip2(</b><i>number</i> <b>motion</b> = nil, <I>number</I> <B>idx</B> = -1<b>)</com></b>
    <p><descr>sets the coefficient of force-dependent-slip in the second friction direction (given by the cross product of the first direction and the normal to the collision point) of the contact corresponding to <I>idx</I> (a negative value means set all contacts).
    <p>&nbsp;
  <li><i><com>OdeContactsInfo</i>:<b>setBounce(</b><i>number</i> <b>bounce</b>, <i>number</i> <b>bounceVel</b> = 0, <I>number</I> <B>idx</B> = -1<b>)</com></b>
    <p><descr>sets the bouncyness of the contact of the contact corresponding to <I>idx</I> (a negative value for <I>idx</I> means set all contacts - 0 <I>bounce</I> means no bounce, 1 <I>bounce</I> means full bouncyness). Values of contact speed low than <i>bounceVel</i> have <i>bounce</i> equal to zero.</descr>
    <p>&nbsp;
  <li><i><com>OdeContactsInfo</i>:<b>setSoftERP(</b><i>number</i> <b>erp</b>, <I>number</I> <B>idx</B> = -1<b>)</com></b>
    <p><descr>sets the error reduction parameter for normal softness of the contact corresponding to <I>idx</I> (a negative value means set all contacts).</descr>
    <p>&nbsp;
  <li><i><com>OdeContactsInfo</i>:<b>setSoftCFM(</b><i>number</i> <b>cfm</b>, <I>number</I> <B>idx</B> = -1<b>)</com></b>
    <p><descr>sets the constraint force mixing value for normal softness of the contact corresponding to <I>idx</I> (a negative value means set all contacts).</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>OdeContactsInfo</i>:<b>getPosition(</b><i>number</i>
    <b>index</b> = 0<b>)</com></b>
    <p><descr>returns the position of the collision point corresponding to the
    contact at index. If one of the two bodies is a ray, the point of
    intersection is the same regardless of whether the ray starts from inside or
    outside the geometry.</descr>
    <p>&nbsp;
  <li><i><com>number</i> nx, <i>number</i> ny, <i>number</i> nz = <i>OdeContactsInfo</i>:<b>getNormal(</b><i>number</i>
    <b>index</b> = 0<b>)</com></b>
    <p><descr>returns the normal of the collision point corresponding to the
    contact at index. If the first of the two bodies is a ray, the normal is
    oriented correctly for ray reflection from the hit surface (otherwise it
    will have the opposite sign).</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>OdeContactsInfo</i>:<b>getDepth(</b><i>number</i> <b>index</b>
    = 0<b>)</com></b>
    <p><descr>returns the collision depth corresponding to the contact at index.
    If one of the two bodies is a ray, the depth specifies the distance from the
    start point of the ray to the contact point.</descr>
    <p>&nbsp;
  <li><i><com>OdeGeom</i> <i>OdeContactsInfo</i>:<b>getGeom1(</b><i>number</i> <b>index</b> = 0<b>)</com></b>
    <p><descr>returns the first geometry corresponding to the contact at index.</descr>
    <p>&nbsp;
  <li><i><com>OdeGeom</i> <i>OdeContactsInfo</i>:<b>getGeom2(</b><i>number</i> <b>index</b> = 0<b>)</com></b>
    <p><descr>returns the second geometry corresponding to the contact at index.</descr>
    <p>&nbsp;
  <li><i><com>OdeGeom</i> geom, <I>number</I> index = <i>OdeContactsInfo</i>:<b>getPartner(</b><i>OdeGeom</i> <b>geom</b>, <I>number</I> <B>startIndex</B><b>)</com></b>
    <p><descr>returns the collision partner of this geometry if one exists in this contacs and its index in the array of contacts. The search begins from  <I>startIndex</I> and the first partner is returned: To look for other partners for the same geometry repeat the search incrementing index by 1.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="odeuniversal">
<h5>3.12.2.5 OdeUniversal</h5>
</a>The <b><class>OdeUniversal</class></b> class extends <i><parent>OdeJoint</parent></i> and
inherits all its methods. It represents an universal joint, which is a
ball-and-socket joint with an additional contraint given by two axes that
preserve their relative angle.
<ul>
  <li><i><com>OdeUniversal</i>:<b>setAnchor(</b><i>number</i> <b>x</b>, <i>number</i>
    <b>y</b>, <i>number</i> <b>z)</com></b>
    <p><descr>sets the anchor to the given point in world coordinates.</descr>
    <p>&nbsp;
  <li><i><com>OdeUniversal</i>:<b>setAxis1(</b><i>number</i> <b>x</b>, <i>number</i>
    <b>y</b>, <i>number</i> <b>z)</com></b>
    <p><descr>sets the axis of the first body to the given direction in world
    coordinates.</descr>
    <p>&nbsp;
  <li><i><com>OdeUniversal</i>:<b>setAxis2(</b><i>number</i> <b>x</b>, <i>number</i>
    <b>y</b>, <i>number</i> <b>z)</com></b>
    <p><descr>sets the axis of the second body to the given direction in world
    coordinates.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>OdeUniversal</i>:<b>getAnchor()</com></b>
    <p><descr>returns the anchor position in world coordinates.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>OdeUniversal</i>:<b>getAxis1()</com></b>
    <p><descr>returns the axis direction of the first body in world coordinates.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>OdeUniversal</i>:<b>getAxis2()</com></b>
    <p><descr>returns the axis direction of the second body in world
    coordinates.</descr>
    <p>&nbsp;
  <li><i><com>OdeUniversal</i>:<b>setLowStop(</b><i>number</i> <b>loStop)</com></b>
    <p><descr>sets the low stop angle. Set this to <i>nil</i> to remove any
    limit. It must be greater than <i>-pi</i> to be effective.</descr>
    <p>&nbsp;
  <li><i><com>OdeUniversal</i>:<b>setHighStop(</b><i>number</i> <b>hiStop)</com></b>
    <p><descr>sets the high stop angle. Set this to <i>nil</i> to remove any
    limit. It must be lower than <i>pi</i> to be effective.</descr>
    <p>&nbsp;
  <li><i><com>OdeUniversal</i>:<b>setSpeed(</b><i>number</i> <b>speed)</com></b>
    <p><descr>sets the angular speed of the motor.</descr>
    <p>&nbsp;
  <li><i><com>OdeUniversal</i>:<b>setMaxTorque(</b><i>number</i> <b>max)</com></b>
    <p><descr>sets the maximum torque that the motor will use to achieve the
    desired speed. It must be positive or null. If null the motor is turned off.</descr>
    <p>&nbsp;
  <li><i><com>OdeUniversal</i>:<b>setFudgeFactor(</b><i>number</i> <b>factor)</com></b>
    <p><descr>sets the fudge factor. It should have a value between zero and
    one. Useful to reduce the effect of &quot;jumpiness&quot; caused by a force
    excess when stops are reached.</descr>
    <p>&nbsp;
  <li><i><com>OdeUniversal</i>:<b>setBounce(</b><i>number</i> <b>bounce)</com></b>
    <p><descr>sets the restitution parameter. In the range zero to one, zero
    means that the stops are not bouncy at all, while one means maximum
    bounciness.</descr>
    <p>&nbsp;
  <li><i><com>OdeUniversal</i>:<b>setCFM(</b><i>number</i> <b>cfm)</com></b>
    <p><descr>sets the constraint force mixing value used when not at stop.</descr>
    <p>&nbsp;
  <li><i><com>OdeUniversal</i>:<b>setStopERP(</b><i>number</i> <b>erp)</com></b>
    <p><descr>sets the error reduction parameter used by the stops.</descr>
    <p>&nbsp;
  <li><i><com>OdeUniversal</i>:<b>setStopCFM(</b><i>number</i> <b>cfm)</com></b>
    <p><descr>sets the constraint force mixing value used by the stops.</descr>
    <p>&nbsp;
  <li><i><com>OdeUniversal</i>:<b>setLowStop2(</b><i>number</i> <b>loStop)</com></b>
    <p><descr>sets the low stop angle for the second axis. Set this to <i>nil</i>
    to remove any limit. It must be greater than <i>-pi</i> to be effective.</descr>
    <p>&nbsp;
  <li><i><com>OdeUniversal</i>:<b>setHighStop2(</b><i>number</i> <b>hiStop)</com></b>
    <p><descr>sets the high stop angle for the second axis. Set this to <i>nil</i>
    to remove any limit. It must be lower than <i>pi</i> to be effective.</descr>
    <p>&nbsp;
  <li><i><com>OdeUniversal</i>:<b>setSpeed2(</b><i>number</i> <b>speed)</com></b>
    <p><descr>sets the angular speed of the motor applied to the second axis.</descr>
    <p>&nbsp;
  <li><i><com>OdeUniversal</i>:<b>setMaxTorque2(</b><i>number</i> <b>max)</com></b>
    <p><descr>sets the maximum torque that the motor applied to the second axis
    will use to achieve the desired speed. It must be positive or null. If null
    the motor is turned off.</descr>
    <p>&nbsp;
  <li><i><com>OdeUniversal</i>:<b>setFudgeFactor2(</b><i>number</i> <b>factor)</com></b>
    <p><descr>sets the fudge factor for the second axis. It should have a value
    between zero and one. Useful to reduce the effect of &quot;jumpiness&quot;
    caused by a force excess when stops are reached.</descr>
    <p>&nbsp;
  <li><i><com>OdeUniversal</i>:<b>setBounce2(</b><i>number</i> <b>bounce)</com></b>
    <p><descr>sets the restitution parameter for the second axis. In the range
    zero to one, zero means that the stops are not bouncy at all, while one
    means maximum bounciness.</descr>
    <p>&nbsp;
  <li><i><com>OdeUniversal</i>:<b>setCFM2(</b><i>number</i> <b>cfm)</com></b>
    <p><descr>sets the constraint force mixing value for the second axis used
    when not at stop.</descr>
    <p>&nbsp;
  <li><i><com>OdeUniversal</i>:<b>setStopERP2(</b><i>number</i> <b>erp)</com></b>
    <p><descr>sets the error reduction parameter for the second axis used by the
    stops.</descr>
    <p>&nbsp;
  <li><i><com>OdeUniversal</i>:<b>setStopCFM2(</b><i>number</i> <b>cfm)</com></b>
    <p><descr>sets the constraint force mixing value for the second axis used by
    the stops.</descr>
    <p>&nbsp;
  <li><i><com>OdeUniversal</i>:<b>addTorques(</b><i>number</i> <b>torque1</b>, <i>number</i>
    <b>torque2)</com></b>
    <p><descr>applies the torques to the axes.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="odehinge2">
<h5>3.12.2.6 OdeHinge2</h5>
</a>The <b><class>OdeHinge2</class></b> class extends <i><parent>OdeJoint</parent></i> and
inherits all its methods. It represents two hinges is series with different axes
(the two axes must not lie on the same line). The first (second) axis is
relative to the first (second) body. The first axis can have joint limits and a
motor, while the second axis can only have a motor.
<ul>
  <li><i><com>OdeHinge2</i>:<b>setAnchor(</b><i>number</i> <b>x</b>, <i>number</i>
    <b>y</b>, <i>number</i> <b>z)</com></b>
    <p><descr>sets the anchor to the given point in world coordinates.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge2</i>:<b>setAxis1(</b><i>number</i> <b>x</b>, <i>number</i>
    <b>y</b>, <i>number</i> <b>z)</com></b>
    <p><descr>sets the axis relative to the first body to the given direction.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge2</i>:<b>setAxis2(</b><i>number</i> <b>x</b>, <i>number</i>
    <b>y</b>, <i>number</i> <b>z)</com></b>
    <p><descr>sets the axis relative to the second body to the given direction.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>OdeHinge2</i>:<b>getAnchor()</com></b>
    <p><descr>returns the anchor position in world coordinates.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>OdeHinge2</i>:<b>getAxis1()</com></b>
    <p><descr>returns the axis direction relative to the first body in world
    coordinates.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>OdeHinge2</i>:<b>getAxis2()</com></b>
    <p><descr>returns the axis direction relative to the second body in world
    coordinates.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>OdeHinge2</i>:<b>getAngle1()</com></b>
    <p><descr>returns the angle of rotation around the first axis direction.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>OdeHinge2</i>:<b>getAngle1Rate()</com></b>
    <p><descr>returns the angular velocity around the first axis direction.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>OdeHinge2</i>:<b>getAngle2Rate()</com></b>
    <p><descr>returns the angular velocity around the second axis direction.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge2</i>:<b>setLowStop(</b><i>number</i> <b>loStop)</com></b>
    <p><descr>sets the low stop angle. Set this to <i>nil</i> to remove any
    limit. It must be greater than <i>-pi</i> to be effective.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge2</i>:<b>setHighStop(</b><i>number</i> <b>hiStop)</com></b>
    <p><descr>sets the high stop angle. Set this to <i>nil</i> to remove any
    limit. It must be lower than <i>pi</i> to be effective.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge2</i>:<b>setSpeed(</b><i>number</i> <b>speed)</com></b>
    <p><descr>sets the angular speed of the motor.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge2</i>:<b>setMaxTorque(</b><i>number</i> <b>max)</com></b>
    <p><descr>sets the maximum torque that the motor will use to achieve the
    desired speed. It must be positive or null. If null the motor is turned off.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge2</i>:<b>setFudgeFactor(</b><i>number</i> <b>factor)</com></b>
    <p><descr>sets the fudge factor. It should have a value between zero and
    one. Useful to reduce the effect of &quot;jumpiness&quot; caused by a force
    excess when stops are reached.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge2</i>:<b>setBounce(</b><i>number</i> <b>bounce)</com></b>
    <p><descr>sets the restitution parameter. In the range zero to one, zero
    means that the stops are not bouncy at all, while one means maximum
    bounciness.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge2</i>:<b>setCFM(</b><i>number</i> <b>cfm)</com></b>
    <p><descr>sets the constraint force mixing value used when not at stop.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge2</i>:<b>setStopERP(</b><i>number</i> <b>erp)</com></b>
    <p><descr>sets the error reduction parameter used by the stops.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge2</i>:<b>setStopCFM(</b><i>number</i> <b>cfm)</com></b>
    <p><descr>sets the constraint force mixing value used by the stops.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge2</i>:<b>setSpeed2(</b><i>number</i> <b>speed)</com></b>
    <p><descr>sets the angular speed of the motor applied to the second axis.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge2</i>:<b>setMaxTorque2(</b><i>number</i> <b>maxF)</com></b>
    <p><descr>sets the maximum torque that the motor applied to the second axis
    will use to achieve the desired speed. It must be positive or null. If null
    the motor is turned off.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge2</i>:<b>setCFM2(</b><i>number</i> <b>cfm)</com></b>
    <p><descr>sets the constraint force mixing value for the second axis used
    when not at stop.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge2</i>:<b>setSuspensionERP(</b><i>number</i> <b>erp)</com></b>
    <p><descr>sets the error reduction parameter used by the suspensions.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge2</i>:<b>setSuspensionCFM(</b><i>number</i> <b>cfm)</com></b>
    <p><descr>sets the constraint force mixing value used by the suspensions.</descr>
    <p>&nbsp;
  <li><i><com>OdeHinge2</i>:<b>addTorques(</b><i>number</i> <b>torque1</b>, <i>number</i>
    <b>torque2)</com></b>
    <p><descr>applies the torques to the axes.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="odemotor">
<h5>3.12.2.7 OdeMotor</h5>
</a>The <b><class>OdeMotor</class></b> class extends <i><parent>OdeJoint</parent></i> and
inherits all its methods. It represents an angular motor that controls the
relative angular velocity between two bodies along a maximum of three axes.
<ul>
  <li><i><com>OdeMotor</i>:<b>setAxesCount(</b><i>number</i> <b>count)</com></b>
    <p><descr>sets the number of axes around which the motor controls angular
    rotation.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setAxis(</b><i>number</i> <b>index</b>, <i>number</i>
    <b>rel</b>, <i>number</i> <b>x</b>, <i>number</i> <b>y</b>, <i>number</i> <b>z)</com></b>
    <p><descr>sets the axis of rotation corresponding to index. The value of <i>rel</i>
    means that, if <i>0</i>, the axis is anchored to the global frame, if <i>1</i>,
    is anchored to the first body, if <i>2</i>, is anchored to the second body.
    The values <i>x</i>, <i>y</i> and <i>z</i> are always specified in global
    coordinates regardless the value of <i>rel</i>.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setAngle(</b><i>number</i> <b>index</b>, <i>number</i>
    <b>angle)</com></b>
    <p><descr>sets the current angle along axis corresponding to index. The
    angle information is needed if stops have been set along the axis.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>OdeMotor</i>:<b>getAxesCount()</com></b>
    <p><descr>returns the number of rotation axes.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>OdeMotor</i>:<b>getAxis(</b><i>number</i>
    <b>index)</com></b>
    <p><descr>returns the direction of the axis corresponding to index in world
    coordinates.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setLowStop(</b><i>number</i> <b>loStop)</com></b>
    <p><descr>sets the low stop angle. Set this to <i>nil</i> to remove any
    limit. It must be greater than <i>-pi</i> to be effective.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setHighStop(</b><i>number</i> <b>hiStop)</com></b>
    <p><descr>sets the high stop angle. Set this to <i>nil</i> to remove any
    limit. It must be lower than <i>pi</i> to be effective.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setSpeed(</b><i>number</i> <b>speed)</com></b>
    <p><descr>sets the angular speed of the motor.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setMaxTorque(</b><i>number</i> <b>max)</com></b>
    <p><descr>sets the maximum torque that the motor will use to achieve the
    desired speed. It must be positive or null. If null the motor is turned off.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setFudgeFactor(</b><i>number</i> <b>factor)</com></b>
    <p><descr>sets the fudge factor. It should have a value between zero and
    one. Useful to reduce the effect of &quot;jumpiness&quot; caused by a force
    excess when stops are reached.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setBounce(</b><i>number</i> <b>bounce)</com></b>
    <p><descr>sets the restitution parameter. In the range zero to one, zero
    means that the stops are not bouncy at all, while one means maximum
    bounciness.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setCFM(</b><i>number</i> <b>cfm)</com></b>
    <p><descr>sets the constraint force mixing value used when not at stop.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setStopERP(</b><i>number</i> <b>erp)</com></b>
    <p><descr>sets the error reduction parameter used by the stops.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setStopCFM(</b><i>number</i> <b>cfm)</com></b>
    <p><descr>sets the constraint force mixing value used by the stops.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setLowStop2(</b><i>number</i> <b>loStop)</com></b>
    <p><descr>sets the low stop angle for the second axis. Set this to <i>nil</i>
    to remove any limit. It must be greater than <i>-pi</i> to be effective.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setHighStop2(</b><i>number</i> <b>hiStop)</com></b>
    <p><descr>sets the high stop angle for the second axis. Set this to <i>nil</i>
    to remove any limit. It must be lower than <i>pi</i> to be effective.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setSpeed2(</b><i>number</i> <b>speed)</com></b>
    <p><descr>sets the angular speed of the motor for the second axis.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setMaxTorque2(</b><i>number</i> <b>max)</com></b>
    <p><descr>sets the maximum torque that the motor will use to achieve the
    desired speed for the second axis. It must be positive or null. If null the
    motor is turned off.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setFudgeFactor2(</b><i>number</i> <b>factor)</com></b>
    <p><descr>sets the fudge factor for the second axis. It should have a value
    between zero and one. Useful to reduce the effect of &quot;jumpiness&quot;
    caused by a force excess when stops are reached.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setBounce2(</b><i>number</i> <b>bounce)</com></b>
    <p><descr>sets the restitution parameter for the second axis. In the range
    zero to one, zero means that the stops are not bouncy at all, while one
    means maximum bounciness.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setCFM2(</b><i>number</i> <b>cfm)</com></b>
    <p><descr>sets the constraint force mixing value used when not at stop for
    the second axis.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setStopERP2(</b><i>number</i> <b>erp)</com></b>
    <p><descr>sets the error reduction parameter used by the stops for the
    second axis.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setStopCFM2(</b><i>number</i> <b>cfm)</com></b>
    <p><descr>sets the constraint force mixing value used by the stops for the
    second axis.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setLowStop3(</b><i>number</i> <b>loStop)</com></b>
    <p><descr>sets the low stop angle for the third axis. Set this to <i>nil</i>
    to remove any limit. It must be greater than <i>-pi</i> to be effective.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setHighStop3(</b><i>number</i> <b>hiStop)</com></b>
    <p><descr>sets the high stop angle for the third axis. Set this to <i>nil</i>
    to remove any limit. It must be lower than <i>pi</i> to be effective.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setSpeed3(</b><i>number</i> <b>speed)</com></b>
    <p><descr>sets the angular speed of the motor for the third axis.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setMaxTorque3(</b><i>number</i> <b>max)</com></b>
    <p><descr>sets the maximum torque that the motor will use to achieve the
    desired speed for the third axis. It must be positive or null. If null the
    motor is turned off.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setFudgeFactor3(</b><i>number</i> <b>factor)</com></b>
    <p><descr>sets the fudge factor for the third axis. It should have a value
    between zero and one. Useful to reduce the effect of &quot;jumpiness&quot;
    caused by a force excess when stops are reached.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setBounce3(</b><i>number</i> <b>bounce)</com></b>
    <p><descr>sets the restitution parameter for the third axis. In the range
    zero to one, zero means that the stops are not bouncy at all, while one
    means maximum bounciness.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setCFM3(</b><i>number</i> <b>cfm)</com></b>
    <p><descr>sets the constraint force mixing value used when not at stop for
    the third axis.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setStopERP3(</b><i>number</i> <b>erp)</com></b>
    <p><descr>sets the error reduction parameter used by the stops for the third
    axis.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>setStopCFM3(</b><i>number</i> <b>cfm)</com></b>
    <p><descr>sets the constraint force mixing value used by the stops for the
    third axis.</descr>
    <p>&nbsp;
  <li><i><com>OdeMotor</i>:<b>addTorques(</b><i>number</i> <b>torque1</b>, <i>number</i>
    <b>torque2</b>, <i>number</i> <b>torque3)</com></b>
    <p><descr>applies the torques to the axes. If the motor has less than three
    axes, additional values are ignored.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="odejointgroup">
<h4>3.12.3 OdeJointGroup</h4>
</a>The <b><class>OdeJointGroup</class></b> represents a collection of joints.
<ul>
  <li><i><com>OdeJointGroup</i> <b>OdeJointGroup()</com></b>
    <p><descr>creates and empty joint group.</descr>
    <p>&nbsp;
  <li><i><com>OdeJointGroup</i>:<b>delete()</com></b>
    <p><descr>deletes the joint group and all the joints included.</descr>
    <p>&nbsp;
  <li><i><com>OdeJointGroup</i>:<b>empty()</com></b>
    <p><descr>empties the joint group and all the joints included are deleted.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="odegeom">
<h4>3.12.4 OdeGeom</h4>
</a>The <b><class>OdeGeom</class></b> class represents the fundamental object in
the collision system: it can be a single rigid shape, moveable or not, or a
collection of rigid shapes (know as <i>space</i>).
<ul>
  <li><i><com>OdeGeom</i>:<b>delete()</com></b>
    <p><descr>deletes the geometry removing it from any space it is in. This
    function must be explicitly called to release the geometry except if it
    belongs to a space with cleanup mode activated.</descr>
    <p>&nbsp;
  <li><i><com>number</i> minX, <i>number</i> maxX,<br>
    <i>number</i> minY, <i>number</i> maxY,<br>
    <i>number</i> minZ, <i>number</i> maxZ = <i>OdeGeom</i>:<b>getAABB()</com></b>
    <p><descr>returns the axis aligned bounding box that surrounds the given
    geometry.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>OdeGeom</i>:<b>isSpace()</com></b>
    <p><descr>returns true if the geometry consists in a collection of
    geometries (know as <i>space</i>).</descr>
    <p>&nbsp;
  <li><i><com>OdeSpace</i> <i>OdeGeom</i>:<b>getSpace()</com></b>
    <p><descr>returns the space that contains this geometry, or <i>nil</i> if it
    is not contained in any space.</descr>
    <p>&nbsp;
  <li><i><com>OdeGeom</i>:<b>setEnabled(</b><i>boolean</i> <b>enabled</b> = true<b>)</com></b>
    <p><descr>enables or disables a geometry.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>OdeGeom</i>:<b>isEnabled()</com></b>
    <p><descr>returns if a geometry is enabled or not.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>OdeGeom</i>:<b>collide(</b><i>OdeGeom</i> <b>otherGeom</b>,
    <i>OdeContactsInfo</i> <b>info</b>)</com>
    <p><descr>checks for collision this geometry against the other geometry and
    puts the generated contacts in the specified contact info. Then the contact
    info can be used to generate contacts with the function <i>OdeWorld:createContacts()</i>.
    Returns the number of contact points generated.</descr>
    <p>&nbsp;
  <li><i><com>OdeGeom</i>:<b>outerCollide(</b><i>OdeSpace</i> <b>otherSpace</b>,
    <i>OdeContactsInfo</i> <b>info</b>, <i>OdeWorld</i> <b>world</b>, <i>OdeJointGroup</i>
    <b>contactGroup</b>, <I>boolean</I> <B>resetContacts</B> = true<b>)</com></b>
    <p><descr>checks for collision this geometry
    against all the geometries contained in the other space using the given info
    for every contact and puts the generated contacts in the specified contact
    group.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="odespace">
<h5>3.12.4.1 OdeSpace</h5>
</a>The <b><class>OdeSpace</class></b> class extends <i><parent>OdeGeom</parent></i> and inherits
all its methods. It represents a collection of geometries (known as <i>geom</i>)
and at the same time can belong to another space.
<ul>
  <li><i><com>OdeSpace</i>:<b>delete()</com></b>
    <p><descr>deletes the space removing it from any space it is in. This
    function must be explicitly called to release the space except if it belongs
    to a space with cleanup mode activated. If the cleanup mode if activated for
    this object, all the geometries in this space are deleted as weel.</descr>
    <p>&nbsp;
  <li><i><com>OdeSpace</i> <b>OdeSimpleSpace(</b><i>OdeSpace</i> <b>superSpace</b>
    = nil <b>)</com></b>
    <p><descr>creates a simple space. It represents a space that does not do any
    collision culling: it checks every possible pair of geometries for
    intersection. If the argument is not <i>nil</i>, the space created is put in
    the specified space.</descr>
    <p>&nbsp;
  <li><i><com>OdeSpace</i>:<b>setCleanup(</b><i>boolean</i> <b>cleanup</b> =
    true<b>)</com></b>
    <p><descr>sets the cleanup mode of the space. It true the contained
    geometries will be deleted on space deletion (true by default).</descr>
    <p>&nbsp;
  <li><i><com>OdeSpace</i>:<b>add(</b><i>OdeGeom</i> <b>geom)</com></b>
    <p><descr>adds a geometry to the space. Does nothing if the geometry is
    already there.</descr>
    <p>&nbsp;
  <li><i><com>OdeSpace</i>:<b>remove(</b><i>OdeGeom</i> <b>geom)</com></b>
    <p><descr>removes a geometry from the space. Does nothing if the geometry is
    not there.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>OdeSpace</i>:<b>includes(</b><i>OdeGeom</i> <b>geom)</com></b>
    <p><descr>returns true if the geometry is in this space.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>OdeSpace</i>:<b>getGeomsCount()</com></b>
    <p><descr>returns the number of geometries contained within the space.</descr>
    <p>&nbsp;
  <li><i><com>OdeGeom</i> <i>OdeSpace</i>:<b>getGeom(</b><i>number</i> <b>index)</com></b>
    <p><descr>returns the geometry corresponding to the index. The access is
    fast if the geometries are retrieved in order (starting from zero).</descr>
    <p>&nbsp;
  <li><i><com>OdeSpace</i>:<b>innerCollide(</b><i>OdeContactsInfo</i> <b>info</b>,
    <i>OdeWorld</i> <b>world</b>, <i>OdeJointGroup</i> <b>contactGroup</b>, <I>boolean</I> <B>resetContacts</B> = true<b>)</com></b>
    <p><descr>checks for collision all the geometries contained in the space
    using the given info for every contact and puts the generated contacts in
    the specified contact group.</descr>
    <p>&nbsp;
  <li><i><com>OdeSpace</i>:<b>outerCollide(</b><i>OdeSpace</i> <b>otherSpace</b>,
    <i>OdeContactsInfo</i> <b>info</b>, <i>OdeWorld</i> <b>world</b>, <i>OdeJointGroup</i>
    <b>contactGroup</b>, <I>boolean</I> <B>resetContacs</B> = true<b>)</com></b>
    <p><descr>checks for collision all the geometries contained in this space
    against all the geometries contained in the other space using the given info
    for every contact and puts the generated contacts in the specified contact
    group.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="odehashspace">
<h5>3.12.4.1.1 OdeHashSpace</h5>
</a>The <b><class>OdeHashSpace</class></b> extends <b><parent>OdeSpace</parent></b> and
represents a space with a multi-resolution hash table. This class uses a data
structure that records how each geometry overlaps cells in one of several three
dimensional grids. Each object can be quickly paired with the objects around it,
as long as the objects are not too clustered.
<ul>
  <li><i><com>OdeHashSpace</i> <b>OdeHashSpace(</b><i>OdeSpace</i> <b>superSpace</b>
    = nil <b>)</com></b>
    <p><descr>creates a hash space (see below). If the argument is not <i>nil</i>,
    the space created is put in the specified space.</descr>
    <p>&nbsp;
  <li><i><com>OdeHashSpace</i>:<b>setLevels(</b><i>number</i> <b>minLevel</b>, <i>number</i>
    <b>maxLevel)</com></b>
    <p><descr>sets the parameters (integer values) for the multi-resolution hash
    table.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="odeplane">
<h5>3.12.4.2 OdePlane</h5>
</a>The <b><class>OdePlane</class></b> extends <b><parent>OdeGeom</parent></b> and inherits all
its methods. It represents a plane (non-placeable).
<ul>
  <li><i><com>OdePlane</i> <b>OdePlane(</b><i>number</i> <b>a</b>, <i>number</i>
    <b>b</b>, <i>number</i> <b>c</b>, <i>number</i> <b>d</b>, <i>OdeSpace</i> <b>space</b>
    = nil <b>)</com></b>
    <p><descr>creates a plane given its normal vector <i>(a,b,c)</i> of length 1
    and the offset from the origin <i>d</i> and puts it in the given space if
    available.</descr>
    <p>&nbsp;
  <li><i><com>OdePlane</i>:<b>setParams(</b><i>number</i> <b>a</b>, <i>number</i>
    <b>b</b>, <i>number</i> <b>c</b>, <i>number</i> <b>d)</com></b>
    <p><descr>sets the parameters a,b,c and d of the plane.</descr>
    <p>&nbsp;
  <li><i><com>number</i> a, <i>number</i> b, <i>number</i> c, <i>number</i> d = <i>OdePlane</i>:<b>getParams()</com></b>
    <p><descr>returns the parameters a, b, c and d of this plane.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>OdeBox</i>:<b>getPointDepth(</b><i>number</i> <b>x</b>,
    <i>number</i> <b>y</b>, <i>number</i> <b>z)</com></b>
    <p><descr>returns the depth of the given point in this plane (positive
    inside, negative outside).</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="odeplaceable">
<h5>3.12.4.3 OdePlaceable</h5>
</a>The <b><class>OdePlaceable</class></b> extends <b><parent>OdeGeom</parent></b> and inherits
all its methods. It represents a placeable geometry.
<ul>
  <p>&nbsp;
  <li><i><com>OdePlaceable</i>:<b>setBody(</b><i>OdeBody</i> <b>body)</com></b>
    <p><descr>connects a geometry to a body, so every transform applied to one
    of them is reflected to the other.</descr>
    <p>&nbsp;
  <li><i><com>OdePlaceable</i>:<b>setPosition(</b><i>number</i> <b>x</b>, <i>number</i>
    <b>y</b>, <i>number</i> <b>z)</b><br>
    <i>OdePlaceable</i>:<b>setRotation(</b><i>Transform</i> <b>mat)</com></b>
    <p><descr>sets the position and rotation (taken from the rotation of a <i>Transform</i>
    object) of the geometry. These functions applied to a non-placeable geometry
    give an error.</descr>
    <p>&nbsp;
  <li><i><com>number</i> x, <i>number</i> y, <i>number</i> z = <i>OdePlaceable</i>:<b>getPosition()</b><br>
    <i>OdePlaceable</i>:<b>getTransform(</b><i>Transform</i> <b>mat)</com></b>
    <p><descr>returns the position and transform (stores the translation and
    rotation matrix in a <i>Transform</i> object) of the geometry. These
    functions applied to a non-placeable geometry give an error.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="odesphere">
<h5>3.12.4.3.1 OdeSphere</h5>
</a>The <b><class>OdeSphere</class></b> extends <b><parent>OdePlaceable</parent></b> and inherits
all its methods. It represents a spherical geometry.
<ul>
  <li><i><com>OdeSphere</i> <b>OdeSphere(</b><i>number</i> <b>radius</b>, <i>OdeSpace</i>
    <b>space</b> = nil <b>)</com></b>
    <p><descr>creates a sphere with the given radius and puts it in the given
    space if available.</descr>
    <p>&nbsp;
  <li><i><com>OdeSphere</i>:<b>setRadius(</b><i>number</i> <b>radius)</com></b>
    <p><descr>sets the radius of the sphere.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>OdeSphere</i>:<b>getRadius()</com></b>
    <p><descr>returns the radius of the sphere.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>OdeSphere</i>:<b>getPointDepth(</b><i>number</i> <b>x</b>,
    <i>number</i> <b>y</b>, <i>number</i> <b>z)</com></b>
    <p><descr>returns the depth of the given point in this sphere (positive
    inside, negative outside).</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="odebox">
<h5>3.12.4.3.2 OdeBox</h5>
</a>The <b><class>OdeBox</class></b> extends <b><parent>OdePlaceable</parent></b> and inherits
all its methods. It represents a box.
<ul>
  <li><i><com>OdeBox</i> <b>OdeBox(</b><i>number</i> <b>lx</b>, <i>number</i> <b>ly</b>,
    <i>number</i> <b>lz</b>, <i>OdeSpace</i> <b>space</b> = nil <b>)</com></b>
    <p><descr>creates a box given the length of its sides and puts it in the
    given space if available.</descr>
    <p>&nbsp;
  <li><i><com>OdeBox</i>:<b>setLengths(</b><i>number</i> <b>lx</b>, <i>number</i>
    <b>ly</b>, <i>number</i> <b>lz)</com></b>
    <p><descr>sets the lengths of the sides of this box.</descr>
    <p>&nbsp;
  <li><i><com>number</i> lx, <i>number</i> ly, <i>number</i> lz = <i>OdeBox</i>:<b>getLengths()</com></b>
    <p><descr>returns the lenghts of the sides of this box.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>OdeBox</i>:<b>getPointDepth(</b><i>number</i> <b>x</b>,
    <i>number</i> <b>y</b>, <i>number</i> <b>z)</com></b>
    <p><descr>returns the depth of the given point in this box (positive inside,
    negative outside).</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="odecappedcylinder">
<h5>3.12.4.3.3 OdeCappedCylinder</h5>
</a>The <b><class>OdeCappedCylinder</class></b> extends <b><parent>OdePlaceable</parent></b> and
inherits all its methods. It represents a cyninder with a sphere at both ends.
<ul>
  <li><i><com>OdeCappedCylinder</i> <b>OdeCappedCylinder(</b><i>number</i> <b>radius</b>,
    <i>number</i> <b>length</b>, <i>OdeSpace</i> <b>space</b> = nil <b>)</com></b>
    <p><descr>creates a capped cylinder given its radius and length and puts it
    in the given space if available.</descr>
    <p>&nbsp;
  <li><i><com>OdeCappedCylinder</i>:<b>setParams(</b><i>number</i> <b>radius</b>,
    <i>number</i> <b>length)</com></b>
    <p><descr>sets the parameters of the capped cylinder.</descr>
    <p>&nbsp;
  <li><i><com>number</i> radius, <i>number</i> length = <i>OdeCappedCylinder</i>:<b>getParams()</com></b>
    <p><descr>returns the parameters of this capped cylinder.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>OdeCappedCylinder</i>:<b>getPointDepth(</b><i>number</i>
    <b>x</b>, <i>number</i> <b>y</b>, <i>number</i> <b>z)</com></b>
    <p><descr>returns the depth of the given point in this capped cylinder
    (positive inside, negative outside).</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="odecylinder">
<h5>3.12.4.3.3.1 OdeCylinder</h5>
</a>The <b><class>OdeCylinder</class></b> extends <b><parent>OdePlaceable</parent></b> and
inherits all its methods. It represents a cyninder with a sphere at both ends.
This class is an third-party addition to original ODE code and only
cylinder-box, cylinder-sphere and cylinder-trimesh collisions are considered.
<ul>
  <li><i><com>OdeCylinder</i> <b>OdeCylinder(</b><i>number</i> <b>radius</b>, <i>number</i>
    <b>length</b>, <i>OdeSpace</i> <b>space</b> = nil <b>)</com></b>
    <p><descr>creates a cylinder given its radius and length and puts it in the
    given space if available.</descr>
    <p>&nbsp;
  <li><i><com>OdeCylinder</i>:<b>setParams(</b><i>number</i> <b>radius</b>, <i>number</i>
    <b>length)</com></b>
    <p><descr>sets the parameters of the cylinder.</descr>
    <p>&nbsp;
  <li><i><com>number</i> radius, <i>number</i> length = <i>OdeCylinder</i>:<b>getParams()</com></b>
    <p><descr>returns the parameters of this cylinder.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="odetransform">
<h5>3.12.4.3.4 OdeTransform</h5>
</a>The <b><class>OdeTransform</class></b> extends <b><parent>OdePlaceable</parent></b> and
inherits all its methods. It represents a transform that encapsulate a geometry
object.
<ul>
  <p>&nbsp;
  <li><i><com>OdeTransform</i> <b>OdeTransform(</b><i>OdeSpace</i> <b>space</b>
    = nil <b>)</com></b>
    <p><descr>creates a transform and puts it in the given space if available.</descr>
    <p>&nbsp;
  <li><i><com>OdeTransform</i>:<b>setGeom(</b><i>OdeGeom</i> <b>geom)</com></b>
    <p><descr>sets the geometry to transform. The geometry must not be inserted
    into any space and must not be associated with any body.</descr>
    <p>&nbsp;
  <li><i><com>OdeGeom</i> <i>OdeSpace</i>:<b>getGeom()</com></b>
    <p><descr>returns the geometry to be transformed.</descr>
    <p>&nbsp;
  <li><i><com>OdeTransform</i>:<b>setCleanup(</b><i>boolean</i> <b>cleanup</b> =
    true<b>)</com></b>
    <p><descr>sets the cleanup mode of the transform. It true the contained
    geometry will be deleted on space deletion (false by default).</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="oderay">
<h5>3.12.4.3.5 OdeRay</h5>
</a>The <b><class>OdeRay</class></b> extends <b><parent>OdePlaceable</parent></b> and inherits
all its methods. It represents a ray casted from a start position in a given
direction.
<ul>
  <li><i><com>OdeRay</i> <b>OdeRay(</b><i>number</i> <b>length</b>, <i>OdeSpace</i>
    <b>space</b> = nil <b>)</com></b>
    <p><descr>creates a ray with the given length and puts it in the given space
    if available.</descr>
    <p>&nbsp;
  <li><i><com>OdeRay</i>:<b>setLength(</b><i>number</i> <b>length)</com></b>
    <p><descr>sets the length of the ray.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>OdeRay</i>:<b>getLength()</com></b>
    <p><descr>returns the length of the ray.</descr>
    <p>&nbsp;
  <li><i><com>OdeRay</i>:<b>set(</b><br>
    <i>number</i> <b>px</b>, <i>number</i> <b>py</b>, <i>number</i> <b>pz</b>,<br>
    <i>number</i> <b>dx</b>, <i>number</i> <b>dy</b>, <i>number</i> <b>dz)</com></b>
    <p><descr>sets the starting position <i>(px,py,pz)</i> and the direction <i>(dx,dy,dz)</i>
    of the ray.</descr>
    <p>&nbsp;
  <li><i><com>number</i> px, <i>number</i> py, <i>number</i> pz,<br>
    <i>number</i> dx, <i>number</i> dy, <i>number</i> dz = <i>OdeRay</i>:<b>get()</com></b>
    <p><descr>returns the starting position and the direction of the ray.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="odetrimesh">
<h5>3.12.4.3.6 OdeTriMesh</h5>
</a>The <b><class>OdeTriMesh</class></b> extends <b><parent>OdePlaceable</parent></b> and
inherits all its methods. It represents a triangle soup.
<ul>
  <li><i><com>OdeTriMesh</i> <b>OdeTriMesh(</b><i>OdeTriMeshData</i> <b>triMeshData</b>,
    <i>OdeSpace</i> <b>space</b> = nil<b>)</com></b>
    <p><descr>creates a triangle mesh from the specified data and puts it in the
    given space if available.</descr>
    <p>&nbsp;
  <li><i><com>OdeTriMesh</i>:<b>setData(</b><i>OdeTriMeshData</i> <b>data)</com></b>
    <p><descr>replaces the triangle mesh data.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="odetrimeshdata">
<h5>3.12.4.3.6.1 OdeTriMeshData</h5>
</a>The <b><class>OdeTriMeshData</class></b> represents the data used by
geometries made by triangle soups.
<ul>
  <li><i><com>OdeTriMeshData</i> <b>OdeTriMeshData()</com></b>
    <p><descr>creates the data of a triangle soup (empty).</descr>
    <p>&nbsp;
  <li><i><com>OdeTriMeshData</i>:<b>delete()</com></b>
    <p><descr>deletes this object.</descr>
    <p>&nbsp;
  <li><i><com>OdeTriMeshData</i>:<b>build(</b><i>Shape</i> <b>shape)</com></b>
    <p><descr>builds the data of a triangle soup from the triangles in a shape.</descr>
    <p>&nbsp;
  <li><i><com>OdeTriMeshData</i>:<b>build(</b><i>HeightField</i> <b>heightField)</com></b>
    <p><descr>builds the data of a triangle soup from the triangles in a
    heightfield.</descr>
    <p>&nbsp;
  <li><i><com>OdeTriMeshData</i>:<b>build(</b><i>Patches</i> <b>patches)</com></b>
    <p><descr>builds the data of a triangle soup from the triangles in an
    &quot;infinite terrain&quot; (that corresponds to <i>Patches</i> - only the
    first period is considered).</descr>
    <p>&nbsp;
  <li><i><com>OdeTriMeshData</i>:<b>build(</b><i>Bsp</i> <b>bsp)</com></b>
    <p><descr>builds the data of a triangle soup from the triangles in a BSP
    level.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<h3><a name="compiler">3.13 Compiler</a></h3>
The <b><class>Compiler</class></b> class represents an ANSI C Compiler
integrated in the engine: the <i>TinyCC</i> compiler. C sources (ANSI C and even
ISO C99 to some extent - read <a href="#the_tinyc_compiler">the Tiny C Compiler
documentation</a> for more details) can be compiled, linked and the functions
executed within the LUA environment. C code can call a complete set of
functions, similar to the ones available to LUA, to access all the capabilities
of the engine. When no more needed, the compiler may be explicitly removed using
the <i>delete()</i> function to free the occupied memory (even the compiled
functions will be removed as well).<br>
If any compiled C function has to be called from LUA scripts, the programmer
must follow a simple interface to ensure compatibility with LUA conventions. The
function must accept no arguments and return an <i>int</i> value: the returned
integer specifies the number of arguments left by the function on the LUA stack.<br>
Usually that function must access the underlaying LUA state and that is
accomplished through the function
<p><i>&nbsp;&nbsp;&nbsp; lua_State* LS = lua_getstate();</i></p>
<p>the variable LS will contain the needed LUA state.<br>
To summarize C functions must be defined as follows to be accessible to LUA
scripts: <i>int function_name()</i>. Then a LUA script can retrieve the function
from the compiler using the method <i>getFunction()</i>.<br>
Anyway, sometimes happens to call a C function that needs the <i>lua_State</i>
as first argument. This happens for example when the <i>toLua++</i> utility
generates binding code between Lua and C. In that case is not possible to get
the function with <i>getFunction()</i>, but it is necessary to do a direct call
with <i>callPassingLuaState()</i> providing the name of the function to call.<br>
The conventions described above are complicated by the fact that the Lua
interpreter uses the <i>__fastcall</i> convention (passing some arguments in
register to speed up the call), while code generated with <i>TinyCC</i> follows
the <i>__cdecl</i> convention (and the <i>__fastcall</i> defined by TinyCC is
not compatible with the Borland C++ <i>__fastcall</i> used in the rest of the
code).</p>
<ul>
  <li><i><com>Compiler</i> <b>Compiler(</b><i>boolean</i> <b>areWarningsEnabled</b>
    = true<b>)</com></b>
    <p><descr>creates a compiler. If the argument is true (default), all the
    warnings of the compiler are enabled, otherwise any warning is silent. This
    option may be useful when the code is already tested for compilation to
    speed up the compilation itself and, in that case, also headers may be not
    included since function headers can be trusted.</descr>
    </p>
  <li><i><com>Compiler</i>:<b>delete()</com></b>
    <p><descr>deletes the compiler.</descr>
    <p>&nbsp;
  <li><i><com>Compiler</i>:<b>define(</b><i>string</i> <b>symbol, </b><i>string </i><b>value)</com></b>
    <p><descr>defines a preprocessor symbol.</descr>
    <p>&nbsp;
  <li><i><com>Compiler</i>:<b>undefine(</b><i>string</i> <b>symbol)</com></b>
    <p><descr>undefines a preprocessor symbol.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Compiler</i>:<b>addLibrary(</b><i>string </i><b>libraryName)</com></b>
    <p><descr>adds a DLL file to the list of libraries where the compiler must
    search the procedures to link to the code. Returns <i>false</i> on error.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Compiler</i>:<b>removeLibrary(</b><i>string </i><b>libraryName)</com></b>
    <p><descr>removes a DLL file to the list of libraries where the compiler
    must search the procedures to link to the code. Returns <i>false</i> on
    error.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Compiler</i>:<b>compileString(</b><i>string </i><b>source)</com></b>
    <p><descr>compiles the given string. Returns <i>false</i> on error.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Compiler</i>:<b>compileFile(</b><i>string </i><b>fileName)</com></b>
    <p><descr>compiles the file corresponding to the given name. Returns <i>false</i>
    on error.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Compiler</i>:<b>saveObjFile(</b><i>string </i><b>fileName)</com></b>
    <p><descr>saves the current compiled files in an object file with the given
    name. To be successfull, this function must be called before linking. The
    object file format is ELF. Returns <i>false</i> on error.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Compiler</i>:<b>loadObjFile(</b><i>string </i><b>fileName)</com></b>
    <p><descr>loads an object file with the given name. The object file format
    must be ELF. Returns <i>false</i> on error.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Compiler</i>:<b>loadObjString(</b><i>string </i><b>objBuffer)</com></b>
    <p><descr>load an object file stored previously in the given string. The
    object file format must be ELF. Returns <i>false</i> on error.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>Compiler</i>:<b>link()</com></b>
    <p><descr>links all the compiled sources. Returns <i>false</i> on error.
    This function must be called once before any compiled function is retrieved
    using <i>getFunction()</i>.</descr>
    <p>&nbsp;
  <li><com><i>returned_values</i> <i>Compiler</i>:<b>callPassingLuaState(</b><i>string</i>
    <b>funcName)</com></b>
    <p><descr>calls the function <i>funcName</i> passing the Lua state as the
    first argument. The returned values depend on the function.</descr>
    <p>&nbsp;
  <li><i><com>cfunction</i> <i>Compiler</i>:<b>getFunction(</b><i>string</i> <b>name)</com></b>
    <p><descr>retrieves a compiled function given its name.</descr>
    <p>&nbsp;
  <li><i><com>userdata</i> <i>Compiler</i>:<b>getPointer(</b><i>string</i> <b>name)</com></b>
    <p><descr>retrieves a compiled symbol given its name.</descr>
    <p>&nbsp;
  <li><i><com>Compiler</i>:<b>enterC()</com></b>
    <p><descr>leaves the LUA rendering loop and enters a C rendering loop. The
    code linked by the compiler should contain four functions: <i>void
    init(void)</i>, <i>void update(void)</i>, <i>void final(void)</i> and <i>void
    key(int)</i> with the same meaning of the function passed to the <i>Scene()</i>
    constructor. To leave the C mode, the C code must call <i>exitC()</i>.</descr>
    </p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="luascript">
<h3>3.14 LuaScript</h3>
</a>The <b><class>LuaScript</class></b> class represent an interpreter of LUA
scripts independent from the main interpreter. Scripts assigned to this
interpreter are executed instruction by instruction in a controlled environment
with a specified amount of memory available.
<ul>
  <li><com><i>LuaScript</i> <b>LuaScript(</b><I>string</I> <B>fileName,</B> <I>number</I> <B>maxMemory</B><b>)</b></com>
    <p><descr>creates an independent interpreter of LUA scripts given the name of the script file and the maximum amount of memory available to this interpreter.</descr>
    <p>&nbsp;
  <li><com><i>LuaScript</i>:<b>setID(</b><I>number</I> <B>id</B><b>)</b></com>
    <p><descr>sets the identification integer of this interpreter.</descr>
    <p>&nbsp;
  <li><com><i>LuaScript</i>:<b>defineFunctions(</b><I>table</I> <B>funcNamesList</B><b>)</b></com>
    <p><descr>sets the list of external functions recognized by this interpreter.</descr>
    <p>&nbsp;
  <li><com><i>LuaScript</i>:<b>setRandomSeed(</b><I>number</I> <B>seed</B><b>)</b></com>
    <p><descr>sets the seed of the pseudo-random number generator.</descr>
    <p>&nbsp;
  <li><com><I>number</I> <i>LuaScript</i>:<b>getMaxHeapSize(</b><b>)</b></com>
    <p><descr>returns the total amount of available memory.</descr>
    <p>&nbsp;
  <li><com><I>number</I> <i>LuaScript</i>:<b>getHeapSize(</b><b>)</b></com>
    <p><descr>returns the current amount of available memory.</descr>
    <p>&nbsp;
  <li><com><I>boolean</I> yield, <I>number</I> errorCode, <I>string</I> errorMessage = <i>LuaScript</i>:<b>execute(</b><I>number</I> <B>cycles</B><b>)</b></com>
    <p><descr>executes the specified number of virtual CPU cycles. If <I>yield</I> is true, the CPU has completed the specified number of cycles and is ready to execute more. If <I>yield</I> is false, the execution has stopped because either an error was encountered, or the execution stopped gracefully. To distinguish the two cases, read the <I>errorCode</I> (0 = no error) and the <I>errorMessage</I>.</descr>
    <p>&nbsp;
  <li><i><com>LuaScript</i>:<b>delete()</com></b>
    <p><descr>deletes the interpreter.</descr>
</ul>
<p><a href="#index">Index</a>
<!--
<hr>
<p><a name="interpreter">
<h3>3.15 Interpreter</h3>
</a>The <b><class>Interpreter</class></b> class provides a mechanism to access
the CSL interpreter (refer to <a href="APOCALYX-manual-csl.htm#parti">Part VIII</a>).
When no more needed, the interpreter may be explicitly removed using the <i>delete()</i>
function to free the occupied memory.
<ul>
  <li><i><com>Interpreter</i> <b>Interpreter()</com></b>
    <p><descr>creates an interpreter of CSL scripts.</descr>
    <p>&nbsp;
  <li><i><com>Interpreter</i>:<b>delete()</com></b>
    <p><descr>deletes the interpreter.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Interpreter</i>:<b>setVar(</b><i>string</i> <b>varName</b>,
    <i>string</i> <b>varValue)</com></b>
    <p><descr>sets the value of an existing variable as a string. Returns the
    number of generated errors.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Interpreter</i>:<b>setNumVar(</b><i>string</i> <b>varName</b>,
    <i>number</i> <b>varValue)</com></b>
    <p><descr>sets the value of an existing variable as a number. Returns the
    number of generated errors.</descr>
    <p>&nbsp;
  <li><i><com>string</i> varValue, <i>number</i> errs = <i>Interpreter</i>:<b>getVar(</b><i>string</i>
    <b>varName)</com></b>
    <p><descr>returns the value of a variable as a string and the number of
    generated errors.</descr>
    <p>&nbsp;
  <li><i><com>number</i> varValue, <i>number</i> errs = <i>Interpreter</i>:<b>getNumVar(</b><i>string</i>
    <b>varName)</com></b>
    <p><descr>returns the value of a variable as a number and the number of
    generated errors.</descr>
    <p>&nbsp;
  <li><i><com>number</i> sizeof, <i>number</i> errs = <i>Interpreter</i>:<b>varSizeof(</b><i>string</i>
    <b>varName)</com></b>
    <p><descr>returns the size of the variable and the number of generated
    errors.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Interpreter</i>:<b>varResize(</b><i>string</i> <b>varName</b>,
    <i>string</i> <b>size)</com></b>
    <p><descr>sets the size of the variable and returns the number of generated
    errors.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Interpreter</i>:<b>loadString(</b><i>string</i> <b>source)</com></b>
    <p><descr>loads the specified source as a string and returns the number
    generated errors.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Interpreter</i>:<b>loadFile(</b><i>string</i> <b>fileName)</com></b>
    <p><descr>loads the specified file and returns the number of generated errors.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Interpreter</i>:<b>loadLibrary(</b><i>string</i> <b>dllName)</com></b>
    <p><descr>loads the specified library and returns the number generated
    errors. The library must contain two functions: <i>ZCslInitLib</i>, that is
    called on initialization, and <i>ZCslCleanupLib</i>, that is called when the
    library is unloaded.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Interpreter</i>:<b>call(</b><i>string</i> <b>funcName</b>,
    <i>table</i> <b>args)</com></b>
    <p><descr>calls the specified function with the given argument and returns
    the number of generated errors. Arguments must be zero ended strings.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Interpreter</i>:<b>callEx(</b><i>string</i> <b>funcName</b>,
    <i>table</i> <b>args)</com></b>
    <p><descr>calls the specified function with the given argument and returns
    the number of generated errors. Arguments can be strings with embedded zeros.</descr>
    <p>&nbsp;
  <li><i><com>string</i> retValue, <i>number</i> errs = <i>Interpreter</i>:<b>getResult()</com></b>
    <p><descr>returns the result of a function as a string and the number of
    generated errors.</descr>
    <p>&nbsp;
  <li><i><com>number</i> retValue, <i>number</i> errs = <i>Interpreter</i>:<b>getNumResult()</com></b>
    <p><descr>returns the result of a function as a number and the number of
    generated errors.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Interpreter</i>:<b>addFunc(</b><i>string</i> <b>header</b>,
    <i>cfunction</i> <b>func)</com></b>
    <p><descr>adds the specified function with the given header and returns the
    number of generated errors. The function must be compiled with the TinyC
    compiler and its reference retrieved with <i>Compiler:getFunction(string)</i>.
    The declaration of the C function must be <i>void f(ClsHandle)</i>.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Interpreter</i>:<b>addVar(</b><i>string</i> <b>varName</b>,
    <i>string</i> <b>initVal)</com></b>
    <p><descr>adds the specified new variable with the given initial value and
    returns the number of generated errors.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Interpreter</i>:<b>addConst(</b><i>string</i> <b>constName</b>,
    <i>string</i> <b>val)</com></b>
    <p><descr>adds the specified new constant with the given value and returns
    the number of generated errors.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Interpreter</i>:<b>setTraceNone()</com></b>
    <p><descr>sets the trace mode to none (nothing is traced) and returns the
    number of generated errors.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Interpreter</i>:<b>setTraceInfo()</com></b>
    <p><descr>sets the trace mode to info (functions, blocks and messages are
    traced) and returns the number of generated errors.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>Interpreter</i>:<b>setTraceAll()</com></b>
    <p><descr>sets the trace mode to all (functions, blocks, messages and code
    are traced) and returns the number of generated errors.</descr>
    <p>&nbsp;
  <li><i><com>string</i> error, <i>number</i> errs = <i>Interpreter</i>:<b>getError(</b><i>number</i>
    <b>index)</com></b>
    <p><descr>returns the error corresponding to <i>index</i> and the number of
    new generated errors.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="scriptengine">
<h3>3.16 ScriptEngine</h3>
</a>The <b><class>ScriptEngine</class></b> class provides a mechanism to access
the AngelScript interpreter (refer to <a href="APOCALYX-manual-angel.htm#parti">Part
VIII</a>). The built-in AngelScript interpreter has powerful features such as
step by step control of the instructions and memory management. This means that
a CSL script is suspended after a defined amount of execution steps and can
allocate only a defined amount of memory. These characteristics permit a fine
control of the script execution even when the source code of the script is
unknown.
<ul>
  <li><i><com>ScriptEngine</i> <b>ScriptEngine()</com></b>
    <p><descr>creates an interpreter of AngelCode scripts.</descr>
    <p>&nbsp;
  <li><i><com>ScriptEngine</i>:<b>delete()</com></b>
    <p><descr>deletes the interpreter.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptEngine</i>:<b>setDefaultThreadStackSize(</b><i>number</i>
    <b>initial</b> = 1024, <i>number</i> <b>maximum</b> = 0<b>)</com></b>
    <p><descr>defines the initial and maximum amount of memory used for the
    stack of every script thread created. All threads will use these values when
    allocating the stack size. The function returns true on success, false on
    failure.<br>
    The thread will always make sure there is enough stack size to execute the
    function, even if the initial stack size is set too low. If the maximum
    stack size is larger than 0 then the stack size will increase until the size
    has been reached. Each time the stack grows its size is doubled, which means
    that the stack size can be at most 2 times the maximum size.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptEngine</i>:<b>registerGlobalFunction(</b><i>string</i>
    <b>declaration</b>, <i>cfunction</i> <b>function)</com></b>
    <p><descr>registers a C function for access from AngelCode scripts. The
    function must be compiled with the TinyC compiler and its reference
    retrieved with <i>Compiler:getFunction(string)</i>. The function returns
    true on success, false on failure.<br>
    The declaration of the C function must be <i>void func_name(ScriptGeneric*
    arg)</i> and must follow the CALL_GENERIC convention of the AngelScript
    interface to pass the arguments and the returned value.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptEngine</i>:<b>registerGlobalProperty(</b><i>string</i>
    <b>declaration</b>, <i>userdata</i> <b>pointer)</com></b>
    <p><descr>registers a userdata (C pointer to memory location) for access
    from AngelCode scripts. The pointer must be compiled with the TinyC compiler
    and its reference retrieved with <i>Compiler:getPointer(string)</i>. The
    function returns true on success, false on failure.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptEngine</i>:<b>addScriptSection(</b><i>string</i>
    <b>moduleName</b>, <i>string</i> <b>sectionName</b>, <i>string</i> <b>codeSource)</com></b>
    <p><descr>add the source code of a script to a module giving the specified <i>sectionName</i>.
    The function returns true on success, false on failure.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptEngine</i>:<b>build(</b><i>string</i> <b>moduleName)</com></b>
    <p><descr>compiles the specified module. The function returns true on
    success, false on failure.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptEngine</i>:<b>discard(</b><i>string</i> <b>moduleName)</com></b>
    <p><descr>removes the specified module. The function returns true on
    success, false on failure.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptEngine</i>:<b>reset(</b><i>string</i> <b>moduleName)</com></b>
    <p><descr>resets the global variables of the specified module to their
    initial value. The function returns true on success, false on failure.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>ScriptEngine</i>:<b>getFunctionIDByDecl(</b><i>string</i>
    <b>moduleName</b>, <i>string</i> <b>declaration)</com></b>
    <p><descr>returns the identification number of the function that matches
    exactly the specified declaration. The function returns a negative value on
    failure.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>ScriptEngine</i>:<b>getGlobalVarIDByDecl(</b><i>string</i>
    <b>moduleName</b>, <i>string</i> <b>declaration)</com></b>
    <p><descr>returns the identification number of the global variable that
    matches exactly the specified declaration. The function returns a negative
    value on failure.</descr>
    <p>&nbsp;
  <li><i><com>userdata</i> <i>ScriptEngine</i>:<b>getGlobalVarPointer(</b><i>number</i>
    <b>globalVarID)</com></b>
    <p><descr>returns the pointer to the global variable with the specified
    identification number. The function returns <i>nil</i> on failure.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>ScriptEngine</i>:<b>getImportedFunctionIndexByDecl(</b><i>string</i>
    <b>moduleName</b>, <i>string</i> <b>declaration)</com></b>
    <p><descr>returns the index of the imported function that matches exactly
    the specified declaration. The function returns a negative value on failure.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptEngine</i>:<b>bindImportedFunction(</b><i>string</i>
    <b>moduleName</b>, <i>nuber</i> <b>importIndex</b>, <i>number</i> <b>funcID)</com></b>
    <p><descr>binds the function with the specified identification number to the
    imported function identified by the given index. The function returns true
    on success, false on failure.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptEngine</i>:<b>unbindImportedFunction(</b><i>string</i>
    <b>moduleName</b>, <i>nuber</i> <b>importIndex)</com></b>
    <p><descr>unbinds the imported function identified by the given index. The
    function returns true on success, false on failure.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptEngine</i>:<b>bindAllImportedFunction(</b><i>string</i>
    <b>moduleName)</com></b>
    <p><descr>binds all the imported functions in the suggested module matching
    the exact declarations. The function returns true on success, false on
    failure.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptEngine</i>:<b>unbindAllImportedFunction(</b><i>string</i>
    <b>moduleName)</com></b>
    <p><descr>unbinds all the imported functions in the module. The function
    returns true on success, false on failure.</descr>
    <p>&nbsp;
  <li><i><com>ScriptThread</i> <i>ScriptEngine</i>:<b>createThread(</b><i>number</i>
    maxAllocableHeap<b>)</com></b>
    <p><descr>creates a thread with the given maximum allocable heap.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>ScriptEngine</i>:<b>garbageCollect(</b><i>boolean</i>
    <b>doFullCycle</b> = true<b>)</com></b>
    <p><descr>executes a full or partial garbage collect cycle. Returns 1 if the
    cycle wasn't completed yet, or 0 if it is was. If an error occurs the value
    is negative.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>ScriptEngine</i>:<b>getObjectsInGarbageCollectorCount()</com></b>
    <p><descr>returns the number of objects that the garbage collector keeps
    track of.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptEngine</i>:<b>saveByteCode(</b><i>string</i> <b>module</b>,
    <i>string</i> <b>fileName)</com></b>
    <p><descr>saves the compiled bytecode in the given module to the file with
    the specified name. It returns true on success.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptEngine</i>:<b>loadByteCode(</b><i>string</i> <b>module</b>,
    <i>string</i> <b>fileName)</com></b>
    <p><descr>loads the compiled bytecode in the given module from the file with
    the specified name. It returns true on success.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="scriptthread">
<h4>3.16.1 ScriptThread</h4>
</a>The <b><class>ScriptThread</class></b> class represents a thread executed by
the <i>ScriptEngine</i>.
<ul>
  <li><i><com>ScriptThread</i>:<b>delete()</com></b>
    <p><descr>deletes the thread.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptThread</i>:<b>isUninitialized()</com></b>
    <p><descr>returns true if the thread is waiting for initialization.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptThread</i>:<b>isPrepared()</com></b>
    <p><descr>returns true if the thread was prepared for execution.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptThread</i>:<b>isSuspended()</com></b>
    <p><descr>returns true if the execution of the thread was suspended (normal
    state when the execution is running).</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptThread</i>:<b>hadError()</com></b>
    <p><descr>returns true if the execution of the thread was terminated for an
    error.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptThread</i>:<b>hadException()</com></b>
    <p><descr>returns true if the execution of the thread was terminated for an
    exception.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptThread</i>:<b>isAborted()</com></b>
    <p><descr>returns true if the execution of the thread was aborted.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptThread</i>:<b>isFinished()</com></b>
    <p><descr>returns true if the execution of the thread was terminated
    correctly.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptThread</i>:<b>prepare(</b><i>number</i> <b>funcIndex)</com></b>
    <p><descr>prepares the thread for execution providing the index of a
    function. It returns true if the thread was prepared successfully.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptThread</i>:<b>execute(</b><i>number</i> <b>instructionsCount)</com></b>
    <p><descr>executes the thread for the specified amount of bytecode
    instructions. It returns true if the execution was terminated (successfully,
    for an error, exception or abort command), false if the execution was
    suspended and waits for another <i>execute()</i> to continue.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptThread</i>:<b>abort()</com></b>
    <p><descr>aborts the thread.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptThread</i>:<b>setArgInt(</b><i>number</i> <b>index</b>,
    <i>number</i> <b>value)</com></b>
    <p><descr>sets the integer argument corresponding to index to the given
    value.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptThread</i>:<b>setArgFloat(</b><i>number</i> <b>index</b>,
    <i>number</i> <b>value)</com></b>
    <p><descr>sets the floating point argument in single precision corresponding
    to index to the given value.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptThread</i>:<b>setArgDouble(</b><i>number</i> <b>index</b>,
    <i>number</i> <b>value)</com></b>
    <p><descr>sets the floating point argument in double precision corresponding
    to index to the given value.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>ScriptThread</i>:<b>setArgObject(</b><i>number</i> <b>index</b>,
    <i>userdata</i> <b>value)</com></b>
    <p><descr>sets the user data argument corresponding to index to the given
    value.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>ScriptThread</i>:<b>getReturnInt()</com></b>
    <p><descr>returns the integer value returned by the finished thread.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>ScriptThread</i>:<b>getReturnFloat()</com></b>
    <p><descr>returns the floating point number in single precision returned by
    the finished thread.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>ScriptThread</i>:<b>getReturnDouble()</com></b>
    <p><descr>returns the floating point number in double precision returned by
    the finished thread.</descr>
    <p>&nbsp;
  <li><i><com>userdata</i> <i>ScriptThread</i>:<b>getReturnObject()</com></b>
    <p><descr>returns the user data returned by the finished thread.</descr>
</ul>
<p><a href="#index">Index</a>
-->
<hr>
<p><a name="pathfinder">
<h3>3.17 PathFinder</h3>
</a>The <b><class>PathFinder</class></b> class extends <b><parent>Void</parent></b>
and uses the A* path finding algorithm to find the best path in a graph. The
graph is specified by a set of links that connect nodes. Every link has an
asociated cost, possibly different if the link is followed from a node to the
other or vice versa.
<ul>
  <li><i><com>PathFinder</i> <b>PathFinder()</com></b>
    <p><descr>creates a path finder object.</descr>
    <p>&nbsp;
  <li><i><com>PathFinder</i>:<b>delete()</com></b>
    <p><descr>deletes the path finder.</descr>
    <p>&nbsp;
  <li><i><com>PathFinder</i>:<b>setLeastCostEstimate(</b><i>cfunction</i> <b>function)</com></b>
    <p><descr>specifies the C function used to compute an esimate of the least
    cost between two nodes. The function must be compiled with the TinyC
    compiler and its reference retrieved with <i>Compiler:getFunction(string)</i>.<br>
    The declaration of the C function must be <i>float func_name(int nodeA, int
    nodeB)</i>, where the integer arguments are the indexes of the nodes and the
    returned value is the estimated cost. The node indexes must be positive
    numbers.</descr>
    <p>&nbsp;
  <li><i><com>PathFinder</i>:<b>setAdjacentCost(</b><i>cfunction</i> <b>function)</com></b>
    <p><descr>specifies the C function used to retrieve the neighbors of a node
    and their relative costs. The function must be compiled with the TinyC
    compiler and its reference retrieved with <i>Compiler:getFunction(string)</i>.<br>
    The declaration of the C function must be <i>int func_name(int node, int**
    neighs, float** costs)</i>, where the returned value is the number of
    neighbors of the given node (that must be a positive number) and the
    arguments contain pointers to the integer array of the neighbors and to the
    corresponding floating array of costs.</descr>
    <p>&nbsp;
  <li><i><com>PathFinder</i>:<b>reset()</com></b>
    <p><descr>resets the path finder: necessary if the graph is modified after a
    solve.</descr>
    <p>&nbsp;
  <li><i><com>boolean</i> <i>PathFinder</i>:<b>solve(</b><i>number</i> <b>startNode</b>,
    <i>number</i> <b>endNode</b>, <i>PathFound</i> <b>path)</com></b>
    <p><descr>finds the best path from <i>startNode</i> to <i>endNode</i> using
    the A* algorithm. The result is stored in the specified <i>path</i> object.
    Returns <i>true</i> on success.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="pathfound">
<h4>3.17.1 PathFound</h4>
</a>The <b><class>PathFound</class></b> class extends <b><parent>Void</parent></b>
and represents an object that contains the information about a path find by a
path finder.
<ul>
  <li><i><com>PathFound</i> <b>PathFound()</com></b>
    <p><descr>creates a path object.</descr>
    <p>&nbsp;
  <li><i><com>PathFound</i>:<b>delete()</com></b>
    <p><descr>deletes the path.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>PathFound</i>:<b>getCost()</com></b>
    <p><descr>returns the cost of the path.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>PathFound</i>:<b>getSize()</com></b>
    <p><descr>returns the number of nodes in the path.</descr>
    <p>&nbsp;
  <li><i><com>number</i> <i>PathFound</i>:<b>getNode(</b><i>number</i> <b>index)</com></b>
    <p><descr>returns the identification number of the node at <i>index</i> in
    the path.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="steervehicle">
<h3>3.18 SteerVehicle</h3>
</a>The <b><class>SteerVehicle</class></b> class represents a vehicle (moving
object) with steering behaviors. It encapsulates the some of the features of the
<i>OpenSteer</i> library.
<ul>
  <li><com><i>SteerVehicle</i> <b>SteerVehicle()</b></com>
    <p><descr>creates a vehicle.</descr>
    <p>&nbsp;
  <li><com><i>SteerVehicle</i>:<b>delete()</b></com>
    <p><descr>deletes the vehicle.</descr>
    <p>&nbsp;
  <li><com><i>SteerVehicle</i>:<b>setMass(</b><i>number</i> <b>m</b><b>)</b></com>
    <p><descr>sets the mass of the vehicle.</descr>
    <p>&nbsp;
  <li><com><i>SteerVehicle</i>:<b>setSpeed(</b><i>number</i> <b>s</b><b>)</b></com>
    <p><descr>sets the speed of the vehicle.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>SteerVehicle</i>:<b>getSpeed(</b><b>)</b></com>
    <p><descr>returns the speed of the vehicle.</descr>
    <p>&nbsp;
  <li><com><i>number</i> vx, <i>number</i> vy, <i>number</i> vz = <i>SteerVehicle</i>:<b>getVelocity(</b><b>)</b></com>
    <p><descr>returns the velocity of the vehicle.</descr>
    <p>&nbsp;
  <li><com><i>SteerVehicle</i>:<b>setRadius(</b><i>number</i> <b>r</b><b>)</b></com>
    <p><descr>sets the radius of the vehicle.</descr>
    <p>&nbsp;
  <li><com><i>SteerVehicle</i>:<b>setMaxForce(</b><i>number</i> <b>f</b><b>)</b></com>
    <p><descr>sets the maximum intensity of the force applied to steer.</descr>
    <p>&nbsp;
  <li><com><i>SteerVehicle</i>:<b>setMaxSpeed(</b><i>number</i> <b>s</b><b>)</b></com>
    <p><descr>sets the maximum value of speed.</descr>
    <p>&nbsp;
  <li><com><i>SteerVehicle</i>:<b>applyForce(</b><i>number</i> <b>fx</b>, <i>number</i>
    <b>fy</b>, <i>number</i> <b>fz</b>, <i>number</i> <b>dt</b><b>)</b></com>
    <p><descr>applies the specified force to the vehicle with <i>dt</i> of
    impulse duration.</descr>
    <p>&nbsp;
  <li><com><i>SteerVehicle</i>:<b>regenerateTransform(</b><i>number</i> <b>vx</b>,
    <i>number</i> <b>vy</b>, <i>number</i> <b>vz</b>, <i>numer</i> <b>elapsedTime</b><b>)</b></com>
    <p><descr>keeps forward parallel to the new velocity changing the up
    direction as little as possible.</descr>
    <p>&nbsp;
  <li><com><i>SteerVehicle</i>:<b>applyBrakingForce(</b><i>number</i> <b>rate</b>,
    <i>numer</i> <b>dt</b><b>)</b></com>
    <p><descr>brakes the vehicle according to the given <i>rate</i> and time
    step <i>dt</i>.</descr>
    <p>&nbsp;
  <li><com><i>number</i> x, <i>number</i> y, <i>number</i> z = <i>SteerVehicle</i>:<b>predictFuturePosition(</b><i>numer</i>
    <b>dt</b><b>)</b></com>
    <p><descr>predicts the position of the vehicle within time <i>dt</i>.</descr>
    <p>&nbsp;
  <li><com><i>SteerVehicle</i>:<b>randomizeHeading(</b><b>)</b></com>
    <p><descr>chooses an heading (direction in the XZ plane) at random.</descr>
    <p>&nbsp;
  <li><com><i>SteerVehicle</i>:<b>setTransform(</b><i>Reference</i> <b>ref</b><b>)</b></com>
    <p><descr>changes the transform of the vehicle according to the transform of
    the given reference.</descr>
    <p>&nbsp;
  <li><com><i>SteerVehicle</i>:<b>resetTransform(</b><b>)</b></com>
    <p><descr>resets the transform of the vehicle.</descr>
    <p>&nbsp;
  <li><com><i>number</i> x, <i>number</i> y, <i>number</i> z = <i>SteerVehicle</i>:<b>getSide(</b><b>)</b></com>
    <p><descr>returns the side direction of the vehicle.</descr>
    <p>&nbsp;
  <li><com><i>number</i> x, <i>number</i> y, <i>number</i> z = <i>SteerVehicle</i>:<b>getUp(</b><b>)</b></com>
    <p><descr>returns the up direction of the vehicle.</descr>
    <p>&nbsp;
  <li><com><i>number</i> x, <i>number</i> y, <i>number</i> z = <i>SteerVehicle</i>:<b>getForward(</b><b>)</b></com>
    <p><descr>returns the forward direction of the vehicle.</descr>
    <p>&nbsp;
  <li><com><i>number</i> x, <i>number</i> y, <i>number</i> z = <i>SteerVehicle</i>:<b>getPosition(</b><b>)</b></com>
    <p><descr>returns the position of the vehicle.</descr>
    <p>&nbsp;
  <li><com><i>SteerVehicle</i>:<b>getTransform(</b><i>Reference</i> <b>ref</b><b>)</b></com>
    <p><descr>changes the transform of the given reference according to the
    transform of the vehicle.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>SteerVehicle</i>:<b>predictNearestApproachTime(</b><i>SteerVehicle</i>
    <b>other</b><b>)</b></com>
    <p><descr>returns the time for the nearest approach to another vehicle.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>SteerVehicle</i>:<b>isAhead(</b><i>SteerVehicle</i>
    <b>other</b><b>)</b></com>
    <p><descr>returns true if the other vehicle is ahead.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>SteerVehicle</i>:<b>isAside(</b><i>SteerVehicle</i>
    <b>other</b><b>)</b></com>
    <p><descr>returns true if the other vehicle is aside.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>SteerVehicle</i>:<b>isBehind(</b><i>SteerVehicle</i>
    <b>other</b><b>)</b></com>
    <p><descr>returns true if the other vehicle is behind.</descr>
    <p>&nbsp;
  <li><com><i>SteerVehicle</i>:<b>updateProximity(</b><b>)</b></com>
    <p><descr>updates the position of this vehicle in the proximity database (if
    one is in use).</descr>
    <p>&nbsp;
  <li><com><i>SteerVehicle</i>:<b>findNeighbors(</b><i>number</i> <b>centerX</b>,
    <i>number</i> <b>centerY</b>, <i>number</i> <b>centerZ</b>, <i>number</i> <b>radius</b>,
    <i>SteerVehicleGroup</i> <b>neighbors</b><b>)</b></com>
    <p><descr>fills the neighbors group with all the vehicles found in the
    sphere of given center and radius. A proximity database must be in use with
    this vehicle allocated and the group must be explicitly cleared before.</descr>
    <p>&nbsp;
    <p><b><i>STEERING BEHAVIORS</i></b>
    <p>&nbsp;
  <li><com><i>number</i> fx, <i>number</i> fy, <i>number</i> fz = <i>SteerVehicle</i>:<b>wander(</b><i>number</i>
    <b>dt</b><b>)</b></com>
    <p><descr>returns the force necessary to wander (random walk).</descr>
    <p>&nbsp;
  <li><com><i>number</i> fx, <i>number</i> fy, <i>number</i> fz = <i>SteerVehicle</i>:<b>seek(</b><i>number</i>
    <b>targetX</b>, <i>number</i> <b>targetY</b>, <i>number</i> <b>targetZ</b><b>)</b></com>
    <p><descr>returns the force necessary to seek the given target.</descr>
    <p>&nbsp;
  <li><com><i>number</i> fx, <i>number</i> fy, <i>number</i> fz = <i>SteerVehicle</i>:<b>flee(</b><i>number</i>
    <b>targetX</b>, <i>number</i> <b>targetY</b>, <i>number</i> <b>targetZ</b><b>)</b></com>
    <p><descr>returns the force necessary to flee the given target.</descr>
    <p>&nbsp;
  <li><com><i>number</i> fx, <i>number</i> fy, <i>number</i> fz = <i>SteerVehicle</i>:<b>followPath(</b><i>number</i>
    <b>direction</b>, <i>number</i> <b>predictionTime</b>, <i>SteerPathway</i> <b>pathway</b><b>)</b></com>
    <p><descr>returns the force necessary to follow the path in the given
    direction (-1 or 1) taking into account the prediction time.</descr>
    <p>&nbsp;
  <li><com><i>number</i> fx, <i>number</i> fy, <i>number</i> fz = <i>SteerVehicle</i>:<b>stayOnPath(</b><i>number</i>
    <b>predictionTime</b>, <i>SteerPathway</i> <b>pathway</b><b>)</b></com>
    <p><descr>returns the force necessary to stay on the path taking into
    account the prediction time.</descr>
    <p>&nbsp;
  <li><com><i>number</i> fx, <i>number</i> fy, <i>number</i> fz = <i>SteerVehicle</i>:<b>avoidObstacle(</b><i>number</i>
    <b>minTimeToCollision</b>, <i>SteerObstacle</i> <b>obstacle</b><b>)</b></com>
    <p><descr>returns the force necessary to avoid the obstacle taking into
    account the given minimum time.</descr>
    <p>&nbsp;
  <li><com><i>number</i> fx, <i>number</i> fy, <i>number</i> fz = <i>SteerVehicle</i>:<b>avoidObstacles(</b><i>number</i>
    <b>minTimeToCollision</b>, <i>SteerObstacleGroup</i> <b>obstacles</b><b>)</b></com>
    <p><descr>returns the force necessary to avoid the obstacles taking into
    account the given minimum time.</descr>
    <p>&nbsp;
  <li><com><i>number</i> fx, <i>number</i> fy, <i>number</i> fz = <i>SteerVehicle</i>:<b>avoidNeighbors(</b><i>number</i>
    <b>minTimeToCollision</b>, <i>SteerVehicleGroup</i> <b>vehicles</b><b>)</b></com>
    <p><descr>returns the force necessary to avoid the obstacles taking into
    account the given minimum time.</descr>
    <p>&nbsp;
  <li><com><i>number</i> fx, <i>number</i> fy, <i>number</i> fz = <i>SteerVehicle</i>:<b>separation(</b><i>number</i>
    <b>maxDist</b>, <i>number</i> <b>maxCosAngle</b>, <i>SteerVehicleGroup</i> <b>flock</b><b>)</b></com>
    <p><descr>returns the force necessary to separate the vehicle from the others
    in the flock.</descr>
    <p>&nbsp;
  <li><com><i>number</i> fx, <i>number</i> fy, <i>number</i> fz = <i>SteerVehicle</i>:<b>alignment(</b><i>number</i>
    <b>maxDist</b>, <i>number</i> <b>maxCosAngle</b>, <i>SteerVehicleGroup</i> <b>flock</b><b>)</b></com>
    <p><descr>returns the force necessary to align the velocity of the vehicle
    with the velocities of the others in the flock.</descr>
    <p>&nbsp;
  <li><com><i>number</i> fx, <i>number</i> fy, <i>number</i> fz = <i>SteerVehicle</i>:<b>cohesion(</b><i>number</i>
    <b>maxDist</b>, <i>number</i> <b>maxCosAngle</b>, <i>SteerVehicleGroup</i> <b>flock</b><b>)</b></com>
    <p><descr>returns the force necessary to close togheter the vehicle with the
    others in the flock.</descr>
    <p>&nbsp;
  <li><com><i>number</i> fx, <i>number</i> fy, <i>number</i> fz = <i>SteerVehicle</i>:<b>pursuit(</b><i>SteerVehicle</i>
    <b>target</b>, <i>number</i> <b>maxTime</b> = -1<b>)</b></com>
    <p><descr>returns the force necessary to pursuit the target with a
    prediction time of <i>maxTime</i> (if positive).</descr>
    <p>&nbsp;
  <li><com><i>number</i> fx, <i>number</i> fy, <i>number</i> fz = <i>SteerVehicle</i>:<b>evasion(</b><i>SteerVehicle</i>
    <b>target</b>, <i>number</i> <b>maxTime</b><b>)</b></com>
    <p><descr>returns the force necessary to evade the target with a prediction
    time of <i>maxTime</i>.</descr>
    <p>&nbsp;
  <li><com><i>number</i> fx, <i>number</i> fy, <i>number</i> fz = <i>SteerVehicle</i>:<b>targetSpeed(</b><i>number</i>
    <b>s</b><b>)</b></com>
    <p><descr>returns the force necessary to match the given speed.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="steervehiclegroup">
<h4>3.18.1 SteerVehicleGroup</h4>
</a>The <b><class>SteerVehicleGroup</class></b> class represents a group of
vehicles.
<ul>
  <li><com><i>SteerVehicleGroup</i> <b>SteerVehicleGroup()</b></com>
    <p><descr>creates a group of vehicles.</descr>
    <p>&nbsp;
  <li><com><i>SteerVehicleGroup</i>:<b>delete()</b></com>
    <p><descr>deletes the group of vehicles.</descr>
    <p>&nbsp;
  <li><com><i>SteerVehicleGroup</i>:<b>add(</b><i>SteerVehicle</i> <b>vehicle</b><b>)</b></com>
    <p><descr>adds a vehicle to the group.</descr>
    <p>&nbsp;
  <li><com><i>SteerVehicleGroup</i>:<b>remove(</b><i>SteerVehicle</i> <b>vehicle</b><b>)</b></com>
    <p><descr>removes a vehicle from the group.</descr>
    <p>&nbsp;
  <li><com><i>SteerVehicleGroup</i>:<b>clear(</b><b>)</b></com>
    <p><descr>removes all the vehicles from the group.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>SteerVehicleGroup</i>:<b>isEmpty(</b><b>)</b></com>
    <p><descr>returns true if the group is empty.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="steerobstacle">
<h4>3.18.2 SteerObstacle</h4>
</a>The <b><class>SteerObstacle</class></b> class represents an obstacle on the
path of vehicles.
<ul>
  <p>&nbsp;
  <li><com><i>SteerObstacle</i>:<b>delete()</b></com>
    <p><descr>deletes the obstacle.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="steerobstaclegroup">
<h5>3.18.2.1 SteerObstacleGroup</h5>
</a>The <b><class>SteerObstacleGroup</class></b> class represents a group of
obstacles.
<ul>
  <li><com><i>SteerObstacleGroup</i> <b>SteerObstacleGroup()</b></com>
    <p><descr>creates a group of obstacles.</descr>
    <p>&nbsp;
  <li><com><i>SteerObstacleGroup</i>:<b>delete()</b></com>
    <p><descr>deletes the group of obstacles.</descr>
    <p>&nbsp;
  <li><com><i>SteerObstacleGroup</i>:<b>add(</b><i>SteerObstacle</i> <b>obstacle</b><b>)</b></com>
    <p><descr>adds an obstacle to the group.</descr>
    <p>&nbsp;
  <li><com><i>SteerObstacleGroup</i>:<b>remove(</b><i>SteerObstacle</i> <b>obstacle</b><b>)</b></com>
    <p><descr>removes an obstacle from the group.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>SteerObstacleGroup</i>:<b>isEmpty(</b><b>)</b></com>
    <p><descr>returns true if the group is empty.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="steersphericalobstacle">
<h5>3.18.2.2 SteerSphericalObstacle</h5>
</a>The <b><class>SteerSphericalObstacle</class></b> class extends <i><parent>SteerObstacle</parent></i>,
inherits all its methods and represents a spherical obstacle.
<ul>
  <li><com><i>SteerSphericalObstacle</i> <b>SteerSphericalObstacle()</b></com>
    <p><descr>creates a spherical obstacle.</descr>
    <p>&nbsp;
  <li><com><i>SteerObstacleGroup</i>:<b>setRadius(</b><i>number</i> <b>radius</b><b>)</b></com>
    <p><descr>sets the radius of the obstacle.</descr>
    <p>&nbsp;
  <li><com><i>SteerObstacleGroup</i>:<b>setCenter(</b><i>number</i> <b>x</b>, <i>number</i>
    <b>y</b>, <i>number</i> <b>z</b><b>)</b></com>
    <p><descr>sets the position of the obstacle.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="steerpathway">
<h4>3.18.3 SteerPathway</h4>
</a>The <b><class>SteerPathway</class></b> class represents a pathway that the
vehicles must follow.
<ul>
  <p>&nbsp;
  <li><com><i>SteerPathway</i>:<b>delete()</b></com>
    <p><descr>deletes the pathway.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="steerpolylinepathway">
<h5>3.18.3.1 SteerPolylinePathway</h5>
</a>The <b><class>SteerPolylinePathway</class></b> class extends <i><parent>SteerPathway</parent></i>,
inherits all its methods and represents a path that follows a polyline.
<ul>
  <li><com><i>SteerPolylinePathway</i> <b>SteerPolylinePathway(</b><i>table</i> <b>points</b>,
    <i>number</i> <b>radius</b>, <i>boolean</i> <b>cyclic</b> = true<b>)</b></com>
    <p><descr>creates a polyline pathway. The table contains a list of
    coordinates in the x, y, z order, one sequence for each point, so if the
    points are <i>n</i> the table contains <i>3*n</i> coordinates. The <i>radius</i>
    specifies half width of the pathway. The optional <i>cyclic</i> argument
    specifies if the pathway is closed or not.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="steerproximity">
<h4>3.18.4 SteerProximity</h4>
</a>The <b><class>SteerProximity</class></b> class represents a proximity
database to speed up the search for neighbors of vehicles. Two methods are
available: brute force and locality query. The latter subdivides the space in
regions and a faster search is possible.
<ul>
  <li><com><i>SteerProximity</i> <b>SteerProximityBruteForce()</b></com>
    <p><descr>creates a proximity database that applies the brute force
    algorithm.</descr>
    <p>&nbsp;
  <li><com><i>SteerProximity</i> <b>SteerProximityLocalityQuery(</b> <i>number</i>
    <b>centerX</b>, <i>number</i> <b>centerY</b>, <i>number</i> <b>centerZ</b>, <i>number</i>
    <b>dimensionX</b>, <i>number</i> <b>dimensionY</b>, <i>number</i> <b>dimensionZ</b>,
    <i>number</i> <b>divisionX</b>, <i>number</i> <b>divisionY</b>, <i>number</i>
    <b>divisionZ</b> <b>)</b></com>
    <p><descr>creates a proximity database that applies the locality query
    algorithm. The search space has the given center, dimensions and it is
    partitioned in the specified subdivisions along the axis.</descr>
    <p>&nbsp;
  <li><com><i>SteerProximity</i>:<b>delete()</b></com>
    <p><descr>deletes the proximity database.</descr>
    <p>&nbsp;
  <li><com><i>SteerProximity</i>:<b>allocate(</b><i>SteerVehicle</i> <b>vehicle</b><b>)</b></com>
    <p><descr>allocates the specified vehicle in the database.</descr>
    <p>&nbsp;
  <li><com><i>SteerProximity</i>:<b>free(</b><i>SteerVehicle</i> <b>vehicle</b><b>)</b></com>
    <p><descr>removes the specified vehicle from the database.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>SteerProximity</i>:<b>getPopulation(</b><b>)</b></com>
    <p><descr>returns the number of tokens allocated in the database.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="finitestatemachine">
<h3>3.19 FiniteStateMachine</h3>
</a>The <b><class>FiniteStateMachine</class></b> (FSM) class represents an
entity that can exist in several different states. Transitions triggered by
events, possibly subject to certain conditions, make the machines pass from one
state to the other. Transitions may be associated with actions as well as
eneting or leaving the states. Actions are of three kind: setting a variable,
incrementing a variable and calling a LUA function.
<ul>
  <li><com><i>FiniteStateMachine</i> <b>FiniteStateMachine()</b></com>
    <p><descr>creates a FSM.</descr>
    <p>&nbsp;
  <li><com><i>FiniteStateMachine</i>:<b>delete()</b></com>
    <p><descr>deletes the FSM.</descr>
    <p>&nbsp;
  <li><com><i>FiniteStateMachine</i>:<b>load(</b><i>string</i> <b>fileName</b><b>)</b></com>
    <p><descr>loads the contents of the FSM.</descr>
    <p>&nbsp;
  <li><com><i>FiniteStateMachine</i>:<b>save(</b><i>string</i> <b>fileName</b><b>)</b></com>
    <p><descr>saves the contents of the FSM.</descr>
    <p>&nbsp;
  <li><com><i>FsmState</i> <i>FiniteStateMachine</i>:<b>addState(</b><i>string</i>
    <b>stateName</b><b>)</b></com>
    <p><descr>creates a state, adds it to the FSM and returns it.</descr>
    <p>&nbsp;
  <li><com><i>FsmState</i> <i>FiniteStateMachine</i>:<b>getState(</b><i>string</i>
    <b>stateName</b><b>)</b></com>
    <p><descr>returns the state with the given name.</descr>
    <p>&nbsp;
  <li><com><i>FsmState</i> <i>FiniteStateMachine</i>:<b>getStateFromIndex(</b><i>number</i>
    <b>index</b><b>)</b></com>
    <p><descr>returns the state corresponding to the index.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>FiniteStateMachine</i>:<b>getStateCount(</b><b>)</b></com>
    <p><descr>returns the number of states in this FSM.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>FiniteStateMachine</i>:<b>addVariable(</b><i>string</i>
    <b>varName</b>, <i>number</i> <b>value</b> = 0<b>)</b></com>
    <p><descr>adds a new integer variable to the FSM with the given initial
    value. Returns false on error.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>FiniteStateMachine</i>:<b>deleteVariable(</b><i>string</i>
    <b>varName</b><b>)</b></com>
    <p><descr>deletes an integer variable from the FSM. Returns false on error.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>FiniteStateMachine</i>:<b>setVariable(</b><i>string</i>
    <b>varName</b>, <i>number</i> <b>value</b> = 0<b>)</b></com>
    <p><descr>sets an integer variable to given initial value. Returns false on
    error.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>FiniteStateMachine</i>:<b>getVariable(</b><i>string</i>
    <b>varName</b><b>)</b></com>
    <p><descr>returns the value of the variable or <i>nil</i> on error.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>FiniteStateMachine</i>:<b>setInitialState(</b><i>string</i>
    <b>stateName</b><b>)</b></com>
    <p><descr>sets the initial value of the FSM. Returns false on error.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>FiniteStateMachine</i>:<b>start(</b><b>)</b></com>
    <p><descr>starts the FSM. Returns false on error.</descr>
    <p>&nbsp;
  <li><com><i>FiniteStateMachine</i>:<b>stop(</b><b>)</b></com>
    <p><descr>stops the FSM.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>FiniteStateMachine</i>:<b>processEvent(</b><i>string</i>
    <b>eventName</b><b>)</b></com>
    <p><descr>sends the specified event to the FSM. Returns false on error.</descr>
    <p>&nbsp;
  <li><com><i>FsmState</i> <i>FiniteStateMachine</i>:<b>getCurrentState(</b><b>)</b></com>
    <p><descr>returns the current state of the FSM.</descr>
    <p>&nbsp;
  <li><com><i>FiniteStateMachine</i>:<b>clear(</b><b>)</b></com>
    <p><descr>clears all the variables of the FSM.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>FiniteStateMachine</i>:<b>switchToState(</b><i>FsmState</i>
    <b>state</b><b>)</b></com>
    <p><descr>switches the FSM to the specified state.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="fsmstate">
<h4>3.19.1 FsmState</h4>
</a>The <b><class>FsmState</class></b> class represents a single state of the
FSM.
<ul>
  <li><com><i>FsmTransition</i> <i>FsmState</i>:<b>addTransition(<b><i>FsmState</i>
    <b>toState</b>, <i>string</i> <b>eventName</b></b>)</b></com>
    <p><descr>creates a transition with the given destination state and trigger
    event, adds it to the current state and returns it.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>FsmState</i>:<b>getTransitionCount(<b></b>)</b></com>
    <p><descr>returns the number of transitions of this state.</descr>
    <p>&nbsp;
  <li><com><i>FsmTransition</i> <i>FsmState</i>:<b>getTransition(<b><i>number</i>
    <b>index</b></b>)</b></com>
    <p><descr>returns the transition of this state corresponding to index.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>FsmState</i>:<b>deleteTransition(<b><i>FsmTransition</i>
    <b>transition</b></b>)</b></com>
    <p><descr>deletes the transition added to this state. Returns false on
    error.</descr>
    <p>&nbsp;
  <li><com><i>FsmActionSet</i> <i>FsmState</i>:<b>addEnterActionSet(<b></b>)</b></com>
    <p><descr>creates an <i>ActionSet</i> and attaches it to the enter event of
    this state.</descr>
    <p>&nbsp;
  <li><com><i>FsmActionIncr</i> <i>FsmState</i>:<b>addEnterActionIncr(<b></b>)</b></com>
    <p><descr>creates an <i>ActionIncr</i> and attaches it to the enter event of
    this state.</descr>
    <p>&nbsp;
  <li><com><i>FsmActionCall</i> <i>FsmState</i>:<b>addEnterActionCall(<b></b>)</b></com>
    <p><descr>creates an <i>ActionCall</i> and attaches it to the enter event of
    this state.</descr>
    <p>&nbsp;
  <li><com><i>FsmActionSet</i> <i>FsmState</i>:<b>addLeaveActionSet(<b></b>)</b></com>
    <p><descr>creates an <i>ActionSet</i> and attaches it to the leave event of
    this state.</descr>
    <p>&nbsp;
  <li><com><i>FsmActionIncr</i> <i>FsmState</i>:<b>addLeaveActionIncr(<b></b>)</b></com>
    <p><descr>creates an <i>ActionIncr</i> and attaches it to the leave event of
    this state.</descr>
    <p>&nbsp;
  <li><com><i>FsmActionCall</i> <i>FsmState</i>:<b>addLeaveActionCall(<b></b>)</b></com>
    <p><descr>creates an <i>ActionCall</i> and attaches it to the leave event of
    this state.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>FsmState</i>:<b>deleteAction(<b><i>FsmAction</i> <b>action</b></b>)</b></com>
    <p><descr>deletes an action. Returs false on error.</descr>
    <p>&nbsp;
  <li><com><i>FsmAction</i> <i>FsmState</i>:<b>getEnterAction(<b><i>number</i> <b>index</b></b>)</b></com>
    <p><descr>returns the enter action corresponding to index.</descr>
    <p>&nbsp;
  <li><com><i>FsmAction</i> <i>FsmState</i>:<b>getLeaveAction(<b><i>number</i> <b>index</b></b>)</b></com>
    <p><descr>returns the leave action corresponding to index.</descr>
    <p>&nbsp;
  <li><com><i>string</i> <i>FsmState</i>:<b>getName(<b></b>)</b></com>
    <p><descr>returns the name of the state.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="fsmtransition">
<h4>3.19.2 FsmTransition</h4>
</a>The <b><class>FsmTransition</class></b> class represents a transition
between two states triggered by an event and possibly subject to a condition.
<ul>
  <li><com><i>FsmActionSet</i> <i>FsmTransition</i>:<b>addActionSet(<b></b>)</b></com>
    <p><descr>creates an <i>ActionSet</i> and attaches it to the transition.</descr>
    <p>&nbsp;
  <li><com><i>FsmActionIncr</i> <i>FsmTransition</i>:<b>addActionIncr(<b></b>)</b></com>
    <p><descr>creates an <i>ActionIncr</i> and attaches it to the transition.</descr>
    <p>&nbsp;
  <li><com><i>FsmActionCall</i> <i>FsmTransition</i>:<b>addActionCall(<b></b>)</b></com>
    <p><descr>creates an <i>ActionCall</i> and attaches it to the transition.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>FsmTransition</i>:<b>deleteAction(<b><i>FsmAction</i>
    <b>action</b></b>)</b></com>
    <p><descr>deletes an action attached to this transition.</descr>
    <p>&nbsp;
  <li><com><i>FsmAction</i> <i>FsmTransition</i>:<b>getAction(<b><i>number</i> <b>index</b></b>)</b></com>
    <p><descr>returns the action corresponding to the index.</descr>
    <p>&nbsp;
  <li><com><i>FsmCondition</i> <i>FsmTransition</i>:<b>addCondition(<b></b>)</b></com>
    <p><descr>creates a condition for the transition.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>FsmTransition</i>:<b>deleteCondition(<b><i>FsmCondition</i>
    <b>condition</b></b>)</b></com>
    <p><descr>deletes a condition for this transition.</descr>
    <p>&nbsp;
  <li><com><i>FsmCondition</i> <i>FsmTransition</i>:<b>getCondition(<b><i>number</i>
    <b>index</b></b>)</b></com>
    <p><descr>returns the condition corresponding to the index.</descr>
    <p>&nbsp;
  <li><com><i>FsmState</i> <i>FsmTransition</i>:<b>getFromState(<b></b>)</b></com>
    <p><descr>returns the state from which the transition starts.</descr>
    <p>&nbsp;
  <li><com><i>FsmState</i> <i>FsmTransition</i>:<b>getToState(<b></b>)</b></com>
    <p><descr>returns the state to which the transition arrives.</descr>
    <p>&nbsp;
  <li><com><i>FsmTransition</i>:<b>setToState(<b><i>string</i> <b>stateName</b></b>)</b></com>
    <p><descr>sets the state to which the transition arrives.</descr>
    <p>&nbsp;
  <li><com><i>FsmTransition</i>:<b>setOnEvent(<b></b>)</b></com>
    <p><descr>sets the event that triggers this transition.</descr>
    <p>&nbsp;
  <li><com><i>string</i> <i>FsmTransition</i>:<b>getOnEvent(<b></b>)</b></com>
    <p><descr>returns the event that triggers this transition.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="fsmcondition">
<h4>3.19.3 FsmCondition</h4>
</a>The <b><class>FsmCondition</class></b> class represents a condition that a
transition must fulfill to occur when an event triggers it.
<ul>
  <li><com><i>FsmCondition</i>:<b>setCondition(<b><i>string</i> <b>varName</b>, <i>number</i>
    <b>operator</b>, <i>number</i> <b>value</b></b>)</b></com>
    <p><descr>sets the condition: <i>varName</i> is the name of the variable
    that is compared against the given value. The comparation depends on the
    operator, that is an integer number with the following correspondence: EQUAL
    is 0, NEQUAL is 1, GREATER is 2, LESS is 3, GREATER_EQ is 4, LESS_EQ is 5.</descr>
    <p>&nbsp;
  <li><com><i>string</i> <i>FsmCondition</i>:<b>getVariable(<b></b>)</b></com>
    <p><descr>returns the name of the variable of this condition.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>FsmCondition</i>:<b>getCondition(<b></b>)</b></com>
    <p><descr>returns the index of the operator.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>FsmCondition</i>:<b>getValue(<b></b>)</b></com>
    <p><descr>returns the number used in the comparation.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="fsmaction">
<h4>3.19.4 FsmAction</h4>
</a>The <b><class>FsmAction</class></b> class represents the parent of all the
kind of actions recognized by the FSM.<br>
No methods are defined for the superclass.
<p><a href="#index">Index</a>
<hr>
<p><a name="fsmactionset">
<h5>3.19.4.1 FsmActionSet</h5>
</a>The <b><class>FsmActionSet</class></b> class extends <i><parent>FSmAction</parent></i> and
represents an action that sets a variable with a specific value.
<ul>
  <li><com><i>FsmActionSet</i>:<b>setVariable(<b><i>string</i> <b>varName</b></b>)</b></com>
    <p><descr>sets the name of the variable set by this action.</descr>
    <p>&nbsp;
  <li><com><i>FsmActionSet</i>:<b>setValue(<b><i>number</i> <b>value</b></b>)</b></com>
    <p><descr>sets the integer value used to set the variable.</descr>
    <p>&nbsp;
  <li><com><i>string</i> <i>FsmActionSet</i>:<b>getVariable(<b></b>)</b></com>
    <p><descr>returns the name of the variable set by this action.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>FsmActionSet</i>:<b>getValue(<b></b>)</b></com>
    <p><descr>returns the integer value used to set the variable.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="fsmactionincr">
<h5>3.19.4.2 FsmActionIncr</h5>
</a>The <b><class>FsmActionIncr</class></b> class extends <i><parent>FSmAction</parent></i> and
represents an action that increments (or decrements if the value is negative) a
variable by a specific value.
<ul>
  <li><com><i>FsmActionIncr</i>:<b>setVariable(<b><i>string</i> <b>varName</b></b>)</b></com>
    <p><descr>sets the name of the variable incremented by this action.</descr>
    <p>&nbsp;
  <li><com><i>FsmActionIncr</i>:<b>setIncrement(<b><i>number</i> <b>value</b></b>)</b></com>
    <p><descr>sets the integer value used to increment the variable.</descr>
    <p>&nbsp;
  <li><com><i>string</i> <i>FsmActionIncr</i>:<b>getVariable(<b></b>)</b></com>
    <p><descr>returns the name of the variable incremented by this action.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>FsmActionIncr</i>:<b>getIncrement(<b></b>)</b></com>
    <p><descr>returns the integer value used to increment the variable.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="fsmactioncall">
<h5>3.19.4.3 FsmActionCall</h5>
</a>The <b><class>FsmActionCall</class></b> class extends <i><parent>FSmAction</parent></i> and
represents an action thats call a specified LUA function (the LUA function must
be stored in a global variable).
<ul>
  <li><com><i>FsmActionCall</i>:<b>setFunction(<b><i>string</i> <b>funcName</b></b>)</b></com>
    <p><descr>sets the name of the function (or better the name of the variable
    that holds the function) that is called by this action.</descr>
    <p>&nbsp;
  <li><com><i>string</i> <i>FsmActionCall</i>:<b>getFunction(<b></b>)</b></com>
    <p><descr>returns the name of the function (or better the name of the
    variable that holds the function) that is called by this action.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="speechsynth">
<h3>3.20 SpeechSynth</h3>
</a>The <b><class>SpeechSynth</class></b> class owns an unique implicit object
that represents a text-to-speech synthesizer performed by Jonathan Duddington's
&quot;<i>eSpeak</i>&quot; library. To work, this library needs all the necessary
data in the &quot;<i>espeak-data</i>&quot; and &quot;<i>espeak-data/voices</i>&quot;
directories in the application folder. Since there is a single <b>SpeechSynth</b>
object, its methods are called without specifying any object. They are:
<ul>
  <li><com><i>number</i> <b>speakInit(</b><i>number</i> <b>bufferLength</b> =
    250<b>)</b></com>
    <p><descr>initializes the speech synthesizer with a given length in
    milliseconds of the emitted data buffer. Returns the sample rate of the
    sound data (the bit depth is always 16).</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <b>speakIsInit()</b></com>
    <p><descr>returns true if the speech synthesizer has been initialized.</descr>
    <p>&nbsp;
  <li><com><b>speakAsWav(</b><i>string</i> <b>wavFileName</b>, <i>string</i> <b>speech</b><b>)</b></com>
    <p><descr>speaks the given <i>speech</i> to the specified file.</descr>
    <p>&nbsp;
  <li><com><b>speak(</b><i>Sound</i> <b>sound</b>, <i>string</i> <b>speech</b><b>)</b></com>
    <p><descr>speaks the given <i>speech</i> in the given <i>sound</i>.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <b>speakGetRate(</b><i>boolean</i> <b>current</b> =
    true<b>)</b></com>
    <p><descr>return the speech rate in words per minute (the current rate if <i>current</i>
    is true or the default one if false)</descr>
    <p>&nbsp;
  <li><com><b>speakSetRate(</b><i>number</i> <b>value</b>, <i>boolean</i> <b>relative</b>
    = false<b>)</b></com>
    <p><descr>sets the speech rate in words per minute (the absolute value if <i>relative</i>
    is false or the relative one if true)</descr>
    <p>&nbsp;
  <li><com><i>number</i> <b>speakGetVolume(</b><i>boolean</i> <b>current</b> =
    true<b>)</b></com>
    <p><descr>return the speech volume in the range 0-100 (the current volume if
    <i>current</i> is true or the default one if false)</descr>
    <p>&nbsp;
  <li><com><b>speakSetVolume(</b><i>number</i> <b>value</b>, <i>boolean</i> <b>relative</b>
    = false<b>)</b></com>
    <p><descr>sets the volume in the range 0-100 (the absolute value if <i>relative</i>
    is false or the relative one if true)</descr>
    <p>&nbsp;
  <li><com><i>number</i> <b>speakGetPitch(</b><i>boolean</i> <b>current</b> =
    true<b>)</b></com>
    <p><descr>return the speech pitch in Hz (the current pitch if <i>current</i>
    is true or the default one if false)</descr>
    <p>&nbsp;
  <li><com><b>speakSetPitch(</b><i>number</i> <b>value</b>, <i>boolean</i> <b>relative</b>
    = false<b>)</b></com>
    <p><descr>sets the pitch in Hz (the absolute value if <i>relative</i> is
    false or the relative one if true)</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <b>speakSetVoice(</b><i>string</i> <b>voiceName</b><b>)</b></com>
    <p><descr>loads the pspecified voice as the default voice. The program looks
    for voice files in the directory &quot;<i>espeak-data/voices</i>&quot; in
    the application folder. The function returns true if the voice file was
    found.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="networkserver">
<h3>3.21 NetworkServer</h3>
</a>The <b><class>NetworkServer</class></b> class represents a server that communicates
with its clients. It is used for networking and encapsulates the communication
capabilities of the servers of the <i>Etwork</i> library.
<ul>
  <li><com><i>NetworkServer</i> <b>NetworkServer(</b><I>number</I> <B>port</B>, <I>boolean</I> <B>reliable</B> = true, <I>number</I> <B>maxClients</B> = 1<b>)</b></com>
    <p><descr>creates a server that uses the given port. The <I>reliable</I> flag means that the TCP protocol is used (if true) or the UDP protocol (if false). The <I>maxClients</I> argument specifies the maximum number of clients that the server can accept.</descr></p>
  <li><com><i>NetworkServer</i>:<b>delete()</b></com>
    <p><descr>deletes the server.</descr></p>
  <li><com><I>number</I> <i>NetworkServer</i>:<b>accept()</b></com>
    <p><descr>accepts the clients that request a connection and returns the number of estabilished connections.</descr></p>
  <li><com><I>number</I> <i>NetworkServer</i>:<b>getClientsCount()</b></com>
    <p><descr>returns the number of active clients.</descr></p>
  <li><com><I>boolean</I> <i>NetworkServer</i>:<b>isClientClosed(</b><I>number</I> <B>id</B><b>)</b></com>
    <p><descr>returns true if the client (corresponding to the given <I>id</I>) is closed. The <I>id</I> is a progressive number assigned to clients, it can be greater than the maximum number of clients.</descr></p>
  <li><com><I>number</I> <i>NetworkServer</i>:<b>poll(</b><b>)</b></com>
    <p><descr>returns the number of clients that sent new data.</descr></p>
  <li><com><I>number</I> <B>id</B>, <I>number</I> <B>bytes</B> = <i>NetworkServer</i>:<b>readAfterPoll(</b><I>number</I> <B>index</B>, <I>NetworkBuffer</I> <B>buffer</B><b>)</b></com>
    <p><descr>reads data after a poll operation. <I>Index</I> must be less than the number of clients returned by <I>poll()</I>. The available data is put in the buffer. The returned values are: <I>id</I>, that is the identification of the client corresponding to the given index; <I>bytes</I>, that is the number of bytes read.</descr></p>
  <li><com><I>number</I> <i>NetworkServer</i>:<b>read(</b><I>number</I> <B>id</B>, <I>NetworkBuffer</I> <B>buffer</B><b>)</b></com>
    <p><descr>reads data from the client identified by <I>id</I>. The available data is put in the buffer. The returned value is the number of bytes read.</descr></p>
  <li><com><I>number</I> <i>NetworkServer</i>:<b>write(</b><I>number</I> <B>id</B>, <I>NetworkBuffer</I> <B>buffer</B><b>)</b></com>
    <p><descr>writes data to the client identified by <I>id</I>. The available data is retrieved from the buffer. The returned value is the number of bytes effectively written.</descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="networkclient">
<h4>3.21.1 NetworkClient</h4>
</a>The <b><class>NetworkClient</class></b> class represents a client that communicates
with its server. It is used for networking and encapsulates the communication
capabilities of the clients of the <i>Etwork</i> library.
<ul>
  <li><com><i>NetworkClient</i> <b>NetworkClient(</b><I>boolean</I> <B>reliable</B> = true<b>)</b></com>
    <p><descr>creates a client. The <I>reliable</I> flag means that the TCP protocol is used (if true) or the UDP protocol (if false).</descr></p>
  <li><com><i>NetworkClient</i>:<b>delete()</b></com>
    <p><descr>deletes the client.</descr></p>
  <li><com><I>boolean</I> <i>NetworkClient</i>:<b>isServerClosed(</b><b>)</b></com>
    <p><descr>returns true if the server is closed.</descr></p>
  <li><com><I>boolean</I> <i>NetworkClient</i>:<b>connect(</b><I>string</I> <B>address</B>, <I>number</I> <B>port</B> = 80<b>)</b></com>
    <p><descr>connects to the server at the given address. The function is blocking.</descr></p>
  <li><com><I>number</I> <i>NetworkClient</i>:<b>poll(</b><b>)</b></com>
    <p><descr>returns 1 if the server has sent new data.</descr></p>
  <li><com><I>number</I> <i>NetworkClient</i>:<b>read(</b><I>NetworkBuffer</I> <B>buffer</B><b>)</b></com>
    <p><descr>reads data from the server. The available data is put in the buffer. The returned value is the number of bytes read.</descr></p>
  <li><com><I>number</I> <i>NetworkClient</i>:<b>write(</b><I>NetworkBuffer</I> <B>buffer</B><b>)</b></com>
    <p><descr>writes data to the server. The available data is retrieved from the buffer. The returned value is the number of bytes effectively written.</descr></p>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="networkbuffer">
<h4>3.21.2 NetworkBuffer</h4>
</a>The <b><class>NetworkBuffer</class></b> class represents a memory buffer useful to store binary values.
<ul>
  <li><com><i>NetworkBuffer</i> <b>NetworkBuffer(</b><I>number</I> <B>maxSize</B><b>)</b></com>
    <p><descr>creates the buffer with the specified size.</descr></p>
  <li><com><i>NetworkBuffer</i>:<b>delete()</b></com>
    <p><descr>deletes the buffer.</descr></p>
  <li><com><I>number</I> <i>NetworkBuffer</i>:<b>getSize(</b><b>)</b></com>
    <p><descr>returns the size of the buffer (the number of the actual data bytes).</descr></p>
  <li><com><I>number</I> <i>NetworkBuffer</i>:<b>getMaxSize(</b><b>)</b></com>
    <p><descr>returns the maximum size of the buffer (in bytes).</descr></p>
  <li><com><i>NetworkBuffer</i>:<b>setSize(</b><I>number</I> <B>size</B><b>)</b></com>
    <p><descr>sets size of the buffer (in bytes).</descr></p>
  <li><com><I>number</I> <i>NetworkBuffer</i>:<b>getInt(</b><I>number</I> <B>byte</B><b>)</b></com>
    <p><descr>returns the integer (4 bytes) stored in the buffer in binary format starting from the given byte.</descr></p>
  <li><com><i>NetworkBuffer</i>:<b>setInt(</b><I>number</I> <B>byte</B>, <I>number</I> <B>value</B><b>)</b></com>
    <p><descr>stores the integer (4 bytes) in the buffer in binary format starting from the given byte.</descr></p>
  <li><com><I>number</I> <i>NetworkBuffer</i>:<b>getShort(</b><I>number</I> <B>byte</B><b>)</b></com>
    <p><descr>returns the short integer (2 bytes) stored in the buffer in binary format starting from the given byte.</descr></p>
  <li><com><i>NetworkBuffer</i>:<b>setShort(</b><I>number</I> <B>byte</B>, <I>number</I> <B>value</B><b>)</b></com>
    <p><descr>stores the short integer (2 bytes) in the buffer in binary format starting from the given byte.</descr></p>
  <li><com><I>number</I> <i>NetworkBuffer</i>:<b>getChar(</b><I>number</I> <B>byte</B><b>)</b></com>
    <p><descr>returns the byte integer (1 byte) stored in the buffer in binary format starting from the given byte.</descr></p>
  <li><com><i>NetworkBuffer</i>:<b>setChar(</b><I>number</I> <B>byte</B>, <I>number</I> <B>value</B><b>)</b></com>
    <p><descr>stores the byte integer (1 byte) in the buffer in binary format starting from the given byte.</descr></p>
  <li><com><I>boolean</I> <i>NetworkBuffer</i>:<b>getBool(</b><I>number</I> <B>byte</B><b>)</b></com>
    <p><descr>returns the boolean (1 byte?) stored in the buffer in binary format starting from the given byte.</descr></p>
  <li><com><i>NetworkBuffer</i>:<b>setBool(</b><I>number</I> <B>byte</B>, <I>boolean</I> <B>value</B><b>)</b></com>
    <p><descr>stores the boolean (1 byte?) in the buffer in binary format starting from the given byte.</descr></p>
  <li><com><I>number</I> <i>NetworkBuffer</i>:<b>getFloat(</b><I>number</I> <B>byte</B><b>)</b></com>
    <p><descr>returns the floating point number is single precision (4 bytes) stored in the buffer in binary format starting from the given byte.</descr></p>
  <li><com><i>NetworkBuffer</i>:<b>setFloat(</b><I>number</I> <B>byte</B>, <I>number</I> <B>value</B><b>)</b></com>
    <p><descr>stores the floating point number is single precision (4 bytes) in the buffer in binary format starting from the given byte.</descr></p>
  <li><com><I>number</I> <i>NetworkBuffer</i>:<b>getDouble(</b><I>number</I> <B>byte</B><b>)</b></com>
    <p><descr>returns the floating point number is double precision (8 bytes) stored in the buffer in binary format starting from the given byte.</descr></p>
  <li><com><i>NetworkBuffer</i>:<b>setDouble(</b><I>number</I> <B>byte</B>, <I>number</I> <B>value</B><b>)</b></com>
    <p><descr>stores the floating point number is double precision (8 bytes) in the buffer in binary format starting from the given byte.</descr></p>
  <li><com><I>string</I> <i>NetworkBuffer</i>:<b>getString(</b><I>number</I> <B>byte</B>, <I>number</I> <B>length</B><b>)</b></com>
    <p><descr>returns the string stored in the buffer starting from the given byte for <I>length</I> bytes.</descr></p>
  <li><com><i>NetworkBuffer</i>:<b>setString(</b><I>number</I> <B>byte</B>, <I>string</I> <B>value</B><b>)</b></com>
    <p><descr>stores the string in the buffer starting from the given byte.</descr></p>
</ul>
<p><a href="#index">Index</a>

<!-- RakNet

<hr>
<p><a name="netserver">
<h3>3.22 NetServer</h3>
</a>The <b><class>NetServer</class></b> class represents a server that dispaches
packets to its clients. It is used for networking and encapsulates the UDP
communication capabilities of the servers of the <i>RakNet</i> library.
<ul>
  <li><com><i>NetServer</i> <b>NetServer()</b></com>
    <p><descr>creates a server.</descr>
    <p>&nbsp;
  <li><com><i>NetServer</i>:<b>delete()</b></com>
    <p><descr>deletes the server.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>NetServer</i>:<b>start(</b><i>number</i> <b>maxClients</b>,
    <i>number</i> <b>serverPort</b>, <i>number</i> <b>sleep</b> = 0<b>)</b></com>
    <p><descr>starts the server with the specified maximum number of clients,
    the server port (use numbers over 32000) and the optional sleep parameter
    (30 gives also good response times). Returns true on success.</descr>
    <p>&nbsp;
  <li><com><i>NetServer</i>:<b>disconnect()</b></com>
    <p><descr>disconnects the server.</descr>
    <p>&nbsp;
  <li><com><i>NetServer</i>:<b>receive(</b><i>NetPacket</i> <b>packet</b><b>)</b></com>
    <p><descr>fills the packet passed as a parameter with the received data.</descr>
    <p>&nbsp;
  <li><com><i>NetServer</i>:<b>deallocate(</b><i>NetPacket</i> <b>packet</b><b>)</b></com>
    <p><descr>deallocates the packet. Must be explicitly called after a <i>receive()</i>
    when the data of the packet is no more necessary.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>NetServer</i>:<b>sendTo(</b><i>NetPlayer</i> <b>player</b>,
    <i>NetStream</i> <b>stream</b><b>)</b></com>
    <p><descr>sends the data stream to the specified player. Returns true on
    success.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>NetServer</i>:<b>sendToAll(</b><i>NetStream</i> <b>stream</b><b>)</b></com>
    <p><descr>sends the data stream to all the clients. Returns true on success.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>NetServer</i>:<b>sendToAllExcept(</b><i>NetPlayer</i>
    <b>player</b>, <i>NetStream</i> <b>stream</b><b>)</b></com>
    <p><descr>sends the data stream to all the clients except the specified
    player. Returns true on success.</descr>
    <p>&nbsp;
  <li><com><i>NetServer</i>:<b>kick(</b><i>NetPlayer</i> <b>player</b><b>)</b></com>
    <p><descr>kicks the specified player.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>NetServer</i>:<b>getAveragePing(</b><i>NetPlayer</i>
    <b>player</b><b>)</b></com>
    <p><descr>returns the average ping of the specified player.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>NetServer</i>:<b>getPlayerIndex(</b><i>NetPlayer</i>
    <b>player</b><b>)</b></com>
    <p><descr>returns the index corresponding to the specified player.</descr>
    <p>&nbsp;
  <li><com><i>NetServer</i>:<b>getPlayer(</b><i>number</i> <b>index</b>, <i>NetPlayer</i>
    <b>player</b><b>)</b></com>
    <p><descr>fills the player object passed as a parameter with the properties
    of the player corresponding to index.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="netclient">
<h4>3.22.1 NetClient</h4>
</a>The <b><class>NetClient</class></b> class represents a client connected to a
server. It is used for networking and encapsulates the UDP communication
capabilities of the clients of the <i>RakNet</i> library.
<ul>
  <li><com><i>NetClient</i> <b>NetClient()</b></com>
    <p><descr>creates a client.</descr>
    <p>&nbsp;
  <li><com><i>NetClient</i>:<b>delete()</b></com>
    <p><descr>deletes the client.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>NetClient</i>:<b>connect(</b><i>string</i> <b>ipAddress</b>,
    <i>number</i> <b>serverPort</b>, <i>number <b>clientPort</b>, </i><i>number</i>
    <b>sleep</b> = 0<b>)</b></com>
    <p><descr>connects the client to the server corresponding to given address
    and port (use numbers over 32000) and the optional sleep parameter (30 gives
    also good response times). Returns true on success.</descr>
    <p>&nbsp;
  <li><com><i>NetClient</i>:<b>disconnect()</b></com>
    <p><descr>disconnects the client.</descr>
    <p>&nbsp;
  <li><com><i>NetClient</i>:<b>receive(</b><i>NetPacket</i> <b>packet</b><b>)</b></com>
    <p><descr>fills the packet passed as a parameter with the received data.</descr>
    <p>&nbsp;
  <li><com><i>NetClient</i>:<b>deallocate(</b><i>NetPacket</i> <b>packet</b><b>)</b></com>
    <p><descr>deallocates the packet. Must be explicitly called after a <i>receive()</i>
    when the data of the packet is no more necessary.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>NetClient</i>:<b>send(</b><i>NetStream</i> <b>stream</b><b>)</b></com>
    <p><descr>sends the data stream to the server. Returns true on success.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>NetClient</i>:<b>getAveragePing(</b><b>)</b></com>
    <p><descr>returns the average ping of the client.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>NetClient</i>:<b>isConnected(</b><b>)</b></com>
    <p><descr>returns true if the client is connected to the server.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="netpacket">
<h4>3.22.2 NetPacket</h4>
</a>The <b><class>NetPacket</class></b> class represents a packet of data
exchanged between a server and a client. It is used for networking and
encapsulates the capabilities of the packets of the <i>RakNet</i> library.
<ul>
  <li><com><i>NetPacket</i> <b>NetPacket()</b></com>
    <p><descr>creates an empty packet.</descr>
    <p>&nbsp;
  <li><com><i>NetPacket</i>:<b>delete()</b></com>
    <p><descr>deletes the packet.</descr>
    <p>&nbsp;
  <li><com><i>NetPacket</i>:<b>getPlayer(</b><i>NetPlayer</i> <b>player</b><b>)</b></com>
    <p><descr>fills the player object passed as a parameter with the properties
    of the player that sent this packet.</descr>
    <p>&nbsp;
  <li><com><i>NetPacket</i>:<b>getStream(</b><i>NetStream</i> <b>stream</b><b>)</b></com>
    <p><descr>fills the stream object passed as a parameter with the properties
    of the stream held by this packet.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>NetPacket</i>:<b>getTimeStamp()</b></com>
    <p><descr>returns the time stamp of this packet (specifies the difference in
    time between the sender and the receiver).</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>NetPacket</i>:<b>isData()</b></com>
    <p><descr>returns true if this packet contains data.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>NetPacket</i>:<b>isVoice()</b></com>
    <p><descr>returns true if this packet contains voice data.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>NetPacket</i>:<b>getID()</b></com>
    <p><descr>returns the identification code of this packet (every value
    correspond to a different kind of packet).</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>NetPacket</i>:<b>isNull()</b></com>
    <p><descr>returns true if the packet does not contain any kind of data (in
    practice a <i>receive()</i> was called but no packet was there waiting).</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="netstream">
<h4>3.22.3 NetStream</h4>
</a>The <b><class>NetStream</class></b> class represents a sequence of data to
be exchanged in a packet between a server and a client. It is used for
networking and encapsulates the capabilities of the bit streams of the <i>RakNet</i>
library.
<ul>
  <li><com><i>NetStream</i> <b>NetStream(</b><i>number</i> <b>initBytes</b><b>)</b></com>
    <p><descr>creates an empty stream reserving the specified initial number of
    bytes for data.</descr>
    <p>&nbsp;
  <li><com><i>NetStream</i>:<b>delete()</b></com>
    <p><descr>deletes the stream.</descr>
    <p>&nbsp;
  <li><com><i>NetStream</i>:<b>initWrite(</b><i>boolean</i> <b>writeTimeStamp</b>
    = false<b>)</b></com>
    <p><descr>initializes the stream for writing. If <i>writeTimeStamp</i> is
    true, also the time stamp is written.</descr>
    <p>&nbsp;
  <li><com><i>NetStream</i>:<b>writeBool(</b><i>boolean</i> <b>value</b><b>)</b></com>
    <p><descr>writes a boolean value to the stream.</descr>
    <p>&nbsp;
  <li><com><i>NetStream</i>:<b>writeUChar(</b><i>number</i> <b>value</b>, <i>boolean</i>
    <b>compressed</b> = false)</com>
    <p><descr>writes an unsigned character (8 bits long) to the stream. If <i>compressed</i>
    is true, a compressed version is written (good when the value is around
    zero).</descr>
    <p>&nbsp;
  <li><com><i>NetStream</i>:<b>writeChar(</b><i>number</i> <b>value</b>, <i>boolean</i>
    <b>compressed</b> = false)</com>
    <p><descr>writes a character (8 bits long) to the stream. If <i>compressed</i>
    is true, a compressed version is written (good when the value is around
    zero).</descr>
    <p>&nbsp;
  <li><com><i>NetStream</i>:<b>writeUShort(</b><i>number</i> <b>value</b>, <i>boolean</i>
    <b>compressed</b> = false)</com>
    <p><descr>writes an unsigned short integer (16 bits long) to the stream. If <i>compressed</i>
    is true, a compressed version is written (good when the value is around
    zero).</descr>
    <p>&nbsp;
  <li><com><i>NetStream</i>:<b>writeShort(</b><i>number</i> <b>value</b>, <i>boolean</i>
    <b>compressed</b> = false)</com>
    <p><descr>writes a short integer (16 bits long) to the stream. If <i>compressed</i>
    is true, a compressed version is written (good when the value is around
    zero).</descr>
    <p>&nbsp;
  <li><com><i>NetStream</i>:<b>writeInt(</b><i>number</i> <b>value</b>, <i>boolean</i>
    <b>compressed</b> = false)</com>
    <p><descr>writes an integer (32 bits long) to the stream. If <i>compressed</i>
    is true, a compressed version is written (good when the value is around
    zero).</descr>
    <p>&nbsp;
  <li><com><i>NetStream</i>:<b>writeFloat(</b><i>number</i> <b>value</b>, <i>boolean</i>
    <b>compressed</b> = false)</com>
    <p><descr>writes a floating point value (32 bits precision) to the stream.
    If <i>compressed</i> is true, a compressed version is written (good when the
    value is around zero).</descr>
    <p>&nbsp;
  <li><com><i>NetStream</i>:<b>writeDouble(</b><i>number</i> <b>value</b>, <i>boolean</i>
    <b>compressed</b> = false)</com>
    <p><descr>writes a floating point value (64 bits precision) to the stream.
    If <i>compressed</i> is true, a compressed version is written (good when the
    value is around zero).</descr>
    <p>&nbsp;
  <li><com><i>NetStream</i>:<b>writeString(</b><i>string</i> <b>string</b><b>)</b></com>
    <p><descr>writes a string to the stream.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>NetStream</i>:<b>readBool(</b><b>)</b></com>
    <p><descr>reads a boolean from the stream. Returns <i>nil</i> if not enough
    bits are available.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>NetStream</i>:<b>readUChar(</b><i>boolean</i> <b>compressed</b>
    = false<b>)</b></com>
    <p><descr>reads an unsigned character from the stream. Returns <i>nil</i> if
    not enough bits are available. If the data was written compressed, the <i>compressed</i>
    argument must be set to true.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>NetStream</i>:<b>readChar(</b><i>boolean</i> <b>compressed</b>
    = false<b>)</b></com>
    <p><descr>reads a character from the stream. Returns <i>nil</i> if not
    enough bits are available. If the data was written compressed, the <i>compressed</i>
    argument must be set to true.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>NetStream</i>:<b>readUShort(</b><i>boolean</i> <b>compressed</b>
    = false<b>)</b></com>
    <p><descr>reads an unsigned short integer from the stream. Returns <i>nil</i>
    if not enough bits are available. If the data was written compressed, the <i>compressed</i>
    argument must be set to true.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>NetStream</i>:<b>readShort(</b><i>boolean</i> <b>compressed</b>
    = false<b>)</b></com>
    <p><descr>reads a short integer from the stream. Returns <i>nil</i> if not
    enough bits are available. If the data was written compressed, the <i>compressed</i>
    argument must be set to true.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>NetStream</i>:<b>readInt(</b><i>boolean</i> <b>compressed</b>
    = false<b>)</b></com>
    <p><descr>reads an integer from the stream. Returns <i>nil</i> if not enough
    bits are available. If the data was written compressed, the <i>compressed</i>
    argument must be set to true.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>NetStream</i>:<b>readFloat(</b><i>boolean</i> <b>compressed</b>
    = false<b>)</b></com>
    <p><descr>reads a floating point value in single precision from the stream.
    Returns <i>nil</i> if not enough bits are available. If the data was written
    compressed, the <i>compressed</i> argument must be set to true.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>NetStream</i>:<b>readDouble(</b><i>boolean</i> <b>compressed</b>
    = false<b>)</b></com>
    <p><descr>reads a floating point value in double precision from the stream.
    Returns <i>nil</i> if not enough bits are available. If the data was written
    compressed, the <i>compressed</i> argument must be set to true.</descr>
    <p>&nbsp;
  <li><com><i>string</i> <i>NetStream</i>:<b>readString(</b><b>)</b></com>
    <p><descr>reads a string from the stream. Returns <i>nil</i> on error.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="netplayer">
<h4>3.22.4 NetPlayer</h4>
</a>The <b><class>NetPlayer</class></b> class represents the identification of a
player connected to the network. It is used for networking and encapsulates the
capabilities of the <i>PlayerID</i> of the <i>RakNet</i> library.
<ul>
  <li><com><i>NetPlayer</i> <b>NetPlayer()</b></com>
    <p><descr>creates an empty player.</descr>
    <p>&nbsp;
  <li><com><i>NetPlayer</i>:<b>delete()</b></com>
    <p><descr>deletes the player.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>NetPlayer</i>:<b>isEqual(</b><i>NetPlayer</i> <b>player</b><b>)</b></com>
    <p><descr>compares two players to discover if they are the same.</descr>
</ul>
<p><a href="#index">Index</a>
<hr>
<p><a name="netvoice">
<h4>3.22.5 NetVoice</h4>
</a>The <b><class>NetVoice</class></b> class is used for voice communications on
the net. It is used for networking and encapsulates the capabilities of the <i>RakVoice</i>
class of the <i>RakNet</i> library.
<ul>
  <li><com><i>NetVoice</i> <b>NetVoice()</b></com>
    <p><descr>creates an instance.</descr>
    <p>&nbsp;
  <li><com><i>NetVoice</i>:<b>delete()</b></com>
    <p><descr>deletes the instance.</descr>
    <p>&nbsp;
  <li><com><i>NetVoice</i>:<b>init(</b><i>NetServer OR NetClient</i> <b>peer</b><b>)</b></com>
    <p><descr>initializes the instance.</descr>
    <p>&nbsp;
  <li><com><i>NetVoice</i>:<b>deinit(</b><b>)</b></com>
    <p><descr>deinitializes the instance.</descr>
    <p>&nbsp;
  <li><com><i>number</i> <i>NetVoice</i>:<b>getBlockSize(</b><b>)</b></com>
    <p><descr>returns the maximum size of the block of voice data.</descr>
    <p>&nbsp;
  <li><com><i>NetVoice</i>:<b>encodeCaptured(</b><i>CaptureDevice</i> <b>device</b>,
    <i>NetPlayer</i> <b>recipient</b><b>)</b></com>
    <p><descr>encodes the voice data captured by the microphone and dispatches
    the packet to the specified recipient.</descr>
    <p>&nbsp;
  <li><com><i>boolean</i> <i>NetVoice</i>:<b>writeToSample3D(</b><i>Sample3D</i>
    <b>sample</b>, <i>NetPlayer</i> <b>player</b><b>)</b></com>
    <p><descr>writes the queued sound data to the sample buffer and fills the
    player parameter with the sender data. Returns true on success, while false
    means that no sound data was available.</descr>
</ul>
<p><a href="#index">Index</a>

-->

<hr>
<p>Any question? Contact: <a href="mailto:tetractys@users.sourceforge.net">tetractys@users.sf.net</a><br>
Online resources: <a href="http://apocalyx.sourceforge.net">http://apocalyx.sf.net</a></font>

</body>

</html>
